<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Symbiote">
      <assemblydata version="0.5.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Symbiote</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyConfigurationAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Symbiote</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Copyright ©  2016</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTrademarkAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.GuidAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>899d0a77-77e8-4bcf-848e-2167c8cc036f</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>0.5.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Symbiote.Cryptography">
      <assemblydata version="1.0.0.0" culture="" key="002400000480000094000000060200000024000052534131000400000100010093A7E3969674AE2139E4713A879A0C5C3CD429DA0FE0B121A4F9A604BCD07668542C9668998724E64FB7B8B6C892C5C212E7EFAD4E2D9EFA17F36300B9E30FE76B8AE154936E8000723EA1CE4AA4328C5DBCDC9EF6941D849D5EB63190C89976EE40A40A7F0FDA2A98E29FD4D11E0AD6D034FAF65EA7C2C78431A4F2B623358C" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Symbiote.Cryptography</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyConfigurationAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Symbiote.Cryptography</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Copyright ©  2016</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTrademarkAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.GuidAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>85436076-1e12-4089-9ce1-6f9efe2cce8e</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:Symbiote.Core">
      <topicdata group="api" />
      <apidata name="Symbiote.Core" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.BigFont" />
        <element api="T:Symbiote.Core.BigFont.Font" />
        <element api="T:Symbiote.Core.BigFont.FontSize" />
        <element api="T:Symbiote.Core.ManagerState" />
        <element api="T:Symbiote.Core.IManager" />
        <element api="T:Symbiote.Core.ItemEventArgs" />
        <element api="T:Symbiote.Core.xLogger" />
        <element api="T:Symbiote.Core.xLogger.UnspecifiedReturnValue" />
        <element api="T:Symbiote.Core.xLogger.ExcludedParam" />
        <element api="T:Symbiote.Core.ProjectInstaller" />
        <element api="T:Symbiote.Core.RealtimeLogger" />
        <element api="T:Symbiote.Core.RealtimeLogger.EventHandler`1" />
        <element api="T:Symbiote.Core.RealtimeLoggerEventArgs" />
        <element api="T:Symbiote.Core.FQNResolver" />
        <element api="T:Symbiote.Core.FQNResolver.ItemSource" />
        <element api="T:Symbiote.Core.ContractResolver" />
        <element api="T:Symbiote.Core.ContractResolver.ContractResolverType" />
        <element api="T:Symbiote.Core.Item" />
        <element api="T:Symbiote.Core.Item.EventHandler`1" />
        <element api="T:Symbiote.Core.ProgramManager" />
        <element api="T:Symbiote.Core.Program" />
        <element api="T:Symbiote.Core.Utility" />
        <element api="T:Symbiote.Core.MessageType" />
        <element api="T:Symbiote.Core.ResultCode" />
        <element api="T:Symbiote.Core.Message" />
        <element api="T:Symbiote.Core.Result" />
        <element api="T:Symbiote.Core.Result`1" />
        <element api="T:Symbiote.Core.WindowsService" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.BigFont">
      <topicdata group="api" />
      <apidata name="BigFont" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Symbiote.Core.BigFont.#cctor" />
        <element api="P:Symbiote.Core.BigFont.Alphabet" />
        <element api="F:Symbiote.Core.BigFont.defaultFont" />
        <element api="P:Symbiote.Core.BigFont.DefaultFont" />
        <element api="F:Symbiote.Core.BigFont.defaultFontSize" />
        <element api="P:Symbiote.Core.BigFont.DefaultFontSize" />
        <element api="Overload:Symbiote.Core.BigFont.Generate">
          <element api="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.FontSize)" />
          <element api="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.Font,Symbiote.Core.BigFont.FontSize)" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.BigFont">
      <topicdata name="BigFont" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.BigFont" />
      <apidata name="BigFont" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="Overload:Symbiote.Core.BigFont.Generate">
          <element api="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.FontSize)" />
          <element api="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.Font,Symbiote.Core.BigFont.FontSize)" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.BigFont">
      <topicdata name="BigFont" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.BigFont" />
      <apidata name="BigFont" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.BigFont.Alphabet" />
        <element api="P:Symbiote.Core.BigFont.DefaultFont" />
        <element api="P:Symbiote.Core.BigFont.DefaultFontSize" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.BigFont">
      <topicdata name="BigFont" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.BigFont" />
      <apidata name="BigFont" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.BigFont.defaultFont" />
        <element api="F:Symbiote.Core.BigFont.defaultFontSize" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.BigFont.Generate">
      <topicdata name="Generate" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Generate" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.FontSize)" />
        <element api="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.Font,Symbiote.Core.BigFont.FontSize)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.BigFont.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.BigFont.Alphabet">
      <topicdata group="api" />
      <apidata name="Alphabet" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Alphabet" />
      <setter name="set_Alphabet" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.Tuple`3" ref="true">
              <specialization>
                <type api="T:System.Char" ref="false" />
                <type api="T:Symbiote.Core.BigFont.Font" ref="false">
                  <type api="T:Symbiote.Core.BigFont" ref="true" />
                </type>
                <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
                  <type api="T:Symbiote.Core.BigFont" ref="true" />
                </type>
              </specialization>
            </type>
            <arrayOf rank="1">
              <type api="T:System.String" ref="true" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.defaultFont">
      <topicdata group="api" />
      <apidata name="defaultFont" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <enumValue>
        <field name="Block" />
      </enumValue>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.BigFont.DefaultFont">
      <topicdata group="api" />
      <apidata name="DefaultFont" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DefaultFont" />
      <setter name="set_DefaultFont" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.defaultFontSize">
      <topicdata group="api" />
      <apidata name="defaultFontSize" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <enumValue>
        <field name="Large" />
      </enumValue>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.BigFont.DefaultFontSize">
      <topicdata group="api" />
      <apidata name="DefaultFontSize" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DefaultFontSize" />
      <setter name="set_DefaultFontSize" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.Font,Symbiote.Core.BigFont.FontSize)">
      <topicdata group="api" />
      <apidata name="Generate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Symbiote.Core.BigFont.Generate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="font" optional="true">
          <type api="T:Symbiote.Core.BigFont.Font" ref="false">
            <type api="T:Symbiote.Core.BigFont" ref="true" />
          </type>
          <argument>
            <type api="T:Symbiote.Core.BigFont.Font" ref="false">
              <type api="T:Symbiote.Core.BigFont" ref="true" />
            </type>
            <enumValue>
              <field name="Default" />
            </enumValue>
          </argument>
        </parameter>
        <parameter name="size" optional="true">
          <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
            <type api="T:Symbiote.Core.BigFont" ref="true" />
          </type>
          <argument>
            <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
              <type api="T:Symbiote.Core.BigFont" ref="true" />
            </type>
            <enumValue>
              <field name="Default" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.FontSize)">
      <topicdata group="api" />
      <apidata name="Generate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Symbiote.Core.BigFont.Generate" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="phrase">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="size" optional="true">
          <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
            <type api="T:Symbiote.Core.BigFont" ref="true" />
          </type>
          <argument>
            <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
              <type api="T:Symbiote.Core.BigFont" ref="true" />
            </type>
            <enumValue>
              <field name="Default" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.BigFont.Font">
      <topicdata group="api" />
      <apidata name="Font" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.BigFont.Font.Default" />
        <element api="F:Symbiote.Core.BigFont.Font.Block" />
        <element api="F:Symbiote.Core.BigFont.Font.Graffiti" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.Font.Block">
      <topicdata group="api" notopic="" />
      <apidata name="Block" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.Font.Default">
      <topicdata group="api" notopic="" />
      <apidata name="Default" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.Font.Graffiti">
      <topicdata group="api" notopic="" />
      <apidata name="Graffiti" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont.Font" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Symbiote.Core.BigFont.FontSize">
      <topicdata group="api" />
      <apidata name="FontSize" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.BigFont.FontSize.Default" />
        <element api="F:Symbiote.Core.BigFont.FontSize.Large" />
        <element api="F:Symbiote.Core.BigFont.FontSize.Medium" />
        <element api="F:Symbiote.Core.BigFont.FontSize.Small" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.FontSize.Default">
      <topicdata group="api" notopic="" />
      <apidata name="Default" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.FontSize.Large">
      <topicdata group="api" notopic="" />
      <apidata name="Large" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <value>8</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.FontSize.Medium">
      <topicdata group="api" notopic="" />
      <apidata name="Medium" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <value>6</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.BigFont.FontSize.Small">
      <topicdata group="api" notopic="" />
      <apidata name="Small" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.BigFont.FontSize" ref="false">
          <type api="T:Symbiote.Core.BigFont" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Symbiote.Core.ContractResolver">
      <topicdata group="api" />
      <apidata name="ContractResolver" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:Newtonsoft.Json.Serialization.DefaultContractResolver._instanceState">
          <apidata name="_instanceState" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="true" serialized="true" />
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolverState" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="F:Newtonsoft.Json.Serialization.DefaultContractResolver._sharedCache">
          <apidata name="_sharedCache" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetState">
          <apidata name="GetState" group="member" subgroup="method" />
          <memberdata visibility="assembly" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolverState" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
          <apidata name="ResolveContract" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
          </returns>
          <implements>
            <member api="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
              <type api="T:Newtonsoft.Json.Serialization.IContractResolver" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
          <apidata name="GetSerializableMembers" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Reflection.MemberInfo" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSerializeEntityMember(System.Reflection.MemberInfo)">
          <apidata name="ShouldSerializeEntityMember" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="memberInfo">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
          <apidata name="CreateObjectContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonObjectContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)">
          <apidata name="GetExtensionDataMemberForType" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Reflection.MemberInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)">
          <apidata name="GetAttributeConstructor" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Reflection.ConstructorInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)">
          <apidata name="GetParameterizedConstructor" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Reflection.ConstructorInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
          <apidata name="CreateConstructorParameters" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="constructor">
              <type api="T:System.Reflection.ConstructorInfo" ref="true" />
            </parameter>
            <parameter name="memberProperties">
              <type api="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IList`1" ref="true">
              <specialization>
                <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
          <apidata name="CreatePropertyFromConstructorParameter" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="matchingMemberProperty">
              <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
            </parameter>
            <parameter name="parameterInfo">
              <type api="T:System.Reflection.ParameterInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
          <apidata name="ResolveContractConverter" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.JsonConverter" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetDefaultCreator(System.Type)">
          <apidata name="GetDefaultCreator" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="createdType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Func`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)">
          <apidata name="InitializeContract" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="contract">
              <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract,System.Type)">
          <apidata name="ResolveCallbackMethods" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="contract">
              <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
            </parameter>
            <parameter name="t">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationErrorCallback}@)">
          <apidata name="GetCallbackMethodsForType" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
            <parameter name="onSerializing" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onSerialized" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onDeserializing" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onDeserialized" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onError" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationErrorCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)">
          <apidata name="GetClassHierarchyForType" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Type" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
          <apidata name="CreateDictionaryContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
          <apidata name="CreateArrayContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonArrayContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
          <apidata name="CreatePrimitiveContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
          <apidata name="CreateLinqContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonLinqContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
          <apidata name="CreateISerializableContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonISerializableContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
          <apidata name="CreateDynamicContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonDynamicContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
          <apidata name="CreateStringContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonStringContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
          <apidata name="CreateContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
          <apidata name="CreateMemberValueProvider" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.IValueProvider" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
          <apidata name="CreateProperty" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
            <parameter name="memberSerialization">
              <type api="T:Newtonsoft.Json.MemberSerialization" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty,System.Object,System.String,System.Type,Newtonsoft.Json.MemberSerialization,System.Boolean@)">
          <apidata name="SetPropertySettingsFromAttributes" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="property">
              <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
            </parameter>
            <parameter name="attributeProvider">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="name">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="declaringType">
              <type api="T:System.Type" ref="true" />
            </parameter>
            <parameter name="memberSerialization">
              <type api="T:Newtonsoft.Json.MemberSerialization" ref="false" />
            </parameter>
            <parameter name="allowNonPublicAccess" out="true">
              <referenceTo>
                <type api="T:System.Boolean" ref="false" />
              </referenceTo>
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)">
          <apidata name="CreateShouldSerializeTest" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Predicate`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.MemberInfo,System.Boolean)">
          <apidata name="SetIsSpecifiedActions" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="property">
              <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
            </parameter>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
            <parameter name="allowNonPublicAccess">
              <type api="T:System.Boolean" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
          <apidata name="ResolvePropertyName" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="propertyName">
              <type api="T:System.String" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
          <apidata name="ResolveDictionaryKey" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="dictionaryKey">
              <type api="T:System.String" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
          <apidata name="GetResolvedPropertyName" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="propertyName">
              <type api="T:System.String" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
          <apidata name="DynamicCodeGeneration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_DynamicCodeGeneration" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
          <apidata name="DefaultMembersSearchFlags" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_DefaultMembersSearchFlags" />
          <setter name="set_DefaultMembersSearchFlags" />
          <returns>
            <type api="T:System.Reflection.BindingFlags" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
          <apidata name="SerializeCompilerGeneratedMembers" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_SerializeCompilerGeneratedMembers" />
          <setter name="set_SerializeCompilerGeneratedMembers" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
          <apidata name="IgnoreSerializableInterface" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_IgnoreSerializableInterface" />
          <setter name="set_IgnoreSerializableInterface" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
          <apidata name="IgnoreSerializableAttribute" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_IgnoreSerializableAttribute" />
          <setter name="set_IgnoreSerializableAttribute" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.ContractResolver.#ctor">
          <element api="M:Symbiote.Core.ContractResolver.#ctor" />
          <element api="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},System.Boolean)" />
          <element api="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        </element>
        <element api="M:Symbiote.Core.ContractResolver.#cctor" />
        <element api="F:Symbiote.Core.ContractResolver.contractResolverType" />
        <element api="M:Symbiote.Core.ContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)" />
        <element api="F:Symbiote.Core.ContractResolver.includeSecondaryTypes" />
        <element api="F:Symbiote.Core.ContractResolver.logger" />
        <element api="F:Symbiote.Core.ContractResolver.manager" />
        <element api="F:Symbiote.Core.ContractResolver.propertyList" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.ContractResolver">
      <topicdata name="ContractResolver" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.ContractResolver" />
      <apidata name="ContractResolver" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetState">
          <apidata name="GetState" group="member" subgroup="method" />
          <memberdata visibility="assembly" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolverState" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
          <apidata name="ResolveContract" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
          </returns>
          <implements>
            <member api="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
              <type api="T:Newtonsoft.Json.Serialization.IContractResolver" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
          <apidata name="GetSerializableMembers" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Reflection.MemberInfo" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSerializeEntityMember(System.Reflection.MemberInfo)">
          <apidata name="ShouldSerializeEntityMember" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="memberInfo">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
          <apidata name="CreateObjectContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonObjectContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)">
          <apidata name="GetExtensionDataMemberForType" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Reflection.MemberInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)">
          <apidata name="GetAttributeConstructor" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Reflection.ConstructorInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)">
          <apidata name="GetParameterizedConstructor" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Reflection.ConstructorInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
          <apidata name="CreateConstructorParameters" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="constructor">
              <type api="T:System.Reflection.ConstructorInfo" ref="true" />
            </parameter>
            <parameter name="memberProperties">
              <type api="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IList`1" ref="true">
              <specialization>
                <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
          <apidata name="CreatePropertyFromConstructorParameter" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="matchingMemberProperty">
              <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
            </parameter>
            <parameter name="parameterInfo">
              <type api="T:System.Reflection.ParameterInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
          <apidata name="ResolveContractConverter" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.JsonConverter" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetDefaultCreator(System.Type)">
          <apidata name="GetDefaultCreator" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="createdType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Func`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)">
          <apidata name="InitializeContract" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="contract">
              <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract,System.Type)">
          <apidata name="ResolveCallbackMethods" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="contract">
              <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
            </parameter>
            <parameter name="t">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationCallback}@,System.Collections.Generic.List{Newtonsoft.Json.Serialization.SerializationErrorCallback}@)">
          <apidata name="GetCallbackMethodsForType" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
            <parameter name="onSerializing" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onSerialized" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onDeserializing" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onDeserialized" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
            <parameter name="onError" out="true">
              <referenceTo>
                <type api="T:System.Collections.Generic.List`1" ref="true">
                  <specialization>
                    <type api="T:Newtonsoft.Json.Serialization.SerializationErrorCallback" ref="true" />
                  </specialization>
                </type>
              </referenceTo>
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)">
          <apidata name="GetClassHierarchyForType" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="type">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Type" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
          <apidata name="CreateDictionaryContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
          <apidata name="CreateArrayContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonArrayContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
          <apidata name="CreatePrimitiveContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
          <apidata name="CreateLinqContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonLinqContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
          <apidata name="CreateISerializableContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonISerializableContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
          <apidata name="CreateDynamicContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonDynamicContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
          <apidata name="CreateStringContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonStringContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
          <apidata name="CreateContract" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="objectType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonContract" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
          <apidata name="CreateMemberValueProvider" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.IValueProvider" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
          <apidata name="CreateProperty" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
            <parameter name="memberSerialization">
              <type api="T:Newtonsoft.Json.MemberSerialization" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty,System.Object,System.String,System.Type,Newtonsoft.Json.MemberSerialization,System.Boolean@)">
          <apidata name="SetPropertySettingsFromAttributes" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="property">
              <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
            </parameter>
            <parameter name="attributeProvider">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="name">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="declaringType">
              <type api="T:System.Type" ref="true" />
            </parameter>
            <parameter name="memberSerialization">
              <type api="T:Newtonsoft.Json.MemberSerialization" ref="false" />
            </parameter>
            <parameter name="allowNonPublicAccess" out="true">
              <referenceTo>
                <type api="T:System.Boolean" ref="false" />
              </referenceTo>
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)">
          <apidata name="CreateShouldSerializeTest" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Predicate`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.MemberInfo,System.Boolean)">
          <apidata name="SetIsSpecifiedActions" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="property">
              <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
            </parameter>
            <parameter name="member">
              <type api="T:System.Reflection.MemberInfo" ref="true" />
            </parameter>
            <parameter name="allowNonPublicAccess">
              <type api="T:System.Boolean" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
          <apidata name="ResolvePropertyName" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="propertyName">
              <type api="T:System.String" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
          <apidata name="ResolveDictionaryKey" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="dictionaryKey">
              <type api="T:System.String" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
          <apidata name="GetResolvedPropertyName" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="propertyName">
              <type api="T:System.String" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.ContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.ContractResolver">
      <topicdata name="ContractResolver" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.ContractResolver" />
      <apidata name="ContractResolver" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
          <apidata name="DynamicCodeGeneration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_DynamicCodeGeneration" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
          <apidata name="DefaultMembersSearchFlags" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_DefaultMembersSearchFlags" />
          <setter name="set_DefaultMembersSearchFlags" />
          <returns>
            <type api="T:System.Reflection.BindingFlags" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
          <apidata name="SerializeCompilerGeneratedMembers" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_SerializeCompilerGeneratedMembers" />
          <setter name="set_SerializeCompilerGeneratedMembers" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
          <apidata name="IgnoreSerializableInterface" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_IgnoreSerializableInterface" />
          <setter name="set_IgnoreSerializableInterface" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
          <apidata name="IgnoreSerializableAttribute" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_IgnoreSerializableAttribute" />
          <setter name="set_IgnoreSerializableAttribute" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.ContractResolver">
      <topicdata name="ContractResolver" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.ContractResolver" />
      <apidata name="ContractResolver" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Newtonsoft.Json.Serialization.DefaultContractResolver._instanceState">
          <apidata name="_instanceState" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="true" serialized="true" />
          <returns>
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolverState" ref="true" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="F:Newtonsoft.Json.Serialization.DefaultContractResolver._sharedCache">
          <apidata name="_sharedCache" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="Newtonsoft.Json" module="Newtonsoft.Json" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Newtonsoft.Json.Serialization" />
            <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
          </containers>
        </element>
        <element api="F:Symbiote.Core.ContractResolver.contractResolverType" />
        <element api="F:Symbiote.Core.ContractResolver.includeSecondaryTypes" />
        <element api="F:Symbiote.Core.ContractResolver.logger" />
        <element api="F:Symbiote.Core.ContractResolver.manager" />
        <element api="F:Symbiote.Core.ContractResolver.propertyList" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.ContractResolver.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" allMembersTopicId="" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Symbiote.Core.ContractResolver.#ctor" />
        <element api="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},System.Boolean)" />
        <element api="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ContractResolver.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.ContractResolver.#ctor" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.ContractResolver.#ctor" />
      <parameters>
        <parameter name="propertyList">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="contractResolverType" optional="true">
          <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
            <type api="T:Symbiote.Core.ContractResolver" ref="true" />
          </type>
          <argument>
            <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
              <type api="T:Symbiote.Core.ContractResolver" ref="true" />
            </type>
            <enumValue>
              <field name="OptIn" />
            </enumValue>
          </argument>
        </parameter>
        <parameter name="includeSecondaryTypes" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.ContractResolver.#ctor" />
      <parameters>
        <parameter name="propertyList">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="includeSecondaryTypes">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ContractResolver.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.contractResolverType">
      <topicdata group="api" />
      <apidata name="contractResolverType" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
          <type api="T:Symbiote.Core.ContractResolver" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <topicdata group="api" />
      <apidata name="CreateProperties" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
          <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="memberSerialization">
          <type api="T:Newtonsoft.Json.MemberSerialization" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <type api="T:Newtonsoft.Json.Serialization.JsonProperty" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.includeSecondaryTypes">
      <topicdata group="api" />
      <apidata name="includeSecondaryTypes" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.propertyList">
      <topicdata group="api" />
      <apidata name="propertyList" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.ContractResolver.ContractResolverType">
      <topicdata group="api" />
      <apidata name="ContractResolverType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.ContractResolver.ContractResolverType.Undefined" />
        <element api="F:Symbiote.Core.ContractResolver.ContractResolverType.OptIn" />
        <element api="F:Symbiote.Core.ContractResolver.ContractResolverType.OptOut" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.ContractResolverType.OptIn">
      <topicdata group="api" notopic="" />
      <apidata name="OptIn" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
          <type api="T:Symbiote.Core.ContractResolver" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
          <type api="T:Symbiote.Core.ContractResolver" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.ContractResolverType.OptOut">
      <topicdata group="api" notopic="" />
      <apidata name="OptOut" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
          <type api="T:Symbiote.Core.ContractResolver" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
          <type api="T:Symbiote.Core.ContractResolver" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.ContractResolver.ContractResolverType.Undefined">
      <topicdata group="api" notopic="" />
      <apidata name="Undefined" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
          <type api="T:Symbiote.Core.ContractResolver" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
          <type api="T:Symbiote.Core.ContractResolver" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Symbiote.Core.FQNResolver">
      <topicdata group="api" />
      <apidata name="FQNResolver" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.FQNResolver.#ctor" />
        <element api="M:Symbiote.Core.FQNResolver.#cctor" />
        <element api="M:Symbiote.Core.FQNResolver.GetSource(System.String)" />
        <element api="F:Symbiote.Core.FQNResolver.manager" />
        <element api="M:Symbiote.Core.FQNResolver.Resolve(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.FQNResolver">
      <topicdata name="FQNResolver" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.FQNResolver" />
      <apidata name="FQNResolver" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.FQNResolver.GetSource(System.String)" />
        <element api="M:Symbiote.Core.FQNResolver.Resolve(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.FQNResolver">
      <topicdata name="FQNResolver" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.FQNResolver" />
      <apidata name="FQNResolver" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.FQNResolver.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.FQNResolver.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.FQNResolver.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.FQNResolver.GetSource(System.String)">
      <topicdata group="api" />
      <apidata name="GetSource" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lookupFQN">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.FQNResolver.ItemSource" ref="false">
          <type api="T:Symbiote.Core.FQNResolver" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.FQNResolver.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.FQNResolver.Resolve(System.String)">
      <topicdata group="api" />
      <apidata name="Resolve" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="lookupFQN">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.FQNResolver.ItemSource">
      <topicdata group="api" />
      <apidata name="ItemSource" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.FQNResolver.ItemSource.Unknown" />
        <element api="F:Symbiote.Core.FQNResolver.ItemSource.Plugin" />
        <element api="F:Symbiote.Core.FQNResolver.ItemSource.Model" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.FQNResolver.ItemSource.Model">
      <topicdata group="api" notopic="" />
      <apidata name="Model" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.FQNResolver.ItemSource" ref="false">
          <type api="T:Symbiote.Core.FQNResolver" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver.ItemSource" ref="false">
          <type api="T:Symbiote.Core.FQNResolver" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.FQNResolver.ItemSource.Plugin">
      <topicdata group="api" notopic="" />
      <apidata name="Plugin" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.FQNResolver.ItemSource" ref="false">
          <type api="T:Symbiote.Core.FQNResolver" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver.ItemSource" ref="false">
          <type api="T:Symbiote.Core.FQNResolver" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:Symbiote.Core.FQNResolver.ItemSource.Unknown">
      <topicdata group="api" notopic="" />
      <apidata name="Unknown" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.FQNResolver.ItemSource" ref="false">
          <type api="T:Symbiote.Core.FQNResolver" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.FQNResolver.ItemSource" ref="false">
          <type api="T:Symbiote.Core.FQNResolver" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Symbiote.Core.IManager">
      <topicdata group="api" />
      <apidata name="IManager" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </implementors>
      <elements>
        <element api="M:Symbiote.Core.IManager.Restart" />
        <element api="M:Symbiote.Core.IManager.Start" />
        <element api="P:Symbiote.Core.IManager.State" />
        <element api="M:Symbiote.Core.IManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.IManager">
      <topicdata name="IManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.IManager" />
      <apidata name="IManager" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.IManager.Restart" />
        <element api="M:Symbiote.Core.IManager.Start" />
        <element api="M:Symbiote.Core.IManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.IManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.IManager">
      <topicdata name="IManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.IManager" />
      <apidata name="IManager" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.IManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.IManager" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.IManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.IManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.IManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.IManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Item">
      <topicdata group="api" />
      <apidata name="Item" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:System.ICloneable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Item.#ctor">
          <element api="M:Symbiote.Core.Item.#ctor" />
          <element api="M:Symbiote.Core.Item.#ctor(System.String,System.Boolean)" />
          <element api="M:Symbiote.Core.Item.#ctor(System.String,System.String)" />
          <element api="M:Symbiote.Core.Item.#ctor(System.String,System.String,System.Boolean)" />
        </element>
        <element api="M:Symbiote.Core.Item.AddChild(Symbiote.Core.Item)" />
        <element api="E:Symbiote.Core.Item.Changed" />
        <element api="P:Symbiote.Core.Item.Children" />
        <element api="M:Symbiote.Core.Item.Clone" />
        <element api="P:Symbiote.Core.Item.FQN" />
        <element api="P:Symbiote.Core.Item.Guid" />
        <element api="M:Symbiote.Core.Item.HasChildren" />
        <element api="P:Symbiote.Core.Item.Name" />
        <element api="M:Symbiote.Core.Item.OnChange(System.Object)" />
        <element api="P:Symbiote.Core.Item.Parent" />
        <element api="P:Symbiote.Core.Item.Path" />
        <element api="M:Symbiote.Core.Item.Read" />
        <element api="M:Symbiote.Core.Item.ReadAsync" />
        <element api="M:Symbiote.Core.Item.ReadFromSource" />
        <element api="M:Symbiote.Core.Item.ReadFromSourceAsync" />
        <element api="M:Symbiote.Core.Item.RemoveChild(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Item.SetParent(Symbiote.Core.Item)" />
        <element api="P:Symbiote.Core.Item.SourceFQN" />
        <element api="P:Symbiote.Core.Item.SourceItem" />
        <element api="M:Symbiote.Core.Item.SourceItemChanged(Symbiote.Core.Item,Symbiote.Core.ItemEventArgs)" />
        <element api="M:Symbiote.Core.Item.SubscribeToSource" />
        <element api="Overload:Symbiote.Core.Item.ToJson">
          <element api="M:Symbiote.Core.Item.ToJson" />
          <element api="M:Symbiote.Core.Item.ToJson(Newtonsoft.Json.Serialization.DefaultContractResolver)" />
        </element>
        <element api="M:Symbiote.Core.Item.ToString" />
        <element api="M:Symbiote.Core.Item.UnsubscribeFromSource" />
        <element api="P:Symbiote.Core.Item.Value" />
        <element api="M:Symbiote.Core.Item.Write(System.Object)" />
        <element api="P:Symbiote.Core.Item.Writeable" />
        <element api="M:Symbiote.Core.Item.WriteAsync(System.Object)" />
        <element api="M:Symbiote.Core.Item.WriteToSource(System.Object)" />
        <element api="M:Symbiote.Core.Item.WriteToSourceAsync(System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Item">
      <topicdata name="Item" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Item" />
      <apidata name="Item" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Item.AddChild(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Item.Clone" />
        <element api="M:Symbiote.Core.Item.HasChildren" />
        <element api="M:Symbiote.Core.Item.OnChange(System.Object)" />
        <element api="M:Symbiote.Core.Item.Read" />
        <element api="M:Symbiote.Core.Item.ReadAsync" />
        <element api="M:Symbiote.Core.Item.ReadFromSource" />
        <element api="M:Symbiote.Core.Item.ReadFromSourceAsync" />
        <element api="M:Symbiote.Core.Item.RemoveChild(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Item.SetParent(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Item.SourceItemChanged(Symbiote.Core.Item,Symbiote.Core.ItemEventArgs)" />
        <element api="M:Symbiote.Core.Item.SubscribeToSource" />
        <element api="Overload:Symbiote.Core.Item.ToJson">
          <element api="M:Symbiote.Core.Item.ToJson" />
          <element api="M:Symbiote.Core.Item.ToJson(Newtonsoft.Json.Serialization.DefaultContractResolver)" />
        </element>
        <element api="M:Symbiote.Core.Item.ToString" />
        <element api="M:Symbiote.Core.Item.UnsubscribeFromSource" />
        <element api="M:Symbiote.Core.Item.Write(System.Object)" />
        <element api="M:Symbiote.Core.Item.WriteAsync(System.Object)" />
        <element api="M:Symbiote.Core.Item.WriteToSource(System.Object)" />
        <element api="M:Symbiote.Core.Item.WriteToSourceAsync(System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Item">
      <topicdata name="Item" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Item" />
      <apidata name="Item" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Item.Children" />
        <element api="P:Symbiote.Core.Item.FQN" />
        <element api="P:Symbiote.Core.Item.Guid" />
        <element api="P:Symbiote.Core.Item.Name" />
        <element api="P:Symbiote.Core.Item.Parent" />
        <element api="P:Symbiote.Core.Item.Path" />
        <element api="P:Symbiote.Core.Item.SourceFQN" />
        <element api="P:Symbiote.Core.Item.SourceItem" />
        <element api="P:Symbiote.Core.Item.Value" />
        <element api="P:Symbiote.Core.Item.Writeable" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" />
      </containers>
    </api>
    <api id="Events.T:Symbiote.Core.Item">
      <topicdata name="Item" group="list" subgroup="Events" typeTopicId="T:Symbiote.Core.Item" />
      <apidata name="Item" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:Symbiote.Core.Item.Changed" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Item.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" allMembersTopicId="" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Symbiote.Core.Item.#ctor" />
        <element api="M:Symbiote.Core.Item.#ctor(System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Item.#ctor(System.String,System.String)" />
        <element api="M:Symbiote.Core.Item.#ctor(System.String,System.String,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Item.ToJson">
      <topicdata name="ToJson" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ToJson" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Item.ToJson" />
        <element api="M:Symbiote.Core.Item.ToJson(Newtonsoft.Json.Serialization.DefaultContractResolver)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Item.#ctor" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.#ctor(System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Item.#ctor" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="isRoot">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.#ctor(System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Item.#ctor" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceFQN">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.#ctor(System.String,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Item.#ctor" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceFQN" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="isRoot" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.AddChild(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="AddChild" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="E:Symbiote.Core.Item.Changed">
      <topicdata group="api" />
      <apidata name="Changed" group="member" subgroup="event" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_Changed" />
      <remover name="remove_Changed" />
      <eventhandler>
        <type api="T:Symbiote.Core.Item.EventHandler`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.ItemEventArgs" ref="true" />
          </specialization>
          <type api="T:Symbiote.Core.Item" ref="true" />
        </type>
      </eventhandler>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.Children">
      <topicdata group="api" />
      <apidata name="Children" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Children" />
      <setter name="set_Children" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ICloneable.Clone">
          <type api="T:System.ICloneable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.FQN">
      <topicdata group="api" />
      <apidata name="FQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_FQN" />
      <setter name="set_FQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.Guid">
      <topicdata group="api" />
      <apidata name="Guid" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Guid" />
      <setter name="set_Guid" />
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.HasChildren">
      <topicdata group="api" />
      <apidata name="HasChildren" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.OnChange(System.Object)">
      <topicdata group="api" />
      <apidata name="OnChange" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.Parent">
      <topicdata group="api" />
      <apidata name="Parent" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Parent" />
      <setter name="set_Parent" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.Path">
      <topicdata group="api" />
      <apidata name="Path" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Path" />
      <setter name="set_Path" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.Read">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.ReadAsync">
      <topicdata group="api" />
      <apidata name="ReadAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.ReadFromSource">
      <topicdata group="api" />
      <apidata name="ReadFromSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.ReadFromSourceAsync">
      <topicdata group="api" />
      <apidata name="ReadFromSourceAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.RemoveChild(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="RemoveChild" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.SetParent(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="SetParent" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parent">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.SourceFQN">
      <topicdata group="api" />
      <apidata name="SourceFQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SourceFQN" />
      <setter name="set_SourceFQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.SourceItem">
      <topicdata group="api" />
      <apidata name="SourceItem" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SourceItem" />
      <setter name="set_SourceItem" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.SourceItemChanged(Symbiote.Core.Item,Symbiote.Core.ItemEventArgs)">
      <topicdata group="api" />
      <apidata name="SourceItemChanged" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:Symbiote.Core.ItemEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.SubscribeToSource">
      <topicdata group="api" />
      <apidata name="SubscribeToSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.ToJson">
      <topicdata group="api" />
      <apidata name="ToJson" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Item.ToJson" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.ToJson(Newtonsoft.Json.Serialization.DefaultContractResolver)">
      <topicdata group="api" />
      <apidata name="ToJson" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Item.ToJson" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="contractResolver">
          <type api="T:Newtonsoft.Json.Serialization.DefaultContractResolver" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.UnsubscribeFromSource">
      <topicdata group="api" />
      <apidata name="UnsubscribeFromSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.Write(System.Object)">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Item.Writeable">
      <topicdata group="api" />
      <apidata name="Writeable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Writeable" />
      <setter name="set_Writeable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.WriteAsync(System.Object)">
      <topicdata group="api" />
      <apidata name="WriteAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Result" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.WriteToSource(System.Object)">
      <topicdata group="api" />
      <apidata name="WriteToSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Item.WriteToSourceAsync(System.Object)">
      <topicdata group="api" />
      <apidata name="WriteToSourceAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Result" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Item.EventHandler`1">
      <topicdata group="api" />
      <apidata name="EventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="ItemEventArgs" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="e">
          <template name="ItemEventArgs" index="0" api="T:Symbiote.Core.Item.EventHandler`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Item" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.ItemEventArgs">
      <topicdata group="api" />
      <apidata name="ItemEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.ItemEventArgs.#ctor(System.Object)" />
        <element api="P:Symbiote.Core.ItemEventArgs.Value" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.ItemEventArgs">
      <topicdata name="ItemEventArgs" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.ItemEventArgs" />
      <apidata name="ItemEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ItemEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.ItemEventArgs">
      <topicdata name="ItemEventArgs" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.ItemEventArgs" />
      <apidata name="ItemEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.ItemEventArgs.Value" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ItemEventArgs" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ItemEventArgs.#ctor(System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ItemEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ItemEventArgs.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ItemEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.ManagerState">
      <topicdata group="api" />
      <apidata name="ManagerState" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.ManagerState.Unknown" />
        <element api="F:Symbiote.Core.ManagerState.Starting" />
        <element api="F:Symbiote.Core.ManagerState.Running" />
        <element api="F:Symbiote.Core.ManagerState.Stopping" />
        <element api="F:Symbiote.Core.ManagerState.Stopped" />
        <element api="F:Symbiote.Core.ManagerState.Faulted" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ManagerState.Faulted">
      <topicdata group="api" notopic="" />
      <apidata name="Faulted" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <value>5</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ManagerState.Running">
      <topicdata group="api" notopic="" />
      <apidata name="Running" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ManagerState.Starting">
      <topicdata group="api" notopic="" />
      <apidata name="Starting" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ManagerState.Stopped">
      <topicdata group="api" notopic="" />
      <apidata name="Stopped" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ManagerState.Stopping">
      <topicdata group="api" notopic="" />
      <apidata name="Stopping" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ManagerState.Unknown">
      <topicdata group="api" notopic="" />
      <apidata name="Unknown" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Message">
      <topicdata group="api" />
      <apidata name="Message" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Message.#ctor(Symbiote.Core.MessageType,System.String)" />
        <element api="P:Symbiote.Core.Message.Text" />
        <element api="M:Symbiote.Core.Message.ToString" />
        <element api="P:Symbiote.Core.Message.Type" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Message">
      <topicdata name="Message" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Message" />
      <apidata name="Message" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Message.ToString" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Message" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Message">
      <topicdata name="Message" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Message" />
      <apidata name="Message" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Message.Text" />
        <element api="P:Symbiote.Core.Message.Type" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Message" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Message.#ctor(Symbiote.Core.MessageType,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="type" optional="true">
          <type api="T:Symbiote.Core.MessageType" ref="false" />
          <argument>
            <type api="T:Symbiote.Core.MessageType" ref="false" />
            <enumValue>
              <field name="Info" />
            </enumValue>
          </argument>
        </parameter>
        <parameter name="text" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Message" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Message.Text">
      <topicdata group="api" />
      <apidata name="Text" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Text" />
      <setter name="set_Text" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Message" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Message.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Message" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Message.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Type" />
      <setter name="set_Type" />
      <returns>
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Message" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.MessageType">
      <topicdata group="api" />
      <apidata name="MessageType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.MessageType.Any" />
        <element api="F:Symbiote.Core.MessageType.Info" />
        <element api="F:Symbiote.Core.MessageType.Warning" />
        <element api="F:Symbiote.Core.MessageType.Error" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.MessageType.Any">
      <topicdata group="api" notopic="" />
      <apidata name="Any" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.MessageType.Error">
      <topicdata group="api" notopic="" />
      <apidata name="Error" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.MessageType.Info">
      <topicdata group="api" notopic="" />
      <apidata name="Info" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.MessageType.Warning">
      <topicdata group="api" notopic="" />
      <apidata name="Warning" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.MessageType" ref="false" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Program">
      <topicdata group="api" />
      <apidata name="Program" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Program.#ctor" />
        <element api="M:Symbiote.Core.Program.#cctor" />
        <element api="F:Symbiote.Core.Program.logger" />
        <element api="M:Symbiote.Core.Program.Main(System.String[])" />
        <element api="F:Symbiote.Core.Program.manager" />
        <element api="M:Symbiote.Core.Program.Start(System.String[])" />
        <element api="M:Symbiote.Core.Program.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Program">
      <topicdata name="Program" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Program" />
      <apidata name="Program" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Program.Main(System.String[])" />
        <element api="M:Symbiote.Core.Program.Start(System.String[])" />
        <element api="M:Symbiote.Core.Program.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Program">
      <topicdata name="Program" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Program" />
      <apidata name="Program" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Program.logger" />
        <element api="F:Symbiote.Core.Program.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Program.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Program.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Program.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Program.Main(System.String[])">
      <topicdata group="api" />
      <apidata name="Main" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Program.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Program.Start(System.String[])">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Program.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Program" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.ProgramManager">
      <topicdata group="api" />
      <apidata name="ProgramManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.ProgramManager.#ctor(System.Boolean)" />
        <element api="M:Symbiote.Core.ProgramManager.#cctor" />
        <element api="P:Symbiote.Core.ProgramManager.Configuration" />
        <element api="P:Symbiote.Core.ProgramManager.ConfigurationFileName" />
        <element api="P:Symbiote.Core.ProgramManager.ConfigurationManager" />
        <element api="P:Symbiote.Core.ProgramManager.Directories" />
        <element api="M:Symbiote.Core.ProgramManager.GetInstanceName" />
        <element api="F:Symbiote.Core.ProgramManager.instance" />
        <element api="M:Symbiote.Core.ProgramManager.Instance(System.Boolean)" />
        <element api="P:Symbiote.Core.ProgramManager.InstanceName" />
        <element api="F:Symbiote.Core.ProgramManager.logger" />
        <element api="P:Symbiote.Core.ProgramManager.ModelManager" />
        <element api="P:Symbiote.Core.ProgramManager.Platform" />
        <element api="P:Symbiote.Core.ProgramManager.PlatformManager" />
        <element api="P:Symbiote.Core.ProgramManager.PluginManager" />
        <element api="P:Symbiote.Core.ProgramManager.ProductName" />
        <element api="P:Symbiote.Core.ProgramManager.ProductVersion" />
        <element api="P:Symbiote.Core.ProgramManager.RegisteredTypes" />
        <element api="M:Symbiote.Core.ProgramManager.Restart" />
        <element api="P:Symbiote.Core.ProgramManager.SafeMode" />
        <element api="P:Symbiote.Core.ProgramManager.ServiceManager" />
        <element api="M:Symbiote.Core.ProgramManager.Start" />
        <element api="M:Symbiote.Core.ProgramManager.StartManager(Symbiote.Core.IManager)" />
        <element api="P:Symbiote.Core.ProgramManager.State" />
        <element api="M:Symbiote.Core.ProgramManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.ProgramManager">
      <topicdata name="ProgramManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.ProgramManager" />
      <apidata name="ProgramManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.ProgramManager.GetInstanceName" />
        <element api="M:Symbiote.Core.ProgramManager.Instance(System.Boolean)" />
        <element api="M:Symbiote.Core.ProgramManager.Restart" />
        <element api="M:Symbiote.Core.ProgramManager.Start" />
        <element api="M:Symbiote.Core.ProgramManager.StartManager(Symbiote.Core.IManager)" />
        <element api="M:Symbiote.Core.ProgramManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.ProgramManager">
      <topicdata name="ProgramManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.ProgramManager" />
      <apidata name="ProgramManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.ProgramManager.Configuration" />
        <element api="P:Symbiote.Core.ProgramManager.ConfigurationFileName" />
        <element api="P:Symbiote.Core.ProgramManager.ConfigurationManager" />
        <element api="P:Symbiote.Core.ProgramManager.Directories" />
        <element api="P:Symbiote.Core.ProgramManager.InstanceName" />
        <element api="P:Symbiote.Core.ProgramManager.ModelManager" />
        <element api="P:Symbiote.Core.ProgramManager.Platform" />
        <element api="P:Symbiote.Core.ProgramManager.PlatformManager" />
        <element api="P:Symbiote.Core.ProgramManager.PluginManager" />
        <element api="P:Symbiote.Core.ProgramManager.ProductName" />
        <element api="P:Symbiote.Core.ProgramManager.ProductVersion" />
        <element api="P:Symbiote.Core.ProgramManager.RegisteredTypes" />
        <element api="P:Symbiote.Core.ProgramManager.SafeMode" />
        <element api="P:Symbiote.Core.ProgramManager.ServiceManager" />
        <element api="P:Symbiote.Core.ProgramManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.ProgramManager">
      <topicdata name="ProgramManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.ProgramManager" />
      <apidata name="ProgramManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.ProgramManager.instance" />
        <element api="F:Symbiote.Core.ProgramManager.logger" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.#ctor(System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="safeMode" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Configuration" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.Type" ref="true" />
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.ConfigurationFileName">
      <topicdata group="api" />
      <apidata name="ConfigurationFileName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ConfigurationFileName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.ConfigurationManager">
      <topicdata group="api" />
      <apidata name="ConfigurationManager" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ConfigurationManager" />
      <setter name="set_ConfigurationManager" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.Directories">
      <topicdata group="api" />
      <apidata name="Directories" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Directories" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.GetInstanceName">
      <topicdata group="api" />
      <apidata name="GetInstanceName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ProgramManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.Instance(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="safeMode" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.InstanceName">
      <topicdata group="api" />
      <apidata name="InstanceName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InstanceName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ProgramManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.ModelManager">
      <topicdata group="api" />
      <apidata name="ModelManager" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ModelManager" />
      <setter name="set_ModelManager" />
      <returns>
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.Platform">
      <topicdata group="api" />
      <apidata name="Platform" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Platform" />
      <returns>
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.PlatformManager">
      <topicdata group="api" />
      <apidata name="PlatformManager" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PlatformManager" />
      <setter name="set_PlatformManager" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.PluginManager">
      <topicdata group="api" />
      <apidata name="PluginManager" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginManager" />
      <setter name="set_PluginManager" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.ProductName">
      <topicdata group="api" />
      <apidata name="ProductName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ProductName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.ProductVersion">
      <topicdata group="api" />
      <apidata name="ProductVersion" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ProductVersion" />
      <returns>
        <type api="T:System.Version" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.RegisteredTypes">
      <topicdata group="api" />
      <apidata name="RegisteredTypes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RegisteredTypes" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.Type" ref="true" />
            <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.SafeMode">
      <topicdata group="api" />
      <apidata name="SafeMode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_SafeMode" />
      <setter name="set_SafeMode" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.ServiceManager">
      <topicdata group="api" />
      <apidata name="ServiceManager" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ServiceManager" />
      <setter name="set_ServiceManager" />
      <returns>
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.StartManager(Symbiote.Core.IManager)">
      <topicdata group="api" />
      <apidata name="StartManager" group="member" subgroup="method" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.IManager" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.ProgramManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProgramManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.ProjectInstaller">
      <topicdata group="api" />
      <apidata name="ProjectInstaller" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Configuration.Install.Installer" ref="true" />
          <type api="T:System.ComponentModel.Component" ref="true" />
          <type api="T:System.MarshalByRefObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="Overload:Symbiote.Core.ProjectInstaller.Dispose">
          <element api="M:System.ComponentModel.Component.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.ComponentModel" />
              <type api="T:System.ComponentModel.Component" ref="true" />
            </containers>
          </element>
          <element api="M:Symbiote.Core.ProjectInstaller.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)">
          <apidata name="Commit" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.Install(System.Collections.IDictionary)">
          <apidata name="Install" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="stateSaver">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)">
          <apidata name="OnCommitted" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)">
          <apidata name="OnAfterInstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)">
          <apidata name="OnAfterRollback" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)">
          <apidata name="OnAfterUninstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)">
          <apidata name="OnCommitting" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)">
          <apidata name="OnBeforeInstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)">
          <apidata name="OnBeforeRollback" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)">
          <apidata name="OnBeforeUninstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)">
          <apidata name="Rollback" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)">
          <apidata name="Uninstall" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="P:System.Configuration.Install.Installer.Context">
          <apidata name="Context" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Context" />
          <setter name="set_Context" />
          <returns>
            <type api="T:System.Configuration.Install.InstallContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.Configuration.Install.Installer.HelpText">
          <apidata name="HelpText" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_HelpText" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Configuration.Install.ResDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Desc_Installer_HelpText</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.Configuration.Install.Installer.Installers">
          <apidata name="Installers" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Installers" />
          <returns>
            <type api="T:System.Configuration.Install.InstallerCollection" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Content" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.Configuration.Install.Installer.Parent">
          <apidata name="Parent" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Parent" />
          <setter name="set_Parent" />
          <returns>
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>True</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
              <argument>
                <type api="T:System.Type" ref="true" />
                <typeValue>
                  <type api="T:System.Configuration.Install.InstallerParentConverter" ref="true" />
                </typeValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.Configuration.Install.ResDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Desc_Installer_Parent</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="E:System.Configuration.Install.Installer.Committed">
          <apidata name="Committed" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_Committed" />
          <remover name="remove_Committed" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.AfterInstall">
          <apidata name="AfterInstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_AfterInstall" />
          <remover name="remove_AfterInstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.AfterRollback">
          <apidata name="AfterRollback" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_AfterRollback" />
          <remover name="remove_AfterRollback" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.AfterUninstall">
          <apidata name="AfterUninstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_AfterUninstall" />
          <remover name="remove_AfterUninstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.Committing">
          <apidata name="Committing" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_Committing" />
          <remover name="remove_Committing" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.BeforeInstall">
          <apidata name="BeforeInstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_BeforeInstall" />
          <remover name="remove_BeforeInstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.BeforeRollback">
          <apidata name="BeforeRollback" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_BeforeRollback" />
          <remover name="remove_BeforeRollback" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.BeforeUninstall">
          <apidata name="BeforeUninstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_BeforeUninstall" />
          <remover name="remove_BeforeUninstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Finalize">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.GetService(System.Type)">
          <apidata name="GetService" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="service">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.ToString">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.CanRaiseEvents">
          <apidata name="CanRaiseEvents" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_CanRaiseEvents" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Events">
          <apidata name="Events" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Events" />
          <returns>
            <type api="T:System.ComponentModel.EventHandlerList" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Site">
          <apidata name="Site" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Site" />
          <setter name="set_Site" />
          <returns>
            <type api="T:System.ComponentModel.ISite" ref="true" />
          </returns>
          <implements>
            <member api="P:System.ComponentModel.IComponent.Site">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.Container">
          <apidata name="Container" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Container" />
          <returns>
            <type api="T:System.ComponentModel.IContainer" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.DesignMode">
          <apidata name="DesignMode" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_DesignMode" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="E:System.ComponentModel.Component.Disposed">
          <apidata name="Disposed" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <eventdata add="true" remove="true" />
          <adder name="add_Disposed" />
          <remover name="remove_Disposed" />
          <eventhandler>
            <type api="T:System.EventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.EventArgs" ref="true" />
          </eventargs>
          <implements>
            <member api="E:System.ComponentModel.IComponent.Disposed">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Advanced" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.ProjectInstaller.MemberwiseClone">
          <element api="M:System.Object.MemberwiseClone">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <returns>
              <type api="T:System.Object" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.Object" ref="true" />
            </containers>
          </element>
          <element api="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="cloneIdentity">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.MarshalByRefObject" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.MarshalByRefObject" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.MarshalByRefObject.GetLifetimeService">
          <apidata name="GetLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.InitializeLifetimeService">
          <apidata name="InitializeLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <apidata name="CreateObjRef" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="requestedType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Runtime.Remoting.ObjRef" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.ProjectInstaller.#ctor" />
        <element api="F:Symbiote.Core.ProjectInstaller.components" />
        <element api="M:Symbiote.Core.ProjectInstaller.InitializeComponent" />
        <element api="F:Symbiote.Core.ProjectInstaller.serviceInstaller" />
        <element api="F:Symbiote.Core.ProjectInstaller.serviceProcessInstaller" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.ProjectInstaller">
      <topicdata name="ProjectInstaller" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.ProjectInstaller" />
      <apidata name="ProjectInstaller" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="Overload:Symbiote.Core.ProjectInstaller.Dispose">
          <element api="M:System.ComponentModel.Component.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.ComponentModel" />
              <type api="T:System.ComponentModel.Component" ref="true" />
            </containers>
          </element>
          <element api="M:Symbiote.Core.ProjectInstaller.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)">
          <apidata name="Commit" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.Install(System.Collections.IDictionary)">
          <apidata name="Install" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="stateSaver">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)">
          <apidata name="OnCommitted" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)">
          <apidata name="OnAfterInstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)">
          <apidata name="OnAfterRollback" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)">
          <apidata name="OnAfterUninstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)">
          <apidata name="OnCommitting" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)">
          <apidata name="OnBeforeInstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)">
          <apidata name="OnBeforeRollback" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)">
          <apidata name="OnBeforeUninstall" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.Rollback(System.Collections.IDictionary)">
          <apidata name="Rollback" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)">
          <apidata name="Uninstall" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="savedState">
              <type api="T:System.Collections.IDictionary" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Finalize">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.GetService(System.Type)">
          <apidata name="GetService" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="service">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.ToString">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.ProjectInstaller.MemberwiseClone">
          <element api="M:System.Object.MemberwiseClone">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <returns>
              <type api="T:System.Object" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.Object" ref="true" />
            </containers>
          </element>
          <element api="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="cloneIdentity">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.MarshalByRefObject" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.MarshalByRefObject" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.MarshalByRefObject.GetLifetimeService">
          <apidata name="GetLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.InitializeLifetimeService">
          <apidata name="InitializeLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <apidata name="CreateObjRef" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="requestedType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Runtime.Remoting.ObjRef" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.ProjectInstaller.InitializeComponent" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.ProjectInstaller">
      <topicdata name="ProjectInstaller" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.ProjectInstaller" />
      <apidata name="ProjectInstaller" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Configuration.Install.Installer.Context">
          <apidata name="Context" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Context" />
          <setter name="set_Context" />
          <returns>
            <type api="T:System.Configuration.Install.InstallContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.Configuration.Install.Installer.HelpText">
          <apidata name="HelpText" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_HelpText" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Configuration.Install.ResDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Desc_Installer_HelpText</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.Configuration.Install.Installer.Installers">
          <apidata name="Installers" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Installers" />
          <returns>
            <type api="T:System.Configuration.Install.InstallerCollection" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Content" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.Configuration.Install.Installer.Parent">
          <apidata name="Parent" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Parent" />
          <setter name="set_Parent" />
          <returns>
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>True</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
              <argument>
                <type api="T:System.Type" ref="true" />
                <typeValue>
                  <type api="T:System.Configuration.Install.InstallerParentConverter" ref="true" />
                </typeValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.Configuration.Install.ResDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Desc_Installer_Parent</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.CanRaiseEvents">
          <apidata name="CanRaiseEvents" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_CanRaiseEvents" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Events">
          <apidata name="Events" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Events" />
          <returns>
            <type api="T:System.ComponentModel.EventHandlerList" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Site">
          <apidata name="Site" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Site" />
          <setter name="set_Site" />
          <returns>
            <type api="T:System.ComponentModel.ISite" ref="true" />
          </returns>
          <implements>
            <member api="P:System.ComponentModel.IComponent.Site">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.Container">
          <apidata name="Container" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Container" />
          <returns>
            <type api="T:System.ComponentModel.IContainer" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.DesignMode">
          <apidata name="DesignMode" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_DesignMode" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" />
      </containers>
    </api>
    <api id="Events.T:Symbiote.Core.ProjectInstaller">
      <topicdata name="ProjectInstaller" group="list" subgroup="Events" typeTopicId="T:Symbiote.Core.ProjectInstaller" />
      <apidata name="ProjectInstaller" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.Configuration.Install.Installer.Committed">
          <apidata name="Committed" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_Committed" />
          <remover name="remove_Committed" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.AfterInstall">
          <apidata name="AfterInstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_AfterInstall" />
          <remover name="remove_AfterInstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.AfterRollback">
          <apidata name="AfterRollback" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_AfterRollback" />
          <remover name="remove_AfterRollback" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.AfterUninstall">
          <apidata name="AfterUninstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_AfterUninstall" />
          <remover name="remove_AfterUninstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.Committing">
          <apidata name="Committing" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_Committing" />
          <remover name="remove_Committing" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.BeforeInstall">
          <apidata name="BeforeInstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_BeforeInstall" />
          <remover name="remove_BeforeInstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.BeforeRollback">
          <apidata name="BeforeRollback" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_BeforeRollback" />
          <remover name="remove_BeforeRollback" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.Configuration.Install.Installer.BeforeUninstall">
          <apidata name="BeforeUninstall" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_BeforeUninstall" />
          <remover name="remove_BeforeUninstall" />
          <eventhandler>
            <type api="T:System.Configuration.Install.InstallEventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.Configuration.Install.InstallEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="System.Configuration.Install" module="System.Configuration.Install" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Configuration.Install" />
            <type api="T:System.Configuration.Install.Installer" ref="true" />
          </containers>
        </element>
        <element api="E:System.ComponentModel.Component.Disposed">
          <apidata name="Disposed" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <eventdata add="true" remove="true" />
          <adder name="add_Disposed" />
          <remover name="remove_Disposed" />
          <eventhandler>
            <type api="T:System.EventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.EventArgs" ref="true" />
          </eventargs>
          <implements>
            <member api="E:System.ComponentModel.IComponent.Disposed">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Advanced" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.ProjectInstaller">
      <topicdata name="ProjectInstaller" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.ProjectInstaller" />
      <apidata name="ProjectInstaller" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.ProjectInstaller.components" />
        <element api="F:Symbiote.Core.ProjectInstaller.serviceInstaller" />
        <element api="F:Symbiote.Core.ProjectInstaller.serviceProcessInstaller" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.ProjectInstaller.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Component.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <implements>
            <member api="M:System.IDisposable.Dispose">
              <type api="T:System.IDisposable" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.ProjectInstaller.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProjectInstaller.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ProjectInstaller.components">
      <topicdata group="api" />
      <apidata name="components" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.IContainer" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProjectInstaller.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:Symbiote.Core.ProjectInstaller.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ComponentModel.Component.Dispose(System.Boolean)">
          <type api="T:System.ComponentModel.Component" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.ProjectInstaller.InitializeComponent">
      <topicdata group="api" />
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ProjectInstaller.serviceInstaller">
      <topicdata group="api" />
      <apidata name="serviceInstaller" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceProcess.ServiceInstaller" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ProjectInstaller.serviceProcessInstaller">
      <topicdata group="api" />
      <apidata name="serviceProcessInstaller" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ServiceProcess.ServiceProcessInstaller" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ProjectInstaller" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.RealtimeLogger">
      <topicdata group="api" />
      <apidata name="RealtimeLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.RealtimeLogger.#ctor" />
        <element api="M:Symbiote.Core.RealtimeLogger.#cctor" />
        <element api="M:Symbiote.Core.RealtimeLogger.AppendLog(System.String,System.String,System.String,System.String)" />
        <element api="M:Symbiote.Core.RealtimeLogger.AppendLogHistory(Symbiote.Core.RealtimeLoggerEventArgs)" />
        <element api="M:Symbiote.Core.RealtimeLogger.Initialize" />
        <element api="F:Symbiote.Core.RealtimeLogger.initialized" />
        <element api="E:Symbiote.Core.RealtimeLogger.LogArrived" />
        <element api="P:Symbiote.Core.RealtimeLogger.LogHistory" />
        <element api="F:Symbiote.Core.RealtimeLogger.logHistoryLimit" />
        <element api="P:Symbiote.Core.RealtimeLogger.LogHistoryLimit" />
        <element api="M:Symbiote.Core.RealtimeLogger.PruneLogHistory" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.RealtimeLogger">
      <topicdata name="RealtimeLogger" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.RealtimeLogger" />
      <apidata name="RealtimeLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.RealtimeLogger.AppendLog(System.String,System.String,System.String,System.String)" />
        <element api="M:Symbiote.Core.RealtimeLogger.AppendLogHistory(Symbiote.Core.RealtimeLoggerEventArgs)" />
        <element api="M:Symbiote.Core.RealtimeLogger.Initialize" />
        <element api="M:Symbiote.Core.RealtimeLogger.PruneLogHistory" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.RealtimeLogger">
      <topicdata name="RealtimeLogger" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.RealtimeLogger" />
      <apidata name="RealtimeLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.RealtimeLogger.LogHistory" />
        <element api="P:Symbiote.Core.RealtimeLogger.LogHistoryLimit" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" />
      </containers>
    </api>
    <api id="Events.T:Symbiote.Core.RealtimeLogger">
      <topicdata name="RealtimeLogger" group="list" subgroup="Events" typeTopicId="T:Symbiote.Core.RealtimeLogger" />
      <apidata name="RealtimeLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:Symbiote.Core.RealtimeLogger.LogArrived" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.RealtimeLogger">
      <topicdata name="RealtimeLogger" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.RealtimeLogger" />
      <apidata name="RealtimeLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.RealtimeLogger.initialized" />
        <element api="F:Symbiote.Core.RealtimeLogger.logHistoryLimit" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.RealtimeLogger.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.RealtimeLogger.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.RealtimeLogger.AppendLog(System.String,System.String,System.String,System.String)">
      <topicdata group="api" />
      <apidata name="AppendLog" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dateTime">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="logger">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.RealtimeLogger.AppendLogHistory(Symbiote.Core.RealtimeLoggerEventArgs)">
      <topicdata group="api" />
      <apidata name="AppendLogHistory" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="eventArgs">
          <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.RealtimeLogger.Initialize">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.RealtimeLogger.initialized">
      <topicdata group="api" />
      <apidata name="initialized" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="E:Symbiote.Core.RealtimeLogger.LogArrived">
      <topicdata group="api" />
      <apidata name="LogArrived" group="member" subgroup="event" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <eventdata add="true" remove="true" />
      <adder name="add_LogArrived" />
      <remover name="remove_LogArrived" />
      <eventhandler>
        <type api="T:Symbiote.Core.RealtimeLogger.EventHandler`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
          </specialization>
          <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
        </type>
      </eventhandler>
      <eventargs>
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
      </eventargs>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.RealtimeLogger.LogHistory">
      <topicdata group="api" />
      <apidata name="LogHistory" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_LogHistory" />
      <setter name="set_LogHistory" />
      <returns>
        <type api="T:System.Collections.Generic.Queue`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.RealtimeLogger.logHistoryLimit">
      <topicdata group="api" />
      <apidata name="logHistoryLimit" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>200</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.RealtimeLogger.LogHistoryLimit">
      <topicdata group="api" />
      <apidata name="LogHistoryLimit" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_LogHistoryLimit" />
      <setter name="set_LogHistoryLimit" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.RealtimeLogger.PruneLogHistory">
      <topicdata group="api" />
      <apidata name="PruneLogHistory" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.RealtimeLogger.EventHandler`1">
      <topicdata group="api" />
      <apidata name="EventHandler" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="RealtimeLoggerEventArgs" />
      </templates>
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <template name="RealtimeLoggerEventArgs" index="0" api="T:Symbiote.Core.RealtimeLogger.EventHandler`1" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLogger" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.RealtimeLoggerEventArgs">
      <topicdata group="api" />
      <apidata name="RealtimeLoggerEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.EventArgs" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.RealtimeLoggerEventArgs.#ctor(System.String,System.String,System.String,System.String)" />
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.DateTime" />
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.Level" />
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.Logger" />
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.Message" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.RealtimeLoggerEventArgs">
      <topicdata name="RealtimeLoggerEventArgs" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.RealtimeLoggerEventArgs" />
      <apidata name="RealtimeLoggerEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.RealtimeLoggerEventArgs">
      <topicdata name="RealtimeLoggerEventArgs" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.RealtimeLoggerEventArgs" />
      <apidata name="RealtimeLoggerEventArgs" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.DateTime" />
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.Level" />
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.Logger" />
        <element api="P:Symbiote.Core.RealtimeLoggerEventArgs.Message" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.RealtimeLoggerEventArgs.#ctor(System.String,System.String,System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="dateTime">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="level">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="logger">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.RealtimeLoggerEventArgs.DateTime">
      <topicdata group="api" />
      <apidata name="DateTime" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_DateTime" />
      <setter name="set_DateTime" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.RealtimeLoggerEventArgs.Level">
      <topicdata group="api" />
      <apidata name="Level" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Level" />
      <setter name="set_Level" />
      <returns>
        <type api="T:NLog.LogLevel" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.RealtimeLoggerEventArgs.Logger">
      <topicdata group="api" />
      <apidata name="Logger" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Logger" />
      <setter name="set_Logger" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.RealtimeLoggerEventArgs.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.RealtimeLoggerEventArgs" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Result">
      <topicdata group="api" />
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Symbiote.Core.Result`1" ref="true" />
          <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" ref="true" />
          <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Result.#ctor(Symbiote.Core.ResultCode)" />
        <element api="M:Symbiote.Core.Result.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)" />
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Result.LogAllMessages">
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Result.LogResult">
          <element api="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="M:Symbiote.Core.Result.op_Implicit(Symbiote.Core.Result)~System.Boolean" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Result">
      <topicdata name="Result" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Result" />
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Result.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)" />
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Result.LogAllMessages">
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Result.LogResult">
          <element api="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" />
      </containers>
    </api>
    <api id="Operators.T:Symbiote.Core.Result">
      <topicdata name="Result" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Symbiote.Core.Result" />
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Result.op_Implicit(Symbiote.Core.Result)~System.Boolean" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Result">
      <topicdata name="Result" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Result" />
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Result.LogAllMessages">
      <topicdata name="LogAllMessages" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LogAllMessages" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />
        <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Result.LogResult">
      <topicdata name="LogResult" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" />
        <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)" />
        <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.#ctor(Symbiote.Core.ResultCode)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="initialResultCode" optional="true">
          <type api="T:Symbiote.Core.ResultCode" ref="false" />
          <argument>
            <type api="T:Symbiote.Core.ResultCode" ref="false" />
            <enumValue>
              <field name="Success" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.AddError(System.String)">
      <topicdata group="api" />
      <apidata name="AddError" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.AddInfo(System.String)">
      <topicdata group="api" />
      <apidata name="AddInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.AddWarning(System.String)">
      <topicdata group="api" />
      <apidata name="AddWarning" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)">
      <topicdata group="api" />
      <apidata name="Incorporate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="Result">
          <type api="T:Symbiote.Core.Result" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LastErrorMessage">
      <topicdata group="api" />
      <apidata name="LastErrorMessage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LastInfoMessage">
      <topicdata group="api" />
      <apidata name="LastInfoMessage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LastWarningMessage">
      <topicdata group="api" />
      <apidata name="LastWarningMessage" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)">
      <topicdata group="api" />
      <apidata name="Log" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)">
      <topicdata group="api" />
      <apidata name="LogAllMessages" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result.LogAllMessages" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="messageType" optional="true">
          <type api="T:Symbiote.Core.MessageType" ref="false" />
          <argument>
            <type api="T:Symbiote.Core.MessageType" ref="false" />
            <enumValue>
              <field name="Any" />
            </enumValue>
          </argument>
        </parameter>
        <parameter name="header" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="footer" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)">
      <topicdata group="api" />
      <apidata name="LogAllMessages" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result.LogAllMessages" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="header" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="footer" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)">
      <topicdata group="api" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result.LogResult" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="logger">
          <type api="T:NLog.Logger" ref="true" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)">
      <topicdata group="api" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result.LogResult" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="successAction">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="warningAction">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="failureAction">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)">
      <topicdata group="api" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result.LogResult" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Result.Messages">
      <topicdata group="api" />
      <apidata name="Messages" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Messages" />
      <setter name="set_Messages" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Message" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result.op_Implicit(Symbiote.Core.Result)~System.Boolean">
      <topicdata group="api" />
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="Result">
          <type api="T:Symbiote.Core.Result" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Result.ResultCode">
      <topicdata group="api" />
      <apidata name="ResultCode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ResultCode" />
      <setter name="set_ResultCode" />
      <returns>
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Result`1">
      <topicdata group="api" />
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Result" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Result`1.LogAllMessages">
          <element api="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Result`1.#ctor" />
        <element api="M:Symbiote.Core.Result`1.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result`1.Incorporate(Symbiote.Core.Result)" />
        <element api="Overload:Symbiote.Core.Result`1.LogResult">
          <element api="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="P:Symbiote.Core.Result`1.ReturnValue" />
        <element api="M:Symbiote.Core.Result`1.SetReturnValue(`0)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Result`1">
      <topicdata name="Result" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Result`1" />
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Result`1.LogAllMessages">
          <element api="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Result`1.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result`1.Incorporate(Symbiote.Core.Result)" />
        <element api="Overload:Symbiote.Core.Result`1.LogResult">
          <element api="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Result`1.SetReturnValue(`0)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Result`1">
      <topicdata name="Result" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Result`1" />
      <apidata name="Result" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="P:Symbiote.Core.Result`1.ReturnValue" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Result`1.LogAllMessages">
      <topicdata name="LogAllMessages" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LogAllMessages" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)" />
        <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Result`1.LogResult">
      <topicdata name="LogResult" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)" />
        <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)" />
        <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.AddError(System.String)">
      <topicdata group="api" />
      <apidata name="AddError" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.AddInfo(System.String)">
      <topicdata group="api" />
      <apidata name="AddInfo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.AddWarning(System.String)">
      <topicdata group="api" />
      <apidata name="AddWarning" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.Incorporate(Symbiote.Core.Result)">
      <topicdata group="api" />
      <apidata name="Incorporate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="Result">
          <type api="T:Symbiote.Core.Result" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)">
      <topicdata group="api" />
      <apidata name="LogAllMessages" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result`1.LogAllMessages" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="header" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="footer" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)">
      <topicdata group="api" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result`1.LogResult" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="logger">
          <type api="T:NLog.Logger" ref="true" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)">
      <topicdata group="api" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result`1.LogResult" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="successAction">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="warningAction">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="failureAction">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)">
      <topicdata group="api" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Result`1.LogResult" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Result`1.ReturnValue">
      <topicdata group="api" />
      <apidata name="ReturnValue" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ReturnValue" />
      <setter name="set_ReturnValue" />
      <returns>
        <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Result`1.SetReturnValue(`0)">
      <topicdata group="api" />
      <apidata name="SetReturnValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="returnValue">
          <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Result`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Result`1" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.ResultCode">
      <topicdata group="api" />
      <apidata name="ResultCode" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.ResultCode.Unknown" />
        <element api="F:Symbiote.Core.ResultCode.Success" />
        <element api="F:Symbiote.Core.ResultCode.Warning" />
        <element api="F:Symbiote.Core.ResultCode.Failure" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ResultCode.Failure">
      <topicdata group="api" notopic="" />
      <apidata name="Failure" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ResultCode.Success">
      <topicdata group="api" notopic="" />
      <apidata name="Success" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ResultCode.Unknown">
      <topicdata group="api" notopic="" />
      <apidata name="Unknown" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.ResultCode.Warning">
      <topicdata group="api" notopic="" />
      <apidata name="Warning" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.ResultCode" ref="false" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Utility">
      <topicdata group="api" />
      <apidata name="Utility" group="type" subgroup="class" />
      <typedata visibility="assembly" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Symbiote.Core.Utility.Clone``1(System.Collections.Generic.IList{``0})" />
        <element api="M:Symbiote.Core.Utility.ComputeHash(System.String,System.String)" />
        <element api="M:Symbiote.Core.Utility.DisableLoggingLevel(NLog.LogLevel)" />
        <element api="M:Symbiote.Core.Utility.GetAssemblyAttribute``1(System.Reflection.Assembly)" />
        <element api="Overload:Symbiote.Core.Utility.GetSetting">
          <element api="M:Symbiote.Core.Utility.GetSetting(System.String)" />
          <element api="M:Symbiote.Core.Utility.GetSetting(System.String,System.String)" />
        </element>
        <element api="M:Symbiote.Core.Utility.ModifyService(System.String)" />
        <element api="M:Symbiote.Core.Utility.PrintLogo(NLog.Logger)" />
        <element api="M:Symbiote.Core.Utility.PrintModel(NLog.Logger,Symbiote.Core.Item,System.Int32)" />
        <element api="M:Symbiote.Core.Utility.SetLoggingLevel(System.String)" />
        <element api="M:Symbiote.Core.Utility.ShortGuid" />
        <element api="M:Symbiote.Core.Utility.SubArray``1(``0[],System.Int32,System.Int32)" />
        <element api="M:Symbiote.Core.Utility.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        <element api="M:Symbiote.Core.Utility.UpdateSetting(System.String,System.String)" />
        <element api="M:Symbiote.Core.Utility.WildcardToRegex(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:Symbiote.Core.Utility">
      <topicdata name="Utility" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Utility" />
      <apidata name="Utility" group="type" subgroup="class" />
      <typedata visibility="assembly" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Utility.Clone``1(System.Collections.Generic.IList{``0})" />
        <element api="M:Symbiote.Core.Utility.ComputeHash(System.String,System.String)" />
        <element api="M:Symbiote.Core.Utility.DisableLoggingLevel(NLog.LogLevel)" />
        <element api="M:Symbiote.Core.Utility.GetAssemblyAttribute``1(System.Reflection.Assembly)" />
        <element api="Overload:Symbiote.Core.Utility.GetSetting">
          <element api="M:Symbiote.Core.Utility.GetSetting(System.String)" />
          <element api="M:Symbiote.Core.Utility.GetSetting(System.String,System.String)" />
        </element>
        <element api="M:Symbiote.Core.Utility.ModifyService(System.String)" />
        <element api="M:Symbiote.Core.Utility.PrintLogo(NLog.Logger)" />
        <element api="M:Symbiote.Core.Utility.PrintModel(NLog.Logger,Symbiote.Core.Item,System.Int32)" />
        <element api="M:Symbiote.Core.Utility.SetLoggingLevel(System.String)" />
        <element api="M:Symbiote.Core.Utility.ShortGuid" />
        <element api="M:Symbiote.Core.Utility.SubArray``1(``0[],System.Int32,System.Int32)" />
        <element api="M:Symbiote.Core.Utility.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        <element api="M:Symbiote.Core.Utility.UpdateSetting(System.String,System.String)" />
        <element api="M:Symbiote.Core.Utility.WildcardToRegex(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Utility.GetSetting">
      <topicdata name="GetSetting" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="GetSetting" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Utility.GetSetting(System.String)" />
        <element api="M:Symbiote.Core.Utility.GetSetting(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.Clone``1(System.Collections.Generic.IList{``0})">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.ICloneable" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="listToClone">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Symbiote.Core.Utility.Clone``1(System.Collections.Generic.IList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Symbiote.Core.Utility.Clone``1(System.Collections.Generic.IList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Utility.ComputeHash(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ComputeHash" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="salt" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.DisableLoggingLevel(NLog.LogLevel)">
      <topicdata group="api" />
      <apidata name="DisableLoggingLevel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.GetAssemblyAttribute``1(System.Reflection.Assembly)">
      <topicdata group="api" />
      <apidata name="GetAssemblyAttribute" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="ass">
          <type api="T:System.Reflection.Assembly" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Symbiote.Core.Utility.GetAssemblyAttribute``1(System.Reflection.Assembly)" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Utility.GetSetting(System.String)">
      <topicdata group="api" />
      <apidata name="GetSetting" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" overload="Overload:Symbiote.Core.Utility.GetSetting" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.GetSetting(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="GetSetting" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" overload="Overload:Symbiote.Core.Utility.GetSetting" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="defaultSetting">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.ModifyService(System.String)">
      <topicdata group="api" />
      <apidata name="ModifyService" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="action">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.PrintLogo(NLog.Logger)">
      <topicdata group="api" />
      <apidata name="PrintLogo" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="logger">
          <type api="T:NLog.Logger" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.PrintModel(NLog.Logger,Symbiote.Core.Item,System.Int32)">
      <topicdata group="api" />
      <apidata name="PrintModel" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="logger">
          <type api="T:NLog.Logger" ref="true" />
        </parameter>
        <parameter name="root">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="indent">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.SetLoggingLevel(System.String)">
      <topicdata group="api" />
      <apidata name="SetLoggingLevel" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.ShortGuid">
      <topicdata group="api" />
      <apidata name="ShortGuid" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.SubArray``1(``0[],System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="SubArray" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="data">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Symbiote.Core.Utility.SubArray``1(``0[],System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Symbiote.Core.Utility.SubArray``1(``0[],System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Utility.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <topicdata group="api" />
      <apidata name="TakeLast" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Symbiote.Core.Utility.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="N">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Symbiote.Core.Utility.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Utility.UpdateSetting(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="UpdateSetting" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Utility.WildcardToRegex(System.String)">
      <topicdata group="api" />
      <apidata name="WildcardToRegex" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="pattern" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.Utility" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.WindowsService">
      <topicdata group="api" />
      <apidata name="WindowsService" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          <type api="T:System.ComponentModel.Component" ref="true" />
          <type api="T:System.MarshalByRefObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="Overload:Symbiote.Core.WindowsService.Dispose">
          <element api="M:System.ComponentModel.Component.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.ComponentModel" />
              <type api="T:System.ComponentModel.Component" ref="true" />
            </containers>
          </element>
          <element api="M:Symbiote.Core.WindowsService.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <apidata name="RequestAdditionalTime" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="milliseconds">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnContinue">
          <apidata name="OnContinue" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnPause">
          <apidata name="OnPause" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <apidata name="OnPowerEvent" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="powerStatus">
              <type api="T:System.ServiceProcess.PowerBroadcastStatus" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <apidata name="OnSessionChange" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="changeDescription">
              <type api="T:System.ServiceProcess.SessionChangeDescription" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <apidata name="OnShutdown" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <apidata name="OnCustomCommand" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="command">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.Stop">
          <apidata name="Stop" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <apidata name="ServiceMainCallback" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="argCount">
              <type api="T:System.Int32" ref="false" />
            </parameter>
            <parameter name="argPointer">
              <type api="T:System.IntPtr" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Never" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.AutoLog">
          <apidata name="AutoLog" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_AutoLog" />
          <setter name="set_AutoLog" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>True</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ServiceProcess.ServiceProcessDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>SBAutoLog</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.ExitCode">
          <apidata name="ExitCode" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ExitCode" />
          <setter name="set_ExitCode" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <apidata name="CanHandlePowerEvent" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanHandlePowerEvent" />
          <setter name="set_CanHandlePowerEvent" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <apidata name="CanHandleSessionChangeEvent" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanHandleSessionChangeEvent" />
          <setter name="set_CanHandleSessionChangeEvent" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <apidata name="CanPauseAndContinue" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanPauseAndContinue" />
          <setter name="set_CanPauseAndContinue" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <apidata name="CanShutdown" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanShutdown" />
          <setter name="set_CanShutdown" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanStop">
          <apidata name="CanStop" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanStop" />
          <setter name="set_CanStop" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>True</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.EventLog">
          <apidata name="EventLog" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_EventLog" />
          <returns>
            <type api="T:System.Diagnostics.EventLog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <apidata name="ServiceHandle" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ServiceHandle" />
          <returns>
            <type api="T:System.IntPtr" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Advanced" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.ServiceName">
          <apidata name="ServiceName" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ServiceName" />
          <setter name="set_ServiceName" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ServiceProcess.ServiceProcessDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>SBServiceName</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="M:System.ComponentModel.Component.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Finalize">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.GetService(System.Type)">
          <apidata name="GetService" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="service">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.ToString">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.CanRaiseEvents">
          <apidata name="CanRaiseEvents" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_CanRaiseEvents" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Events">
          <apidata name="Events" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Events" />
          <returns>
            <type api="T:System.ComponentModel.EventHandlerList" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Site">
          <apidata name="Site" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Site" />
          <setter name="set_Site" />
          <returns>
            <type api="T:System.ComponentModel.ISite" ref="true" />
          </returns>
          <implements>
            <member api="P:System.ComponentModel.IComponent.Site">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.Container">
          <apidata name="Container" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Container" />
          <returns>
            <type api="T:System.ComponentModel.IContainer" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.DesignMode">
          <apidata name="DesignMode" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_DesignMode" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="E:System.ComponentModel.Component.Disposed">
          <apidata name="Disposed" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <eventdata add="true" remove="true" />
          <adder name="add_Disposed" />
          <remover name="remove_Disposed" />
          <eventhandler>
            <type api="T:System.EventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.EventArgs" ref="true" />
          </eventargs>
          <implements>
            <member api="E:System.ComponentModel.IComponent.Disposed">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Advanced" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.WindowsService.MemberwiseClone">
          <element api="M:System.Object.MemberwiseClone">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <returns>
              <type api="T:System.Object" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.Object" ref="true" />
            </containers>
          </element>
          <element api="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="cloneIdentity">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.MarshalByRefObject" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.MarshalByRefObject" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.MarshalByRefObject.GetLifetimeService">
          <apidata name="GetLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.InitializeLifetimeService">
          <apidata name="InitializeLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <apidata name="CreateObjRef" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="requestedType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Runtime.Remoting.ObjRef" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.WindowsService.#ctor" />
        <element api="F:Symbiote.Core.WindowsService.components" />
        <element api="M:Symbiote.Core.WindowsService.InitializeComponent" />
        <element api="M:Symbiote.Core.WindowsService.OnStart(System.String[])" />
        <element api="M:Symbiote.Core.WindowsService.OnStop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.WindowsService">
      <topicdata name="WindowsService" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.WindowsService" />
      <apidata name="WindowsService" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <elements>
        <element api="Overload:Symbiote.Core.WindowsService.Dispose">
          <element api="M:System.ComponentModel.Component.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.ComponentModel" />
              <type api="T:System.ComponentModel.Component" ref="true" />
            </containers>
          </element>
          <element api="M:Symbiote.Core.WindowsService.Dispose(System.Boolean)" />
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
          <apidata name="RequestAdditionalTime" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="milliseconds">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnContinue">
          <apidata name="OnContinue" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnPause">
          <apidata name="OnPause" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
          <apidata name="OnPowerEvent" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="powerStatus">
              <type api="T:System.ServiceProcess.PowerBroadcastStatus" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
          <apidata name="OnSessionChange" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="changeDescription">
              <type api="T:System.ServiceProcess.SessionChangeDescription" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnShutdown">
          <apidata name="OnShutdown" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
          <apidata name="OnCustomCommand" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="command">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.Stop">
          <apidata name="Stop" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
        </element>
        <element api="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
          <apidata name="ServiceMainCallback" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="argCount">
              <type api="T:System.Int32" ref="false" />
            </parameter>
            <parameter name="argPointer">
              <type api="T:System.IntPtr" ref="false" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Never" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="M:System.ComponentModel.Component.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Finalize">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.GetService(System.Type)">
          <apidata name="GetService" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="service">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:System.ComponentModel.Component.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.ToString">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.WindowsService.MemberwiseClone">
          <element api="M:System.Object.MemberwiseClone">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <returns>
              <type api="T:System.Object" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.Object" ref="true" />
            </containers>
          </element>
          <element api="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
            <apidata name="MemberwiseClone" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="cloneIdentity">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.MarshalByRefObject" ref="true" />
            </returns>
            <containers>
              <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System" />
              <type api="T:System.MarshalByRefObject" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.MarshalByRefObject.GetLifetimeService">
          <apidata name="GetLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.InitializeLifetimeService">
          <apidata name="InitializeLifetimeService" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <apidata name="CreateObjRef" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="requestedType">
              <type api="T:System.Type" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Runtime.Remoting.ObjRef" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.MarshalByRefObject" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.WindowsService.InitializeComponent" />
        <element api="M:Symbiote.Core.WindowsService.OnStart(System.String[])" />
        <element api="M:Symbiote.Core.WindowsService.OnStop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.WindowsService">
      <topicdata name="WindowsService" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.WindowsService" />
      <apidata name="WindowsService" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <elements>
        <element api="P:System.ServiceProcess.ServiceBase.AutoLog">
          <apidata name="AutoLog" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_AutoLog" />
          <setter name="set_AutoLog" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>True</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ServiceProcess.ServiceProcessDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>SBAutoLog</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.ExitCode">
          <apidata name="ExitCode" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ExitCode" />
          <setter name="set_ExitCode" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
          <apidata name="CanHandlePowerEvent" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanHandlePowerEvent" />
          <setter name="set_CanHandlePowerEvent" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
          <apidata name="CanHandleSessionChangeEvent" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanHandleSessionChangeEvent" />
          <setter name="set_CanHandleSessionChangeEvent" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
          <apidata name="CanPauseAndContinue" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanPauseAndContinue" />
          <setter name="set_CanPauseAndContinue" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanShutdown">
          <apidata name="CanShutdown" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanShutdown" />
          <setter name="set_CanShutdown" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.CanStop">
          <apidata name="CanStop" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_CanStop" />
          <setter name="set_CanStop" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DefaultValueAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>True</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.EventLog">
          <apidata name="EventLog" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_EventLog" />
          <returns>
            <type api="T:System.Diagnostics.EventLog" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.ServiceHandle">
          <apidata name="ServiceHandle" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ServiceHandle" />
          <returns>
            <type api="T:System.IntPtr" ref="false" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Advanced" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ServiceProcess.ServiceBase.ServiceName">
          <apidata name="ServiceName" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ServiceName" />
          <setter name="set_ServiceName" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="System.ServiceProcess" module="System.ServiceProcess" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ServiceProcess" />
            <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ServiceProcess.ServiceProcessDescriptionAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>SBServiceName</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.TypeConverterAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.CanRaiseEvents">
          <apidata name="CanRaiseEvents" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_CanRaiseEvents" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Events">
          <apidata name="Events" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Events" />
          <returns>
            <type api="T:System.ComponentModel.EventHandlerList" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="P:System.ComponentModel.Component.Site">
          <apidata name="Site" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Site" />
          <setter name="set_Site" />
          <returns>
            <type api="T:System.ComponentModel.ISite" ref="true" />
          </returns>
          <implements>
            <member api="P:System.ComponentModel.IComponent.Site">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.Container">
          <apidata name="Container" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_Container" />
          <returns>
            <type api="T:System.ComponentModel.IContainer" ref="true" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="P:System.ComponentModel.Component.DesignMode">
          <apidata name="DesignMode" group="member" subgroup="property" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_DesignMode" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.DesignerSerializationVisibility" ref="false" />
                <enumValue>
                  <field name="Hidden" />
                </enumValue>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
          </attributes>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" />
      </containers>
    </api>
    <api id="Events.T:Symbiote.Core.WindowsService">
      <topicdata name="WindowsService" group="list" subgroup="Events" typeTopicId="T:Symbiote.Core.WindowsService" />
      <apidata name="WindowsService" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <elements>
        <element api="E:System.ComponentModel.Component.Disposed">
          <apidata name="Disposed" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <eventdata add="true" remove="true" />
          <adder name="add_Disposed" />
          <remover name="remove_Disposed" />
          <eventhandler>
            <type api="T:System.EventHandler" ref="true" />
          </eventhandler>
          <eventargs>
            <type api="T:System.EventArgs" ref="true" />
          </eventargs>
          <implements>
            <member api="E:System.ComponentModel.IComponent.Disposed">
              <type api="T:System.ComponentModel.IComponent" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ComponentModel.BrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.Boolean" ref="false" />
                <value>False</value>
              </argument>
            </attribute>
            <attribute>
              <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
              <argument>
                <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                <enumValue>
                  <field name="Advanced" />
                </enumValue>
              </argument>
            </attribute>
          </attributes>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.WindowsService">
      <topicdata name="WindowsService" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.WindowsService" />
      <apidata name="WindowsService" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.WindowsService.components" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.WindowsService.Dispose">
      <topicdata name="Dispose" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <elements>
        <element api="M:System.ComponentModel.Component.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <implements>
            <member api="M:System.IDisposable.Dispose">
              <type api="T:System.IDisposable" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System" module="System" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.ComponentModel" />
            <type api="T:System.ComponentModel.Component" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.WindowsService.Dispose(System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.WindowsService.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.WindowsService.components">
      <topicdata group="api" />
      <apidata name="components" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.ComponentModel.IContainer" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.WindowsService.Dispose(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="family" overload="Overload:Symbiote.Core.WindowsService.Dispose" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
          <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="disposing">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.WindowsService.InitializeComponent">
      <topicdata group="api" />
      <apidata name="InitializeComponent" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.WindowsService.OnStart(System.String[])">
      <topicdata group="api" />
      <apidata name="OnStart" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
          <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.WindowsService.OnStop">
      <topicdata group="api" />
      <apidata name="OnStop" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ServiceProcess.ServiceBase.OnStop">
          <type api="T:System.ServiceProcess.ServiceBase" ref="true" />
        </member>
      </overrides>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.WindowsService" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.xLogger">
      <topicdata group="api" />
      <apidata name="xLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:NLog.Logger" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:NLog.Logger.loggerType">
          <apidata name="loggerType" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="true" serialized="true" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.configuration">
          <apidata name="configuration" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:NLog.Internal.LoggerConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isTraceEnabled">
          <apidata name="isTraceEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isDebugEnabled">
          <apidata name="isDebugEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isInfoEnabled">
          <apidata name="isInfoEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isWarnEnabled">
          <apidata name="isWarnEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isErrorEnabled">
          <apidata name="isErrorEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isFatalEnabled">
          <apidata name="isFatalEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
          <apidata name="IsEnabled" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="level">
              <type api="T:NLog.LogLevel" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="M:NLog.ILoggerBase.IsEnabled(NLog.LogLevel)">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Log">
          <element api="M:NLog.Logger.Log(NLog.LogEventInfo)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogEventInfo)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="wrapperType">
                <type api="T:System.Type" ref="true" />
              </parameter>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(System.Type,NLog.LogEventInfo)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Exception)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Exception)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Log(LogLevel level, Exception exception, [Localizable(false)] string message, params object[] args)</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.String,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Boolean)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Char)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Byte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.String)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Single)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Double)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Decimal)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.SByte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.String,``0,``1)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
          <apidata name="LogException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="level">
              <type api="T:NLog.LogLevel" ref="true" />
            </parameter>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILoggerBase.LogException(NLog.LogLevel,System.String,System.Exception)">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Log(LogLevel, String, Exception) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.WriteToTargets">
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogEventInfo)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(System.Type,NLog.LogEventInfo)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="wrapperType">
                <type api="T:System.Type" ref="true" />
              </parameter>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.IFormatProvider,System.String)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.WriteToTargets``1(NLog.LogLevel,System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.String,System.Exception)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="ex">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use WriteToTargets(Exception ex, LogLevel level, IFormatProvider formatProvider, string message, object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="ex">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="ex">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:NLog.Logger.PrepareLogEventInfo(NLog.LogEventInfo)">
          <apidata name="PrepareLogEventInfo" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="logEvent">
              <type api="T:NLog.LogEventInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:NLog.LogEventInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Swallow">
          <element api="M:NLog.Logger.Swallow(System.Action)">
            <apidata name="Swallow" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="action">
                <type api="T:System.Action" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ISuppress.Swallow(System.Action)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Swallow``1(System.Func{``0})">
            <apidata name="Swallow" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="func">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0})" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0})" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.Swallow``1(System.Func{``0})">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)">
            <apidata name="Swallow" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="func">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="fallback">
                <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)" />
              </parameter>
            </parameters>
            <returns>
              <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.Swallow``1(System.Func{``0},``0)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.SwallowAsync">
          <element api="M:NLog.Logger.SwallowAsync(System.Threading.Tasks.Task)">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="task">
                <type api="T:System.Threading.Tasks.Task" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task" ref="true" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync(System.Threading.Tasks.Task)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.SwallowAsync(System.Func{System.Threading.Tasks.Task})">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="asyncAction">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <type api="T:System.Threading.Tasks.Task" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task" ref="true" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync(System.Func{System.Threading.Tasks.Task})">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TResult" />
            </templates>
            <parameters>
              <parameter name="asyncFunc">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <type api="T:System.Threading.Tasks.Task`1" ref="true">
                      <specialization>
                        <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task`1" ref="true">
                <specialization>
                  <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})" />
                </specialization>
              </type>
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TResult" />
            </templates>
            <parameters>
              <parameter name="asyncFunc">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <type api="T:System.Threading.Tasks.Task`1" ref="true">
                      <specialization>
                        <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </parameter>
              <parameter name="fallback">
                <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task`1" ref="true">
                <specialization>
                  <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)" />
                </specialization>
              </type>
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:NLog.Logger.Initialize(System.String,NLog.Internal.LoggerConfiguration,NLog.LogFactory)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="assembly" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="name">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="loggerConfiguration">
              <type api="T:NLog.Internal.LoggerConfiguration" ref="true" />
            </parameter>
            <parameter name="factory">
              <type api="T:NLog.LogFactory" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="M:NLog.Logger.SetConfiguration(NLog.Internal.LoggerConfiguration)">
          <apidata name="SetConfiguration" group="member" subgroup="method" />
          <memberdata visibility="assembly" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="newConfiguration">
              <type api="T:NLog.Internal.LoggerConfiguration" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="M:NLog.Logger.GetTargetsForLevel(NLog.LogLevel)">
          <apidata name="GetTargetsForLevel" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="level">
              <type api="T:NLog.LogLevel" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:NLog.Internal.TargetWithFilterChain" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Trace">
          <element api="M:NLog.Logger.Trace``1(``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Trace``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(System.String)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Exception)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Trace(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``1(System.String,``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Trace``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Boolean)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Char)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Byte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.String)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Int32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Int64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Single)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Double)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Decimal)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.SByte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.UInt32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.UInt64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.Exception,System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``2(System.String,``0,``1)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.TraceException(System.String,System.Exception)">
          <apidata name="TraceException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.TraceException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Trace(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Debug">
          <element api="M:NLog.Logger.Debug``1(``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Debug``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(System.String)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Exception)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Debug(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``1(System.String,``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Debug``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Char)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Byte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.String)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Int32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Int64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Single)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Double)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.SByte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.Exception,System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``2(System.String,``0,``1)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.DebugException(System.String,System.Exception)">
          <apidata name="DebugException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.DebugException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Debug(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Info">
          <element api="M:NLog.Logger.Info``1(``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Info``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(System.String)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Info``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Exception)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Info(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``1(System.String,``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Info``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Boolean)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Char)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Byte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.String)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Int32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Int64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Single)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Double)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Decimal)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.SByte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.UInt32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.UInt64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.Exception,System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``2(System.String,``0,``1)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.InfoException(System.String,System.Exception)">
          <apidata name="InfoException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.InfoException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Info(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Warn">
          <element api="M:NLog.Logger.Warn``1(``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Warn``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(System.String)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Exception)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Warn(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``1(System.String,``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Warn``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Char)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Byte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.String)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Int32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Int64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Single)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Double)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.SByte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.Exception,System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``2(System.String,``0,``1)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.WarnException(System.String,System.Exception)">
          <apidata name="WarnException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.WarnException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Warn(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Error">
          <element api="M:NLog.Logger.Error``1(``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Error``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(System.String)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Error``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Exception)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Error(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``1(System.String,``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Error``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Boolean)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Char)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Byte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.String)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Int32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Int64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Single)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Double)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Decimal)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.SByte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.UInt32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.UInt64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.Exception,System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``2(System.String,``0,``1)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.ErrorException(System.String,System.Exception)">
          <apidata name="ErrorException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.ErrorException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Error(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Fatal">
          <element api="M:NLog.Logger.Fatal``1(``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Fatal``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Exception)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Fatal(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``1(System.String,``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Fatal``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Char)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.String)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Single)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Double)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.FatalException(System.String,System.Exception)">
          <apidata name="FatalException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.FatalException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Fatal(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.ConditionalDebug">
          <element api="M:NLog.Logger.ConditionalDebug``1(``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalDebug``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(NLog.LogMessageGenerator)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``1(System.String,``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalDebug``1(System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Boolean)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Char)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Byte)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.String)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Int32)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Int64)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Single)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Double)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Decimal)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.Exception,System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,System.String,``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Char)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.String)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Single)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Double)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.ConditionalTrace">
          <element api="M:NLog.Logger.ConditionalTrace``1(``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalTrace``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(NLog.LogMessageGenerator)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``1(System.String,``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalTrace``1(System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Boolean)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Char)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Byte)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.String)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Int32)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Int64)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Single)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Double)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Decimal)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.Exception,System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,System.String,``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Char)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.String)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Single)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Double)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="P:NLog.Logger.Name">
          <apidata name="Name" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" set-visibility="private" />
          <getter name="get_Name" />
          <setter name="set_Name" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <implements>
            <member api="P:NLog.ILoggerBase.Name">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.Factory">
          <apidata name="Factory" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" set-visibility="private" />
          <getter name="get_Factory" />
          <setter name="set_Factory" />
          <returns>
            <type api="T:NLog.LogFactory" ref="true" />
          </returns>
          <implements>
            <member api="P:NLog.ILoggerBase.Factory">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsTraceEnabled">
          <apidata name="IsTraceEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsTraceEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsTraceEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsDebugEnabled">
          <apidata name="IsDebugEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsDebugEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsDebugEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsInfoEnabled">
          <apidata name="IsInfoEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsInfoEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsInfoEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsWarnEnabled">
          <apidata name="IsWarnEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsWarnEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsWarnEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsErrorEnabled">
          <apidata name="IsErrorEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsErrorEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsErrorEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsFatalEnabled">
          <apidata name="IsFatalEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsFatalEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsFatalEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="E:NLog.Logger.LoggerReconfigured">
          <apidata name="LoggerReconfigured" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <eventdata add="true" remove="true" />
          <adder name="add_LoggerReconfigured" />
          <remover name="remove_LoggerReconfigured" />
          <eventhandler>
            <type api="T:System.EventHandler`1" ref="true">
              <specialization>
                <type api="T:System.EventArgs" ref="true" />
              </specialization>
            </type>
          </eventhandler>
          <eventargs>
            <type api="T:System.EventArgs" ref="true" />
          </eventargs>
          <implements>
            <member api="E:NLog.ILoggerBase.LoggerReconfigured">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.xLogger.#ctor" />
        <element api="M:Symbiote.Core.xLogger.#cctor" />
        <element api="F:Symbiote.Core.xLogger.AutoPruneAge" />
        <element api="F:Symbiote.Core.xLogger.AutoPruneEnabled" />
        <element api="Overload:Symbiote.Core.xLogger.Checkpoint">
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
        </element>
        <element api="F:Symbiote.Core.xLogger.CheckpointPrefix" />
        <element api="Overload:Symbiote.Core.xLogger.EnterMethod">
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Boolean,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)" />
        </element>
        <element api="F:Symbiote.Core.xLogger.EnterPrefix" />
        <element api="Overload:Symbiote.Core.xLogger.Exception">
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
        </element>
        <element api="F:Symbiote.Core.xLogger.ExceptionFooterPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExceptionHeaderPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExceptionLinePrefix" />
        <element api="F:Symbiote.Core.xLogger.ExceptionPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExecutionDurationPrefix" />
        <element api="Overload:Symbiote.Core.xLogger.ExitMethod">
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)" />
        </element>
        <element api="F:Symbiote.Core.xLogger.ExitPrefix" />
        <element api="F:Symbiote.Core.xLogger.FinalLinePrefix" />
        <element api="F:Symbiote.Core.xLogger.Footer" />
        <element api="M:Symbiote.Core.xLogger.GetCallingStackFrame" />
        <element api="M:Symbiote.Core.xLogger.GetColloquialTypeName(System.Type)" />
        <element api="M:Symbiote.Core.xLogger.GetExceptionSerialization(System.Exception)" />
        <element api="M:Symbiote.Core.xLogger.GetInvertedStackExcerpt" />
        <element api="M:Symbiote.Core.xLogger.GetMethodSignature(System.Reflection.MethodBase)" />
        <element api="M:Symbiote.Core.xLogger.GetObjectSerialization(System.Object)" />
        <element api="F:Symbiote.Core.xLogger.Header" />
        <element api="M:Symbiote.Core.xLogger.Heading(NLog.LogLevel,System.String)" />
        <element api="F:Symbiote.Core.xLogger.Indent" />
        <element api="F:Symbiote.Core.xLogger.InnerSeparator" />
        <element api="F:Symbiote.Core.xLogger.LinePrefix" />
        <element api="F:Symbiote.Core.xLogger.LinePrefixVariable" />
        <element api="M:Symbiote.Core.xLogger.LogExecutionDuration(NLog.LogLevel,System.String,System.Guid,System.Boolean,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogFooter(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogHeader(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogInnerSeparator(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogOuterSeparator(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogStackTrace(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogVariables(NLog.LogLevel,System.Object[],System.String[],System.String)" />
        <element api="Overload:Symbiote.Core.xLogger.Multiline">
          <element api="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String)" />
          <element api="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String[])" />
        </element>
        <element api="Overload:Symbiote.Core.xLogger.MultilineWrapped">
          <element api="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String)" />
          <element api="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String[])" />
        </element>
        <element api="M:Symbiote.Core.xLogger.Names(System.String[])" />
        <element api="F:Symbiote.Core.xLogger.OuterSeparator" />
        <element api="M:Symbiote.Core.xLogger.Params(System.Object[])" />
        <element api="F:Symbiote.Core.xLogger.PersistedMethodListLock" />
        <element api="P:Symbiote.Core.xLogger.PersistedMethods" />
        <element api="F:Symbiote.Core.xLogger.Prefix" />
        <element api="M:Symbiote.Core.xLogger.PrunePersistedMethods(System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Separator(NLog.LogLevel)" />
        <element api="Overload:Symbiote.Core.xLogger.StackTrace">
          <element api="M:Symbiote.Core.xLogger.StackTrace(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.StackTrace(NLog.LogLevel,System.String,System.String,System.Int32)" />
        </element>
        <element api="F:Symbiote.Core.xLogger.StackTracePrefix" />
        <element api="M:Symbiote.Core.xLogger.SubHeading(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.SubSubHeading(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.xLogger">
      <topicdata name="xLogger" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.xLogger" />
      <apidata name="xLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
          <apidata name="IsEnabled" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="level">
              <type api="T:NLog.LogLevel" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="M:NLog.ILoggerBase.IsEnabled(NLog.LogLevel)">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Log">
          <element api="M:NLog.Logger.Log(NLog.LogEventInfo)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogEventInfo)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="wrapperType">
                <type api="T:System.Type" ref="true" />
              </parameter>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(System.Type,NLog.LogEventInfo)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Exception)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Exception)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Log(LogLevel level, Exception exception, [Localizable(false)] string message, params object[] args)</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.String,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Boolean)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Char)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Byte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.String)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Single)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Double)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Decimal)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.SByte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.String,``0,``1)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Log" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILoggerBase" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
          <apidata name="LogException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="level">
              <type api="T:NLog.LogLevel" ref="true" />
            </parameter>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILoggerBase.LogException(NLog.LogLevel,System.String,System.Exception)">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Log(LogLevel, String, Exception) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.WriteToTargets">
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogEventInfo)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(System.Type,NLog.LogEventInfo)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="wrapperType">
                <type api="T:System.Type" ref="true" />
              </parameter>
              <parameter name="logEvent">
                <type api="T:NLog.LogEventInfo" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.IFormatProvider,System.String)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.WriteToTargets``1(NLog.LogLevel,System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.String,System.Exception)">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="ex">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use WriteToTargets(Exception ex, LogLevel level, IFormatProvider formatProvider, string message, object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="ex">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.WriteToTargets(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="WriteToTargets" group="member" subgroup="method" />
            <memberdata visibility="assembly" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="level">
                <type api="T:NLog.LogLevel" ref="true" />
              </parameter>
              <parameter name="ex">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:NLog.Logger.PrepareLogEventInfo(NLog.LogEventInfo)">
          <apidata name="PrepareLogEventInfo" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="logEvent">
              <type api="T:NLog.LogEventInfo" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:NLog.LogEventInfo" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Swallow">
          <element api="M:NLog.Logger.Swallow(System.Action)">
            <apidata name="Swallow" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="action">
                <type api="T:System.Action" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ISuppress.Swallow(System.Action)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Swallow``1(System.Func{``0})">
            <apidata name="Swallow" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="func">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0})" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0})" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.Swallow``1(System.Func{``0})">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)">
            <apidata name="Swallow" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="func">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="fallback">
                <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)" />
              </parameter>
            </parameters>
            <returns>
              <template name="T" index="0" api="M:NLog.Logger.Swallow``1(System.Func{``0},``0)" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.Swallow``1(System.Func{``0},``0)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.SwallowAsync">
          <element api="M:NLog.Logger.SwallowAsync(System.Threading.Tasks.Task)">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="task">
                <type api="T:System.Threading.Tasks.Task" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task" ref="true" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync(System.Threading.Tasks.Task)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.SwallowAsync(System.Func{System.Threading.Tasks.Task})">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="asyncAction">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <type api="T:System.Threading.Tasks.Task" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task" ref="true" />
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync(System.Func{System.Threading.Tasks.Task})">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TResult" />
            </templates>
            <parameters>
              <parameter name="asyncFunc">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <type api="T:System.Threading.Tasks.Task`1" ref="true">
                      <specialization>
                        <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task`1" ref="true">
                <specialization>
                  <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})" />
                </specialization>
              </type>
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <apidata name="SwallowAsync" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TResult" />
            </templates>
            <parameters>
              <parameter name="asyncFunc">
                <type api="T:System.Func`1" ref="true">
                  <specialization>
                    <type api="T:System.Threading.Tasks.Task`1" ref="true">
                      <specialization>
                        <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </parameter>
              <parameter name="fallback">
                <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Threading.Tasks.Task`1" ref="true">
                <specialization>
                  <template name="TResult" index="0" api="M:NLog.Logger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)" />
                </specialization>
              </type>
            </returns>
            <implements>
              <member api="M:NLog.ISuppress.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
                <type api="T:NLog.ISuppress" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:NLog.Logger.Initialize(System.String,NLog.Internal.LoggerConfiguration,NLog.LogFactory)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="assembly" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="name">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="loggerConfiguration">
              <type api="T:NLog.Internal.LoggerConfiguration" ref="true" />
            </parameter>
            <parameter name="factory">
              <type api="T:NLog.LogFactory" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="M:NLog.Logger.SetConfiguration(NLog.Internal.LoggerConfiguration)">
          <apidata name="SetConfiguration" group="member" subgroup="method" />
          <memberdata visibility="assembly" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="newConfiguration">
              <type api="T:NLog.Internal.LoggerConfiguration" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="M:NLog.Logger.GetTargetsForLevel(NLog.LogLevel)">
          <apidata name="GetTargetsForLevel" group="member" subgroup="method" />
          <memberdata visibility="private" />
          <proceduredata virtual="false" />
          <parameters>
            <parameter name="level">
              <type api="T:NLog.LogLevel" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:NLog.Internal.TargetWithFilterChain" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Trace">
          <element api="M:NLog.Logger.Trace``1(``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Trace``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(System.String)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Exception)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Trace(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``1(System.String,``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Trace``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Boolean)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Char)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Byte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.String)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Int32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Int64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Single)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Double)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Decimal)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.SByte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.UInt32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.UInt64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.Exception,System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``2(System.String,``0,``1)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Trace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.TraceException(System.String,System.Exception)">
          <apidata name="TraceException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.TraceException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Trace(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Debug">
          <element api="M:NLog.Logger.Debug``1(``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Debug``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(System.String)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Exception)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Debug(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``1(System.String,``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Debug``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Char)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Byte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.String)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Int32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Int64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Single)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Double)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.SByte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.Exception,System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``2(System.String,``0,``1)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Debug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.DebugException(System.String,System.Exception)">
          <apidata name="DebugException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.DebugException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Debug(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Info">
          <element api="M:NLog.Logger.Info``1(``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Info``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(System.String)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Info``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Exception)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Info(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``1(System.String,``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Info``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Boolean)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Char)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Byte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.String)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Int32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Int64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Single)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Double)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Decimal)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.SByte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.UInt32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.UInt64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.Exception,System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``2(System.String,``0,``1)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Info``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Info" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.InfoException(System.String,System.Exception)">
          <apidata name="InfoException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.InfoException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Info(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Warn">
          <element api="M:NLog.Logger.Warn``1(``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Warn``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(System.String)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Exception)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Warn(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``1(System.String,``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Warn``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Char)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Byte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.String)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Int32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Int64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Single)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Double)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.SByte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.Exception,System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``2(System.String,``0,``1)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Warn" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.WarnException(System.String,System.Exception)">
          <apidata name="WarnException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.WarnException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Warn(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Error">
          <element api="M:NLog.Logger.Error``1(``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Error``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(System.String)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Error``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Exception)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Error(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``1(System.String,``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Error``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Boolean)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Char)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Byte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.String)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Int32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Int64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Single)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Double)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Decimal)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.SByte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.UInt32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.UInt64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.Exception,System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``2(System.String,``0,``1)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Error``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Error" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.ErrorException(System.String,System.Exception)">
          <apidata name="ErrorException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.ErrorException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Error(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Fatal">
          <element api="M:NLog.Logger.Fatal``1(``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Fatal``1(``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(NLog.LogMessageGenerator)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(System.IFormatProvider,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Exception)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Exception)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ObsoleteAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>Use Fatal(Exception exception, string message, params object[] args) method instead.</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``1(System.String,``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Fatal``1(System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Char)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.String)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Single)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Double)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.Exception,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
          </element>
          <element api="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``1(System.IFormatProvider,System.String,``0)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``2(System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Char)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Byte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.String)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Single)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Double)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.SByte" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.SByte)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt32" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.UInt64" ref="false" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.CLSCompliantAttribute" ref="true" />
                <argument>
                  <type api="T:System.Boolean" ref="false" />
                  <value>False</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``3(System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object,System.Object)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.ComponentModel.EditorBrowsableAttribute" ref="true" />
                <argument>
                  <type api="T:System.ComponentModel.EditorBrowsableState" ref="false" />
                  <enumValue>
                    <field name="Never" />
                  </enumValue>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="Fatal" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <implements>
              <member api="M:NLog.ILogger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
                <type api="T:NLog.ILogger" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:NLog.Logger.FatalException(System.String,System.Exception)">
          <apidata name="FatalException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <parameters>
            <parameter name="message">
              <type api="T:System.String" ref="true" />
            </parameter>
            <parameter name="exception">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:NLog.ILogger.FatalException(System.String,System.Exception)">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.ObsoleteAttribute" ref="true" />
              <argument>
                <type api="T:System.String" ref="true" />
                <value>Use Fatal(Exception exception, string message, params object[] args) method instead.</value>
              </argument>
            </attribute>
          </attributes>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.ConditionalDebug">
          <element api="M:NLog.Logger.ConditionalDebug``1(``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalDebug``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(NLog.LogMessageGenerator)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``1(System.String,``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalDebug``1(System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Boolean)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Char)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Byte)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.String)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Int32)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Int64)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Single)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Double)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Decimal)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.Exception,System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,System.String,``0)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Char)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.String)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Single)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Double)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object,System.Object)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="ConditionalDebug" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.ConditionalTrace">
          <element api="M:NLog.Logger.ConditionalTrace``1(``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalTrace``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(NLog.LogMessageGenerator)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="messageFunc">
                <type api="T:NLog.LogMessageGenerator" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``1(System.String,``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalTrace``1(System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="value">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Boolean)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Char)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Byte)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.String)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Int32)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Int64)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Single)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Double)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Decimal)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.Exception,System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,System.String,``0)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <template name="TArgument" index="0" api="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,System.String,``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Boolean)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Char)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Char" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Byte)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Byte" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.String)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int32)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int32" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int64)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Int64" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Single)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Single" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Double)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Double" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Decimal)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Decimal" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="args" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Object" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object,System.Object)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="arg1">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg2">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="arg3">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
          <element api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <apidata name="ConditionalTrace" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TArgument1" />
              <template name="TArgument2" />
              <template name="TArgument3" />
            </templates>
            <parameters>
              <parameter name="formatProvider">
                <type api="T:System.IFormatProvider" ref="true" />
              </parameter>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="argument1">
                <template name="TArgument1" index="0" api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument2">
                <template name="TArgument2" index="1" api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
              <parameter name="argument3">
                <template name="TArgument3" index="2" api="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:NLog" />
              <type api="T:NLog.Logger" ref="true" />
            </containers>
            <attributes>
              <attribute>
                <type api="T:JetBrains.Annotations.StringFormatMethodAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>message</value>
                </argument>
              </attribute>
              <attribute>
                <type api="T:System.Diagnostics.ConditionalAttribute" ref="true" />
                <argument>
                  <type api="T:System.String" ref="true" />
                  <value>DEBUG</value>
                </argument>
              </attribute>
            </attributes>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Checkpoint">
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
        </element>
        <element api="Overload:Symbiote.Core.xLogger.EnterMethod">
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Boolean,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)" />
        </element>
        <element api="Overload:Symbiote.Core.xLogger.Exception">
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
        </element>
        <element api="Overload:Symbiote.Core.xLogger.ExitMethod">
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Guid,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)" />
        </element>
        <element api="M:Symbiote.Core.xLogger.GetCallingStackFrame" />
        <element api="M:Symbiote.Core.xLogger.GetColloquialTypeName(System.Type)" />
        <element api="M:Symbiote.Core.xLogger.GetExceptionSerialization(System.Exception)" />
        <element api="M:Symbiote.Core.xLogger.GetInvertedStackExcerpt" />
        <element api="M:Symbiote.Core.xLogger.GetMethodSignature(System.Reflection.MethodBase)" />
        <element api="M:Symbiote.Core.xLogger.GetObjectSerialization(System.Object)" />
        <element api="M:Symbiote.Core.xLogger.Heading(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogExecutionDuration(NLog.LogLevel,System.String,System.Guid,System.Boolean,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogFooter(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogHeader(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogInnerSeparator(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogOuterSeparator(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogStackTrace(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.LogVariables(NLog.LogLevel,System.Object[],System.String[],System.String)" />
        <element api="Overload:Symbiote.Core.xLogger.Multiline">
          <element api="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String)" />
          <element api="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String[])" />
        </element>
        <element api="Overload:Symbiote.Core.xLogger.MultilineWrapped">
          <element api="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String)" />
          <element api="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String[])" />
        </element>
        <element api="M:Symbiote.Core.xLogger.Names(System.String[])" />
        <element api="M:Symbiote.Core.xLogger.Params(System.Object[])" />
        <element api="M:Symbiote.Core.xLogger.PrunePersistedMethods(System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Separator(NLog.LogLevel)" />
        <element api="Overload:Symbiote.Core.xLogger.StackTrace">
          <element api="M:Symbiote.Core.xLogger.StackTrace(System.String,System.String,System.Int32)" />
          <element api="M:Symbiote.Core.xLogger.StackTrace(NLog.LogLevel,System.String,System.String,System.Int32)" />
        </element>
        <element api="M:Symbiote.Core.xLogger.SubHeading(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.SubSubHeading(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.xLogger">
      <topicdata name="xLogger" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.xLogger" />
      <apidata name="xLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:NLog.Logger.Name">
          <apidata name="Name" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" set-visibility="private" />
          <getter name="get_Name" />
          <setter name="set_Name" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <implements>
            <member api="P:NLog.ILoggerBase.Name">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.Factory">
          <apidata name="Factory" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" set-visibility="private" />
          <getter name="get_Factory" />
          <setter name="set_Factory" />
          <returns>
            <type api="T:NLog.LogFactory" ref="true" />
          </returns>
          <implements>
            <member api="P:NLog.ILoggerBase.Factory">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsTraceEnabled">
          <apidata name="IsTraceEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsTraceEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsTraceEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsDebugEnabled">
          <apidata name="IsDebugEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsDebugEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsDebugEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsInfoEnabled">
          <apidata name="IsInfoEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsInfoEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsInfoEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsWarnEnabled">
          <apidata name="IsWarnEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsWarnEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsWarnEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsErrorEnabled">
          <apidata name="IsErrorEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsErrorEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsErrorEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:NLog.Logger.IsFatalEnabled">
          <apidata name="IsFatalEnabled" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_IsFatalEnabled" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <implements>
            <member api="P:NLog.ILogger.IsFatalEnabled">
              <type api="T:NLog.ILogger" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="P:Symbiote.Core.xLogger.PersistedMethods" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" />
      </containers>
    </api>
    <api id="Events.T:Symbiote.Core.xLogger">
      <topicdata name="xLogger" group="list" subgroup="Events" typeTopicId="T:Symbiote.Core.xLogger" />
      <apidata name="xLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:NLog.Logger.LoggerReconfigured">
          <apidata name="LoggerReconfigured" group="member" subgroup="event" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <eventdata add="true" remove="true" />
          <adder name="add_LoggerReconfigured" />
          <remover name="remove_LoggerReconfigured" />
          <eventhandler>
            <type api="T:System.EventHandler`1" ref="true">
              <specialization>
                <type api="T:System.EventArgs" ref="true" />
              </specialization>
            </type>
          </eventhandler>
          <eventargs>
            <type api="T:System.EventArgs" ref="true" />
          </eventargs>
          <implements>
            <member api="E:NLog.ILoggerBase.LoggerReconfigured">
              <type api="T:NLog.ILoggerBase" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.xLogger">
      <topicdata name="xLogger" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.xLogger" />
      <apidata name="xLogger" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:NLog.Logger.loggerType">
          <apidata name="loggerType" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="true" serialized="true" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.configuration">
          <apidata name="configuration" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:NLog.Internal.LoggerConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isTraceEnabled">
          <apidata name="isTraceEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isDebugEnabled">
          <apidata name="isDebugEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isInfoEnabled">
          <apidata name="isInfoEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isWarnEnabled">
          <apidata name="isWarnEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isErrorEnabled">
          <apidata name="isErrorEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:NLog.Logger.isFatalEnabled">
          <apidata name="isFatalEnabled" group="member" subgroup="field" />
          <memberdata visibility="private" />
          <fielddata literal="false" initonly="false" volatile="true" serialized="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="NLog" module="NLog" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:NLog" />
            <type api="T:NLog.Logger" ref="true" />
          </containers>
        </element>
        <element api="F:Symbiote.Core.xLogger.AutoPruneAge" />
        <element api="F:Symbiote.Core.xLogger.AutoPruneEnabled" />
        <element api="F:Symbiote.Core.xLogger.CheckpointPrefix" />
        <element api="F:Symbiote.Core.xLogger.EnterPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExceptionFooterPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExceptionHeaderPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExceptionLinePrefix" />
        <element api="F:Symbiote.Core.xLogger.ExceptionPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExecutionDurationPrefix" />
        <element api="F:Symbiote.Core.xLogger.ExitPrefix" />
        <element api="F:Symbiote.Core.xLogger.FinalLinePrefix" />
        <element api="F:Symbiote.Core.xLogger.Footer" />
        <element api="F:Symbiote.Core.xLogger.Header" />
        <element api="F:Symbiote.Core.xLogger.Indent" />
        <element api="F:Symbiote.Core.xLogger.InnerSeparator" />
        <element api="F:Symbiote.Core.xLogger.LinePrefix" />
        <element api="F:Symbiote.Core.xLogger.LinePrefixVariable" />
        <element api="F:Symbiote.Core.xLogger.OuterSeparator" />
        <element api="F:Symbiote.Core.xLogger.PersistedMethodListLock" />
        <element api="F:Symbiote.Core.xLogger.Prefix" />
        <element api="F:Symbiote.Core.xLogger.StackTracePrefix" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.xLogger.Checkpoint">
      <topicdata name="Checkpoint" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.xLogger.EnterMethod">
      <topicdata name="EnterMethod" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="EnterMethod" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.xLogger.EnterMethod(System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Boolean,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.xLogger.Exception">
      <topicdata name="Exception" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Exception" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.xLogger.ExitMethod">
      <topicdata name="ExitMethod" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ExitMethod" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.xLogger.ExitMethod(System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Guid,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.xLogger.Multiline">
      <topicdata name="Multiline" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Multiline" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.xLogger.MultilineWrapped">
      <topicdata name="MultilineWrapped" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="MultilineWrapped" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String)" />
        <element api="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.xLogger.StackTrace">
      <topicdata name="StackTrace" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="StackTrace" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.xLogger.StackTrace(System.String,System.String,System.Int32)" />
        <element api="M:Symbiote.Core.xLogger.StackTrace(NLog.LogLevel,System.String,System.String,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.AutoPruneAge">
      <topicdata group="api" />
      <apidata name="AutoPruneAge" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.AutoPruneEnabled">
      <topicdata group="api" />
      <apidata name="AutoPruneEnabled" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Checkpoint" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Checkpoint" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.CheckpointPrefix">
      <topicdata group="api" />
      <apidata name="CheckpointPrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.EnterMethod(System.Boolean,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="EnterMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.EnterMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="persist">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="EnterMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.EnterMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="persist">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="EnterMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.EnterMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameters">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.EnterMethod(System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="EnterMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.EnterMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Guid" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.EnterPrefix">
      <topicdata group="api" />
      <apidata name="EnterPrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Exception(System.Exception,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="Exception" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Exception" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.ExceptionFooterPrefix">
      <topicdata group="api" />
      <apidata name="ExceptionFooterPrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.ExceptionHeaderPrefix">
      <topicdata group="api" />
      <apidata name="ExceptionHeaderPrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.ExceptionLinePrefix">
      <topicdata group="api" />
      <apidata name="ExceptionLinePrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.ExceptionPrefix">
      <topicdata group="api" />
      <apidata name="ExceptionPrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.ExecutionDurationPrefix">
      <topicdata group="api" />
      <apidata name="ExecutionDurationPrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.ExitMethod(System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="ExitMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.ExitMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="ExitMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.ExitMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="returnValue">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="ExitMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.ExitMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="returnValue">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.ExitMethod(System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="ExitMethod" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.ExitMethod" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.ExitPrefix">
      <topicdata group="api" />
      <apidata name="ExitPrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.FinalLinePrefix">
      <topicdata group="api" />
      <apidata name="FinalLinePrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.Footer">
      <topicdata group="api" />
      <apidata name="Footer" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.GetCallingStackFrame">
      <topicdata group="api" />
      <apidata name="GetCallingStackFrame" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Diagnostics.StackFrame" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.GetColloquialTypeName(System.Type)">
      <topicdata group="api" />
      <apidata name="GetColloquialTypeName" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.GetExceptionSerialization(System.Exception)">
      <topicdata group="api" />
      <apidata name="GetExceptionSerialization" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="exception">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.GetInvertedStackExcerpt">
      <topicdata group="api" />
      <apidata name="GetInvertedStackExcerpt" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.Diagnostics.StackFrame" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.GetMethodSignature(System.Reflection.MethodBase)">
      <topicdata group="api" />
      <apidata name="GetMethodSignature" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="methodBase" optional="true">
          <type api="T:System.Reflection.MethodBase" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.GetObjectSerialization(System.Object)">
      <topicdata group="api" />
      <apidata name="GetObjectSerialization" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.Header">
      <topicdata group="api" />
      <apidata name="Header" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Heading(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="Heading" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.Indent">
      <topicdata group="api" />
      <apidata name="Indent" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.InnerSeparator">
      <topicdata group="api" />
      <apidata name="InnerSeparator" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.LinePrefix">
      <topicdata group="api" />
      <apidata name="LinePrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.LinePrefixVariable">
      <topicdata group="api" />
      <apidata name="LinePrefixVariable" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.LogExecutionDuration(NLog.LogLevel,System.String,System.Guid,System.Boolean,System.String)">
      <topicdata group="api" />
      <apidata name="LogExecutionDuration" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="guid">
          <type api="T:System.Guid" ref="false" />
        </parameter>
        <parameter name="remove" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
        <parameter name="prefix" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.LogFooter(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="LogFooter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="prefix" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.LogHeader(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="LogHeader" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="prefix" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.LogInnerSeparator(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="LogInnerSeparator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="prefix" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.LogOuterSeparator(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="LogOuterSeparator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="prefix" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.LogStackTrace(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="LogStackTrace" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="prefix" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.LogVariables(NLog.LogLevel,System.Object[],System.String[],System.String)">
      <topicdata group="api" />
      <apidata name="LogVariables" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="variables">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="variableNames" optional="true">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="prefix" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="Multiline" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Multiline" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String[])">
      <topicdata group="api" />
      <apidata name="Multiline" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.Multiline" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="MultilineWrapped" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.MultilineWrapped" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String[])">
      <topicdata group="api" />
      <apidata name="MultilineWrapped" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.MultilineWrapped" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Names(System.String[])">
      <topicdata group="api" />
      <apidata name="Names" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="names" params="true">
          <arrayOf rank="1">
            <type api="T:System.String" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.String" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.OuterSeparator">
      <topicdata group="api" />
      <apidata name="OuterSeparator" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Params(System.Object[])">
      <topicdata group="api" />
      <apidata name="Params" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parameters" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.PersistedMethodListLock">
      <topicdata group="api" />
      <apidata name="PersistedMethodListLock" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.xLogger.PersistedMethods">
      <topicdata group="api" />
      <apidata name="PersistedMethods" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PersistedMethods" />
      <setter name="set_PersistedMethods" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <type api="T:System.Guid" ref="false" />
                <type api="T:System.DateTime" ref="false" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.Prefix">
      <topicdata group="api" />
      <apidata name="Prefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.PrunePersistedMethods(System.Int32)">
      <topicdata group="api" />
      <apidata name="PrunePersistedMethods" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="age">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Separator(NLog.LogLevel)">
      <topicdata group="api" />
      <apidata name="Separator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.StackTrace(NLog.LogLevel,System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="StackTrace" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.StackTrace" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.StackTrace(System.String,System.String,System.Int32)">
      <topicdata group="api" />
      <apidata name="StackTrace" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.xLogger.StackTrace" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="filePath" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerFilePathAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
        <parameter name="lineNumber" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.xLogger.StackTracePrefix">
      <topicdata group="api" />
      <apidata name="StackTracePrefix" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.SubHeading(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="SubHeading" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.SubSubHeading(NLog.LogLevel,System.String)">
      <topicdata group="api" />
      <apidata name="SubSubHeading" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="level">
          <type api="T:NLog.LogLevel" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.Vars(System.Object[])">
      <topicdata group="api" />
      <apidata name="Vars" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="variables" params="true">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Object" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.xLogger.ExcludedParam">
      <topicdata group="api" />
      <apidata name="ExcludedParam" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.xLogger.ExcludedParam.#ctor" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.xLogger.ExcludedParam">
      <topicdata name="ExcludedParam" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.xLogger.ExcludedParam" />
      <apidata name="ExcludedParam" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger.ExcludedParam" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.ExcludedParam.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger.ExcludedParam" ref="true">
          <type api="T:Symbiote.Core.xLogger" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:Symbiote.Core.xLogger.UnspecifiedReturnValue">
      <topicdata group="api" />
      <apidata name="UnspecifiedReturnValue" group="type" subgroup="class" />
      <typedata visibility="private" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.xLogger.UnspecifiedReturnValue.#ctor" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.xLogger.UnspecifiedReturnValue">
      <topicdata name="UnspecifiedReturnValue" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.xLogger.UnspecifiedReturnValue" />
      <apidata name="UnspecifiedReturnValue" group="type" subgroup="class" />
      <typedata visibility="private" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger.UnspecifiedReturnValue" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.xLogger.UnspecifiedReturnValue.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core" />
        <type api="T:Symbiote.Core.xLogger.UnspecifiedReturnValue" ref="true">
          <type api="T:Symbiote.Core.xLogger" ref="true" />
        </type>
      </containers>
    </api>
    <api id="N:Symbiote.Core.Configuration">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Configuration" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Configuration.IConfigurable`1" />
        <element api="T:Symbiote.Core.Configuration.ConfigurationDefinition" />
        <element api="T:Symbiote.Core.Configuration.ConfigurationManager" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Configuration.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor">
          <element api="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor(System.String,System.String,System.Type)" />
        </element>
        <element api="P:Symbiote.Core.Configuration.ConfigurationDefinition.Form" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationDefinition.Model" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationDefinition.Schema" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Configuration.ConfigurationDefinition">
      <topicdata name="ConfigurationDefinition" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Configuration.ConfigurationDefinition" />
      <apidata name="ConfigurationDefinition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Configuration.ConfigurationDefinition">
      <topicdata name="ConfigurationDefinition" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Configuration.ConfigurationDefinition" />
      <apidata name="ConfigurationDefinition" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Configuration.ConfigurationDefinition.Form" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationDefinition.Model" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationDefinition.Schema" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" allMembersTopicId="" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor(System.String,System.String,System.Type)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor(System.String,System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor" />
      <parameters>
        <parameter name="form">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="schema">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="model">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.ConfigurationDefinition.Form">
      <topicdata group="api" />
      <apidata name="Form" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Form" />
      <setter name="set_Form" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.ConfigurationDefinition.Model">
      <topicdata group="api" />
      <apidata name="Model" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Model" />
      <setter name="set_Model" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.ConfigurationDefinition.Schema">
      <topicdata group="api" />
      <apidata name="Schema" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Schema" />
      <setter name="set_Schema" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Configuration.ConfigurationManager">
      <topicdata group="api" />
      <apidata name="ConfigurationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.#ctor(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.#cctor" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.BuildNewConfiguration" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.Configuration" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.ConfigurationFileName" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileDrive" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileName" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="F:Symbiote.Core.Configuration.ConfigurationManager.instance" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigurable(System.Type)" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsRegistered(System.Type)" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration(System.String)" />
        </element>
        <element api="F:Symbiote.Core.Configuration.ConfigurationManager.logger" />
        <element api="F:Symbiote.Core.Configuration.ConfigurationManager.manager" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.MoveConfigurationFile(System.String)" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.RegisteredTypes" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.RegisterType">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,System.Boolean)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,Symbiote.Core.Configuration.ConfigurationDefinition,System.Collections.Generic.Dictionary{System.Type,Symbiote.Core.Configuration.ConfigurationDefinition})" />
        </element>
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Restart" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SetConfigurationFileName(System.String)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Start" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.State" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Stop" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Configuration.ConfigurationManager">
      <topicdata name="ConfigurationManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Configuration.ConfigurationManager" />
      <apidata name="ConfigurationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.BuildNewConfiguration" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileDrive" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileName" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigurable(System.Type)" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsRegistered(System.Type)" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration(System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.MoveConfigurationFile(System.String)" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.RegisterType">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,System.Boolean)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,Symbiote.Core.Configuration.ConfigurationDefinition,System.Collections.Generic.Dictionary{System.Type,Symbiote.Core.Configuration.ConfigurationDefinition})" />
        </element>
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Restart" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SetConfigurationFileName(System.String)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Start" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.Stop" />
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.String)" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration">
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration" />
          <element api="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Configuration.ConfigurationManager">
      <topicdata name="ConfigurationManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Configuration.ConfigurationManager" />
      <apidata name="ConfigurationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.Configuration" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.ConfigurationFileName" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.RegisteredTypes" />
        <element api="P:Symbiote.Core.Configuration.ConfigurationManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Configuration.ConfigurationManager">
      <topicdata name="ConfigurationManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Configuration.ConfigurationManager" />
      <apidata name="ConfigurationManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Configuration.ConfigurationManager.instance" />
        <element api="F:Symbiote.Core.Configuration.ConfigurationManager.logger" />
        <element api="F:Symbiote.Core.Configuration.ConfigurationManager.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration">
      <topicdata name="AddInstanceConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="AddInstanceConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.String)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration">
      <topicdata name="GetInstanceConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="GetInstanceConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.String)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured">
      <topicdata name="IsConfigured" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="IsConfigured" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.String)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration">
      <topicdata name="LoadConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LoadConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.RegisterType">
      <topicdata name="RegisterType" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="RegisterType" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,System.Boolean)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,Symbiote.Core.Configuration.ConfigurationDefinition,System.Collections.Generic.Dictionary{System.Type,Symbiote.Core.Configuration.ConfigurationDefinition})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration">
      <topicdata name="RemoveInstanceConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="RemoveInstanceConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.String)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration">
      <topicdata name="SaveConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration">
      <topicdata name="UpdateInstanceConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="UpdateInstanceConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.String)" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration">
      <topicdata name="ValidateConfiguration" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ValidateConfiguration" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration" />
        <element api="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.#ctor(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <topicdata group="api" />
      <apidata name="AddInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceConfiguration">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.String)">
      <topicdata group="api" />
      <apidata name="AddInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceConfiguration">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.BuildNewConfiguration">
      <topicdata group="api" />
      <apidata name="BuildNewConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.Type" ref="true" />
                <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.ConfigurationManager.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.Type" ref="true" />
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.ConfigurationManager.ConfigurationFileName">
      <topicdata group="api" />
      <apidata name="ConfigurationFileName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ConfigurationFileName" />
      <setter name="set_ConfigurationFileName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileDrive">
      <topicdata group="api" />
      <apidata name="GetConfigurationFileDrive" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileName">
      <topicdata group="api" />
      <apidata name="GetConfigurationFileName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <topicdata group="api" />
      <apidata name="GetInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="GetInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.String)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Configuration.ConfigurationManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.Instance(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigurable(System.Type)">
      <topicdata group="api" />
      <apidata name="IsConfigurable" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <topicdata group="api" />
      <apidata name="IsConfigured" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="IsConfigured" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.IsRegistered(System.Type)">
      <topicdata group="api" />
      <apidata name="IsRegistered" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Boolean" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration">
      <topicdata group="api" />
      <apidata name="LoadConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.Type" ref="true" />
                <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration(System.String)">
      <topicdata group="api" />
      <apidata name="LoadConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.Type" ref="true" />
                <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Configuration.ConfigurationManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Configuration.ConfigurationManager.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.MoveConfigurationFile(System.String)">
      <topicdata group="api" />
      <apidata name="MoveConfigurationFile" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="newFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.ConfigurationManager.RegisteredTypes">
      <topicdata group="api" />
      <apidata name="RegisteredTypes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_RegisteredTypes" />
      <setter name="set_RegisteredTypes" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.Type" ref="true" />
            <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,Symbiote.Core.Configuration.ConfigurationDefinition,System.Collections.Generic.Dictionary{System.Type,Symbiote.Core.Configuration.ConfigurationDefinition})">
      <topicdata group="api" />
      <apidata name="RegisterType" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.RegisterType" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="definition">
          <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
        </parameter>
        <parameter name="registeredTypes">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,System.Boolean)">
      <topicdata group="api" />
      <apidata name="RegisterType" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.RegisterType" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="throwExceptionOnFailure" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <topicdata group="api" />
      <apidata name="RemoveInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.String)">
      <topicdata group="api" />
      <apidata name="RemoveInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.SetConfigurationFileName(System.String)">
      <topicdata group="api" />
      <apidata name="SetConfigurationFileName" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.ConfigurationManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <topicdata group="api" />
      <apidata name="UpdateInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceConfiguration">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.String)">
      <topicdata group="api" />
      <apidata name="UpdateInstanceConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceConfiguration">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="instanceName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration">
      <topicdata group="api" />
      <apidata name="ValidateConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})">
      <topicdata group="api" />
      <apidata name="ValidateConfiguration" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configuration">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Type" ref="true" />
              <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Configuration.IConfigurable`1">
      <topicdata group="api" />
      <apidata name="IConfigurable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <implementors>
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </implementors>
      <elements>
        <element api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration" />
        <element api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition" />
        <element api="Overload:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <element api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure" />
          <element api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Configuration.IConfigurable`1">
      <topicdata name="IConfigurable" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Configuration.IConfigurable`1" />
      <apidata name="IConfigurable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="Overload:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <element api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure" />
          <element api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)" />
        </element>
        <element api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Configuration.IConfigurable`1">
      <topicdata name="IConfigurable" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Configuration.IConfigurable`1" />
      <apidata name="IConfigurable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration" />
        <element api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Configuration.IConfigurable`1.Configure">
      <topicdata name="Configure" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Configure" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure" />
        <element api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Configuration" />
      <returns>
        <template name="T" index="0" api="T:Symbiote.Core.Configuration.IConfigurable`1" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.IConfigurable`1.Configure" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Configuration.IConfigurable`1.Configure" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="configuration">
          <template name="T" index="0" api="T:Symbiote.Core.Configuration.IConfigurable`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Configuration" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Model">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Model" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Model.ModelManagerConfiguration" />
        <element api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" />
        <element api="T:Symbiote.Core.Model.ModelBuildResult" />
        <element api="T:Symbiote.Core.Model.ModelManager" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Model.ModelBuildResult">
      <topicdata group="api" />
      <apidata name="ModelBuildResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Result" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Symbiote.Core.Result.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)" />
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Model.ModelBuildResult.LogAllMessages">
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelBuildResult.LogResult">
          <element api="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Model.ModelBuildResult.#ctor" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.DeferredList" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.Dictionary" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.Model" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.ResolvedList" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.UnresolvedList" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Model.ModelBuildResult">
      <topicdata name="ModelBuildResult" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Model.ModelBuildResult" />
      <apidata name="ModelBuildResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Result.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)" />
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Model.ModelBuildResult.LogAllMessages">
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelBuildResult.LogResult">
          <element api="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Model.ModelBuildResult">
      <topicdata name="ModelBuildResult" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Model.ModelBuildResult" />
      <apidata name="ModelBuildResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.DeferredList" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.Dictionary" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.Model" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.ResolvedList" />
        <element api="P:Symbiote.Core.Model.ModelBuildResult.UnresolvedList" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelBuildResult.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelBuildResult.DeferredList">
      <topicdata group="api" />
      <apidata name="DeferredList" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DeferredList" />
      <setter name="set_DeferredList" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelBuildResult.Dictionary">
      <topicdata group="api" />
      <apidata name="Dictionary" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Dictionary" />
      <setter name="set_Dictionary" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelBuildResult.Model">
      <topicdata group="api" />
      <apidata name="Model" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Model" />
      <setter name="set_Model" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelBuildResult.ResolvedList">
      <topicdata group="api" />
      <apidata name="ResolvedList" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ResolvedList" />
      <setter name="set_ResolvedList" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelBuildResult.UnresolvedList">
      <topicdata group="api" />
      <apidata name="UnresolvedList" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UnresolvedList" />
      <setter name="set_UnresolvedList" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Model.ModelManager">
      <topicdata group="api" />
      <apidata name="ModelManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.#ctor(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Model.ModelManager.#cctor" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.AddItem">
          <element api="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item)" />
          <element api="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.AttachItem(Symbiote.Core.Item,Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Model.ModelManager.AttachModel(Symbiote.Core.Model.ModelBuildResult)" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.BuildModel">
          <element api="M:Symbiote.Core.Model.ModelManager.BuildModel" />
          <element api="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem})" />
          <element api="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem},Symbiote.Core.Model.ModelBuildResult,System.Int32)" />
        </element>
        <element api="P:Symbiote.Core.Model.ModelManager.Configuration" />
        <element api="P:Symbiote.Core.Model.ModelManager.ConfigurationDefinition" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.Configure">
          <element api="M:Symbiote.Core.Model.ModelManager.Configure" />
          <element api="M:Symbiote.Core.Model.ModelManager.Configure(Symbiote.Core.Model.ModelManagerConfiguration)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelManager.CopyItem">
          <element api="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.String)" />
          <element api="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)" />
        </element>
        <element api="P:Symbiote.Core.Model.ModelManager.Dictionary" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.FindItem">
          <element api="M:Symbiote.Core.Model.ModelManager.FindItem(System.String)" />
          <element api="M:Symbiote.Core.Model.ModelManager.FindItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Model.ModelManager.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Model.ModelManager.GetItemNameFromItemFQN(System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.GetParentFQNFromItemFQN(System.String)" />
        <element api="F:Symbiote.Core.Model.ModelManager.instance" />
        <element api="M:Symbiote.Core.Model.ModelManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="F:Symbiote.Core.Model.ModelManager.logger" />
        <element api="F:Symbiote.Core.Model.ModelManager.manager" />
        <element api="P:Symbiote.Core.Model.ModelManager.Model" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.MoveItem">
          <element api="M:Symbiote.Core.Model.ModelManager.MoveItem(Symbiote.Core.Item,System.String)" />
          <element api="M:Symbiote.Core.Model.ModelManager.MoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelManager.RemoveItem">
          <element api="M:Symbiote.Core.Model.ModelManager.RemoveItem(Symbiote.Core.Item)" />
          <element api="M:Symbiote.Core.Model.ModelManager.RemoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.RenameItemInstance(Symbiote.Core.Item,System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.Restart" />
        <element api="M:Symbiote.Core.Model.ModelManager.SaveConfiguration" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.SaveModel">
          <element api="M:Symbiote.Core.Model.ModelManager.SaveModel" />
          <element api="M:Symbiote.Core.Model.ModelManager.SaveModel(Symbiote.Core.Item,Symbiote.Core.Result{System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem}})" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.Start" />
        <element api="P:Symbiote.Core.Model.ModelManager.State" />
        <element api="M:Symbiote.Core.Model.ModelManager.Stop" />
        <element api="M:Symbiote.Core.Model.ModelManager.UpdateItem(Symbiote.Core.Item,Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Model.ModelManager">
      <topicdata name="ModelManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Model.ModelManager" />
      <apidata name="ModelManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelManager.AddItem">
          <element api="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item)" />
          <element api="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.AttachItem(Symbiote.Core.Item,Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Model.ModelManager.AttachModel(Symbiote.Core.Model.ModelBuildResult)" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.BuildModel">
          <element api="M:Symbiote.Core.Model.ModelManager.BuildModel" />
          <element api="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem})" />
          <element api="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem},Symbiote.Core.Model.ModelBuildResult,System.Int32)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelManager.Configure">
          <element api="M:Symbiote.Core.Model.ModelManager.Configure" />
          <element api="M:Symbiote.Core.Model.ModelManager.Configure(Symbiote.Core.Model.ModelManagerConfiguration)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelManager.CopyItem">
          <element api="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.String)" />
          <element api="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelManager.FindItem">
          <element api="M:Symbiote.Core.Model.ModelManager.FindItem(System.String)" />
          <element api="M:Symbiote.Core.Model.ModelManager.FindItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Model.ModelManager.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Model.ModelManager.GetItemNameFromItemFQN(System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.GetParentFQNFromItemFQN(System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.MoveItem">
          <element api="M:Symbiote.Core.Model.ModelManager.MoveItem(Symbiote.Core.Item,System.String)" />
          <element api="M:Symbiote.Core.Model.ModelManager.MoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Model.ModelManager.RemoveItem">
          <element api="M:Symbiote.Core.Model.ModelManager.RemoveItem(Symbiote.Core.Item)" />
          <element api="M:Symbiote.Core.Model.ModelManager.RemoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.RenameItemInstance(Symbiote.Core.Item,System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.Restart" />
        <element api="M:Symbiote.Core.Model.ModelManager.SaveConfiguration" />
        <element api="Overload:Symbiote.Core.Model.ModelManager.SaveModel">
          <element api="M:Symbiote.Core.Model.ModelManager.SaveModel" />
          <element api="M:Symbiote.Core.Model.ModelManager.SaveModel(Symbiote.Core.Item,Symbiote.Core.Result{System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem}})" />
        </element>
        <element api="M:Symbiote.Core.Model.ModelManager.Start" />
        <element api="M:Symbiote.Core.Model.ModelManager.Stop" />
        <element api="M:Symbiote.Core.Model.ModelManager.UpdateItem(Symbiote.Core.Item,Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Model.ModelManager">
      <topicdata name="ModelManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Model.ModelManager" />
      <apidata name="ModelManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Model.ModelManager.Configuration" />
        <element api="P:Symbiote.Core.Model.ModelManager.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Model.ModelManager.Dictionary" />
        <element api="P:Symbiote.Core.Model.ModelManager.Model" />
        <element api="P:Symbiote.Core.Model.ModelManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Model.ModelManager">
      <topicdata name="ModelManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Model.ModelManager" />
      <apidata name="ModelManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Model.ModelManager.instance" />
        <element api="F:Symbiote.Core.Model.ModelManager.logger" />
        <element api="F:Symbiote.Core.Model.ModelManager.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.AddItem">
      <topicdata name="AddItem" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="AddItem" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.BuildModel">
      <topicdata name="BuildModel" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="BuildModel" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.BuildModel" />
        <element api="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem})" />
        <element api="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem},Symbiote.Core.Model.ModelBuildResult,System.Int32)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.Configure">
      <topicdata name="Configure" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Configure" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.Configure" />
        <element api="M:Symbiote.Core.Model.ModelManager.Configure(Symbiote.Core.Model.ModelManagerConfiguration)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.CopyItem">
      <topicdata name="CopyItem" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="CopyItem" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.FindItem">
      <topicdata name="FindItem" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="FindItem" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.FindItem(System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.FindItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.MoveItem">
      <topicdata name="MoveItem" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="MoveItem" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.MoveItem(Symbiote.Core.Item,System.String)" />
        <element api="M:Symbiote.Core.Model.ModelManager.MoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.RemoveItem">
      <topicdata name="RemoveItem" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="RemoveItem" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.RemoveItem(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Model.ModelManager.RemoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Model.ModelManager.SaveModel">
      <topicdata name="SaveModel" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="SaveModel" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Model.ModelManager.SaveModel" />
        <element api="M:Symbiote.Core.Model.ModelManager.SaveModel(Symbiote.Core.Item,Symbiote.Core.Result{System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem}})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.#ctor(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="AddItem" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.AddItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="AddItem" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.AddItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="model">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:Symbiote.Core.Item" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.AttachItem(Symbiote.Core.Item,Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="AttachItem" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="parentItem">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.AttachModel(Symbiote.Core.Model.ModelBuildResult)">
      <topicdata group="api" />
      <apidata name="AttachModel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="modelBuildResult">
          <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.BuildModel">
      <topicdata group="api" />
      <apidata name="BuildModel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.BuildModel" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem})">
      <topicdata group="api" />
      <apidata name="BuildModel" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.BuildModel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="itemList">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem},Symbiote.Core.Model.ModelBuildResult,System.Int32)">
      <topicdata group="api" />
      <apidata name="BuildModel" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.BuildModel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="itemList">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="result">
          <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
        </parameter>
        <parameter name="depth" optional="true">
          <type api="T:System.Int32" ref="false" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Model.ModelBuildResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManager.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManager.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.Configure">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.Configure(Symbiote.Core.Model.ModelManagerConfiguration)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="configuration">
          <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)">
      <topicdata group="api" />
      <apidata name="CopyItem" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.CopyItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="model">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:Symbiote.Core.Item" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.String)">
      <topicdata group="api" />
      <apidata name="CopyItem" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.CopyItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManager.Dictionary">
      <topicdata group="api" />
      <apidata name="Dictionary" group="member" subgroup="property" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Dictionary" />
      <setter name="set_Dictionary" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.FindItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},System.String)">
      <topicdata group="api" />
      <apidata name="FindItem" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.FindItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:Symbiote.Core.Item" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.FindItem(System.String)">
      <topicdata group="api" />
      <apidata name="FindItem" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.FindItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.GetConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="GetConfigurationDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.GetDefaultConfiguration">
      <topicdata group="api" />
      <apidata name="GetDefaultConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.GetItemNameFromItemFQN(System.String)">
      <topicdata group="api" />
      <apidata name="GetItemNameFromItemFQN" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemFQN">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.GetParentFQNFromItemFQN(System.String)">
      <topicdata group="api" />
      <apidata name="GetParentFQNFromItemFQN" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemFQN">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Model.ModelManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.Instance(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Model.ModelManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Model.ModelManager.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManager.Model">
      <topicdata group="api" />
      <apidata name="Model" group="member" subgroup="property" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Model" />
      <setter name="set_Model" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.MoveItem(Symbiote.Core.Item,System.String)">
      <topicdata group="api" />
      <apidata name="MoveItem" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.MoveItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.MoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)">
      <topicdata group="api" />
      <apidata name="MoveItem" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.MoveItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:Symbiote.Core.Item" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.RemoveItem(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="RemoveItem" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.RemoveItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.RemoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="RemoveItem" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.RemoveItem" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:Symbiote.Core.Item" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.RenameItemInstance(Symbiote.Core.Item,System.String)">
      <topicdata group="api" />
      <apidata name="RenameItemInstance" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.SaveModel">
      <topicdata group="api" />
      <apidata name="SaveModel" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Model.ModelManager.SaveModel" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.SaveModel(Symbiote.Core.Item,Symbiote.Core.Result{System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem}})">
      <topicdata group="api" />
      <apidata name="SaveModel" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Model.ModelManager.SaveModel" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="itemRoot">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="configuration">
          <type api="T:Symbiote.Core.Result`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.List`1" ref="true">
                <specialization>
                  <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManager.UpdateItem(Symbiote.Core.Item,Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="UpdateItem" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="sourceItem">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Model.ModelManagerConfiguration">
      <topicdata group="api" />
      <apidata name="ModelManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Model.ModelManagerConfiguration.#ctor" />
        <element api="P:Symbiote.Core.Model.ModelManagerConfiguration.Items" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Model.ModelManagerConfiguration">
      <topicdata name="ModelManagerConfiguration" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Model.ModelManagerConfiguration" />
      <apidata name="ModelManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Model.ModelManagerConfiguration">
      <topicdata name="ModelManagerConfiguration" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Model.ModelManagerConfiguration" />
      <apidata name="ModelManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Model.ModelManagerConfiguration.Items" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManagerConfiguration.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManagerConfiguration.Items">
      <topicdata group="api" />
      <apidata name="Items" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Items" />
      <setter name="set_Items" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Model.ModelManagerConfigurationItem">
      <topicdata group="api" />
      <apidata name="ModelManagerConfigurationItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.ICloneable" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.#ctor" />
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Clone" />
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Equals(System.Object)" />
        <element api="P:Symbiote.Core.Model.ModelManagerConfigurationItem.FQN" />
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.GetHashCode" />
        <element api="P:Symbiote.Core.Model.ModelManagerConfigurationItem.SourceFQN" />
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.ToString" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Model.ModelManagerConfigurationItem">
      <topicdata name="ModelManagerConfigurationItem" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Model.ModelManagerConfigurationItem" />
      <apidata name="ModelManagerConfigurationItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Clone" />
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Equals(System.Object)" />
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.GetHashCode" />
        <element api="M:Symbiote.Core.Model.ModelManagerConfigurationItem.ToString" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Model.ModelManagerConfigurationItem">
      <topicdata name="ModelManagerConfigurationItem" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Model.ModelManagerConfigurationItem" />
      <apidata name="ModelManagerConfigurationItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Model.ModelManagerConfigurationItem.FQN" />
        <element api="P:Symbiote.Core.Model.ModelManagerConfigurationItem.SourceFQN" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManagerConfigurationItem.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.ICloneable.Clone">
          <type api="T:System.ICloneable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManagerConfigurationItem.FQN">
      <topicdata group="api" />
      <apidata name="FQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_FQN" />
      <setter name="set_FQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManagerConfigurationItem.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Model.ModelManagerConfigurationItem.SourceFQN">
      <topicdata group="api" />
      <apidata name="SourceFQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_SourceFQN" />
      <setter name="set_SourceFQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Model.ModelManagerConfigurationItem.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Model" />
        <type api="T:Symbiote.Core.Model.ModelManagerConfigurationItem" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Platform">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Platform" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Platform.Platform" />
        <element api="T:Symbiote.Core.Platform.PlatformDirectories" />
        <element api="T:Symbiote.Core.Platform.PlatformType" />
        <element api="T:Symbiote.Core.Platform.IPlatform" />
        <element api="T:Symbiote.Core.Platform.PlatformManager" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Platform.IPlatform">
      <topicdata group="api" />
      <apidata name="IPlatform" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </implementors>
      <elements>
        <element api="M:Symbiote.Core.Platform.IPlatform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ComputeFileChecksum(System.String)" />
        <element api="P:Symbiote.Core.Platform.IPlatform.Connector" />
        <element api="M:Symbiote.Core.Platform.IPlatform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.InstantiateConnector(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ListZipFiles(System.String,System.String)" />
        <element api="P:Symbiote.Core.Platform.IPlatform.PlatformType" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ReadFileLines(System.String)" />
        <element api="P:Symbiote.Core.Platform.IPlatform.Version" />
        <element api="M:Symbiote.Core.Platform.IPlatform.WriteFile(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.IPlatform">
      <topicdata name="IPlatform" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.IPlatform" />
      <apidata name="IPlatform" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Platform.IPlatform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ComputeFileChecksum(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.InstantiateConnector(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ListZipFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.ReadFileLines(System.String)" />
        <element api="M:Symbiote.Core.Platform.IPlatform.WriteFile(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.IPlatform">
      <topicdata name="IPlatform" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.IPlatform" />
      <apidata name="IPlatform" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.IPlatform.Connector" />
        <element api="P:Symbiote.Core.Platform.IPlatform.PlatformType" />
        <element api="P:Symbiote.Core.Platform.IPlatform.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ClearDirectory(System.String)">
      <topicdata group="api" />
      <apidata name="ClearDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ComputeFileChecksum(System.String)">
      <topicdata group="api" />
      <apidata name="ComputeFileChecksum" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.IPlatform.Connector">
      <topicdata group="api" />
      <apidata name="Connector" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Connector" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.CreateDirectory(System.String)">
      <topicdata group="api" />
      <apidata name="CreateDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.DeleteDirectory(System.String)">
      <topicdata group="api" />
      <apidata name="DeleteDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.DeleteFile(System.String)">
      <topicdata group="api" />
      <apidata name="DeleteFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.DirectoryExists(System.String)">
      <topicdata group="api" />
      <apidata name="DirectoryExists" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ExtractZip(System.String,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name="ExtractZip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="zipFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="destination">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="clearDestination" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name="ExtractZipFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="zipFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="destination">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="overwrite" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.FileExists(System.String)">
      <topicdata group="api" />
      <apidata name="FileExists" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.InstantiateConnector(System.String)">
      <topicdata group="api" />
      <apidata name="InstantiateConnector" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ListDirectories(System.String)">
      <topicdata group="api" />
      <apidata name="ListDirectories" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="parentDirectory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ListFiles(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ListFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="parentDirectory">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ListZipFiles(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ListZipFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="zipFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.IPlatform.PlatformType">
      <topicdata group="api" />
      <apidata name="PlatformType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_PlatformType" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ReadFile(System.String)">
      <topicdata group="api" />
      <apidata name="ReadFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.ReadFileLines(System.String)">
      <topicdata group="api" />
      <apidata name="ReadFileLines" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <arrayOf rank="1">
              <type api="T:System.String" ref="true" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.IPlatform.Version">
      <topicdata group="api" />
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.IPlatform.WriteFile(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="WriteFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="contents">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Platform.Platform">
      <topicdata group="api" />
      <apidata name="Platform" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatform" ref="true" />
          <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.Platform.#ctor" />
        <element api="M:Symbiote.Core.Platform.Platform.#cctor" />
        <element api="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.Connector" />
        <element api="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.InstantiateConnector(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)" />
        <element api="F:Symbiote.Core.Platform.Platform.logger" />
        <element api="P:Symbiote.Core.Platform.Platform.PlatformType" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.Version" />
        <element api="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.Platform">
      <topicdata name="Platform" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.Platform" />
      <apidata name="Platform" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.InstantiateConnector(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.Platform">
      <topicdata name="Platform" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.Platform" />
      <apidata name="Platform" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.Platform.Connector" />
        <element api="P:Symbiote.Core.Platform.Platform.PlatformType" />
        <element api="P:Symbiote.Core.Platform.Platform.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Platform.Platform">
      <topicdata name="Platform" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Platform.Platform" />
      <apidata name="Platform" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Platform.Platform.logger" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)">
      <topicdata group="api" />
      <apidata name="ClearDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ClearDirectory(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)">
      <topicdata group="api" />
      <apidata name="ComputeFileChecksum" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ComputeFileChecksum(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Platform.Connector">
      <topicdata group="api" />
      <apidata name="Connector" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_Connector" />
      <setter name="set_Connector" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Platform.IPlatform.Connector">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)">
      <topicdata group="api" />
      <apidata name="CreateDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.CreateDirectory(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)">
      <topicdata group="api" />
      <apidata name="DeleteDirectory" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.DeleteDirectory(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)">
      <topicdata group="api" />
      <apidata name="DeleteFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.DeleteFile(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)">
      <topicdata group="api" />
      <apidata name="DirectoryExists" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.DirectoryExists(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name="ExtractZip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="zipFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="destination">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="clearDestination" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ExtractZip(System.String,System.String,System.Boolean)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name="ExtractZipFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="zipFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="destination">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="overwrite" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.FileExists(System.String)">
      <topicdata group="api" />
      <apidata name="FileExists" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.FileExists(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.InstantiateConnector(System.String)">
      <topicdata group="api" />
      <apidata name="InstantiateConnector" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.InstantiateConnector(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)">
      <topicdata group="api" />
      <apidata name="ListDirectories" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parentDirectory">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ListDirectories(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ListFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="parentDirectory">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ListFiles(System.String,System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ListZipFiles" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="zipFile">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ListZipFiles(System.String,System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.Platform.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Platform.PlatformType">
      <topicdata group="api" />
      <apidata name="PlatformType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_PlatformType" />
      <setter name="set_PlatformType" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Platform.IPlatform.PlatformType">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)">
      <topicdata group="api" />
      <apidata name="ReadFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ReadFile(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)">
      <topicdata group="api" />
      <apidata name="ReadFileLines" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <arrayOf rank="1">
              <type api="T:System.String" ref="true" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.ReadFileLines(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Platform.Version">
      <topicdata group="api" />
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="family" />
      <getter name="get_Version" />
      <setter name="set_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Platform.IPlatform.Version">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="WriteFile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="file">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="contents">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.WriteFile(System.String,System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Platform.PlatformDirectories">
      <topicdata group="api" />
      <apidata name="PlatformDirectories" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.PlatformDirectories.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Archives" />
        <element api="M:Symbiote.Core.Platform.PlatformDirectories.CheckDirectories" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Data" />
        <element api="M:Symbiote.Core.Platform.PlatformDirectories.LoadDirectories(System.String)" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Logs" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Persistence" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Plugins" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Root" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Temp" />
        <element api="M:Symbiote.Core.Platform.PlatformDirectories.ToDictionary" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Web" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.PlatformDirectories">
      <topicdata name="PlatformDirectories" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.PlatformDirectories" />
      <apidata name="PlatformDirectories" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.PlatformDirectories.CheckDirectories" />
        <element api="M:Symbiote.Core.Platform.PlatformDirectories.LoadDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.PlatformDirectories.ToDictionary" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.PlatformDirectories">
      <topicdata name="PlatformDirectories" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.PlatformDirectories" />
      <apidata name="PlatformDirectories" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Archives" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Data" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Logs" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Persistence" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Plugins" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Root" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Temp" />
        <element api="P:Symbiote.Core.Platform.PlatformDirectories.Web" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformDirectories.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="directories">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Archives">
      <topicdata group="api" />
      <apidata name="Archives" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Archives" />
      <setter name="set_Archives" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformDirectories.CheckDirectories">
      <topicdata group="api" />
      <apidata name="CheckDirectories" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Data">
      <topicdata group="api" />
      <apidata name="Data" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Data" />
      <setter name="set_Data" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformDirectories.LoadDirectories(System.String)">
      <topicdata group="api" />
      <apidata name="LoadDirectories" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="directories">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Logs">
      <topicdata group="api" />
      <apidata name="Logs" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Logs" />
      <setter name="set_Logs" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Persistence">
      <topicdata group="api" />
      <apidata name="Persistence" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Persistence" />
      <setter name="set_Persistence" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Plugins">
      <topicdata group="api" />
      <apidata name="Plugins" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Plugins" />
      <setter name="set_Plugins" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Root">
      <topicdata group="api" />
      <apidata name="Root" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Root" />
      <setter name="set_Root" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Temp">
      <topicdata group="api" />
      <apidata name="Temp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Temp" />
      <setter name="set_Temp" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformDirectories.ToDictionary">
      <topicdata group="api" />
      <apidata name="ToDictionary" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformDirectories.Web">
      <topicdata group="api" />
      <apidata name="Web" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Web" />
      <setter name="set_Web" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Platform.PlatformManager">
      <topicdata group="api" />
      <apidata name="PlatformManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.PlatformManager.#ctor(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.#cctor" />
        <element api="P:Symbiote.Core.Platform.PlatformManager.Directories" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.GetDirectories" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.GetPlatformType" />
        <element api="F:Symbiote.Core.Platform.PlatformManager.instance" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="F:Symbiote.Core.Platform.PlatformManager.logger" />
        <element api="F:Symbiote.Core.Platform.PlatformManager.manager" />
        <element api="P:Symbiote.Core.Platform.PlatformManager.Platform" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Restart" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Start" />
        <element api="P:Symbiote.Core.Platform.PlatformManager.State" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.PlatformManager">
      <topicdata name="PlatformManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.PlatformManager" />
      <apidata name="PlatformManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.PlatformManager.GetDirectories" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.GetPlatformType" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Restart" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Start" />
        <element api="M:Symbiote.Core.Platform.PlatformManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.PlatformManager">
      <topicdata name="PlatformManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.PlatformManager" />
      <apidata name="PlatformManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.PlatformManager.Directories" />
        <element api="P:Symbiote.Core.Platform.PlatformManager.Platform" />
        <element api="P:Symbiote.Core.Platform.PlatformManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Platform.PlatformManager">
      <topicdata name="PlatformManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Platform.PlatformManager" />
      <apidata name="PlatformManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Platform.PlatformManager.instance" />
        <element api="F:Symbiote.Core.Platform.PlatformManager.logger" />
        <element api="F:Symbiote.Core.Platform.PlatformManager.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.#ctor(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformManager.Directories">
      <topicdata group="api" />
      <apidata name="Directories" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Directories" />
      <setter name="set_Directories" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformDirectories" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.GetDirectories">
      <topicdata group="api" />
      <apidata name="GetDirectories" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.GetPlatformType">
      <topicdata group="api" />
      <apidata name="GetPlatformType" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.PlatformManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.Instance(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.PlatformManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.PlatformManager.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformManager.Platform">
      <topicdata group="api" />
      <apidata name="Platform" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Platform" />
      <setter name="set_Platform" />
      <returns>
        <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.PlatformManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.PlatformManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Platform.PlatformType">
      <topicdata group="api" />
      <apidata name="PlatformType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Platform.PlatformType.Unknown" />
        <element api="F:Symbiote.Core.Platform.PlatformType.Windows" />
        <element api="F:Symbiote.Core.Platform.PlatformType.UNIX" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.PlatformType.UNIX">
      <topicdata group="api" notopic="" />
      <apidata name="UNIX" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.PlatformType.Unknown">
      <topicdata group="api" notopic="" />
      <apidata name="Unknown" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.PlatformType.Windows">
      <topicdata group="api" notopic="" />
      <apidata name="Windows" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform" />
        <type api="T:Symbiote.Core.Platform.PlatformType" ref="false" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Platform.UNIX">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Platform.UNIX" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" />
        <element api="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Platform.UNIX.UNIXPlatform">
      <topicdata group="api" />
      <apidata name="UNIXPlatform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.Connector" />
        <element api="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.PlatformType" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.Version" />
        <element api="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatform.#ctor" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatform.InstantiateConnector(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.UNIX.UNIXPlatform">
      <topicdata name="UNIXPlatform" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" />
      <apidata name="UNIXPlatform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatform.InstantiateConnector(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.UNIX.UNIXPlatform">
      <topicdata name="UNIXPlatform" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" />
      <apidata name="UNIXPlatform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.Platform.Connector" />
        <element api="P:Symbiote.Core.Platform.Platform.PlatformType" />
        <element api="P:Symbiote.Core.Platform.Platform.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatform.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatform.InstantiateConnector(System.String)">
      <topicdata group="api" />
      <apidata name="InstantiateConnector" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Symbiote.Core.Platform.Platform.InstantiateConnector(System.String)">
          <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.InstantiateConnector(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatform" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector">
      <topicdata group="api" />
      <apidata name="UNIXPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.#ctor(System.String)" />
        <element api="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse">
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse" />
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse(Symbiote.Core.Item)" />
        </element>
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Configuration" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.ConfigurationDefinition" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Configure(System.String)" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.cpuIdle" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.cpuUsed" />
        <element api="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find">
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(System.String)" />
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(Symbiote.Core.Item,System.String)" />
        </element>
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.FQN" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.InitializeItems" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.InstanceName" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.IsConfigured" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.itemRoot" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.lastCPUIdle" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.lastCPUUsed" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Name" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.PluginType" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Read(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Restart" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Start" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Stop" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Version" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Write(System.String,System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector">
      <topicdata name="UNIXPlatformConnector" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" />
      <apidata name="UNIXPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse">
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse" />
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse(Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Configure(System.String)" />
        <element api="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find">
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(System.String)" />
          <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(Symbiote.Core.Item,System.String)" />
        </element>
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.InitializeItems" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Read(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Restart" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Start" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Stop" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Write(System.String,System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector">
      <topicdata name="UNIXPlatformConnector" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" />
      <apidata name="UNIXPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Configuration" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.FQN" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.InstanceName" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.IsConfigured" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Name" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.PluginType" />
        <element api="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector">
      <topicdata name="UNIXPlatformConnector" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" />
      <apidata name="UNIXPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.cpuIdle" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.cpuUsed" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.itemRoot" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.lastCPUIdle" />
        <element api="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.lastCPUUsed" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse">
      <topicdata name="Browse" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Browse" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find">
      <topicdata name="Find" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Find" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(System.String)" />
        <element api="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(Symbiote.Core.Item,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Browse" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="root">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ConfigurationDefinition" />
      <setter name="set_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Configure(System.String)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configuration">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.cpuIdle">
      <topicdata group="api" />
      <apidata name="cpuIdle" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Diagnostics.PerformanceCounter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.cpuUsed">
      <topicdata group="api" />
      <apidata name="cpuUsed" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Diagnostics.PerformanceCounter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(Symbiote.Core.Item,System.String)">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="root">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find(System.String)">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Find" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Find(System.String)">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.FQN">
      <topicdata group="api" />
      <apidata name="FQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_FQN" />
      <setter name="set_FQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.FQN">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.InitializeItems">
      <topicdata group="api" />
      <apidata name="InitializeItems" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.InstanceName">
      <topicdata group="api" />
      <apidata name="InstanceName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_InstanceName" />
      <setter name="set_InstanceName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.IsConfigured">
      <topicdata group="api" />
      <apidata name="IsConfigured" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsConfigured" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.itemRoot">
      <topicdata group="api" />
      <apidata name="itemRoot" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.lastCPUIdle">
      <topicdata group="api" />
      <apidata name="lastCPUIdle" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.lastCPUUsed">
      <topicdata group="api" />
      <apidata name="lastCPUUsed" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Name">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.PluginType">
      <topicdata group="api" />
      <apidata name="PluginType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginType" />
      <setter name="set_PluginType" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.PluginType">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Read(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Read(Symbiote.Core.Item)">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.IPluginInstance.Restart">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.IPluginInstance.Start">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.IPluginInstance.Stop">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Version">
      <topicdata group="api" />
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Version" />
      <setter name="set_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Version">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector.Write(System.String,System.Object)">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.UNIX" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Platform.Windows">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Platform.Windows" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" />
        <element api="T:Symbiote.Core.Platform.Windows.WindowsPlatform" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Platform.Windows.WindowsPlatform">
      <topicdata group="api" />
      <apidata name="WindowsPlatform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.Connector" />
        <element api="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.PlatformType" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)" />
        <element api="P:Symbiote.Core.Platform.Platform.Version" />
        <element api="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatform.#ctor" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatform.InstantiateConnector(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.Windows.WindowsPlatform">
      <topicdata name="WindowsPlatform" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.Windows.WindowsPlatform" />
      <apidata name="WindowsPlatform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Platform.Platform.FileExists(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)" />
        <element api="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatform.InstantiateConnector(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatform" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.Windows.WindowsPlatform">
      <topicdata name="WindowsPlatform" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.Windows.WindowsPlatform" />
      <apidata name="WindowsPlatform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.Platform.Connector" />
        <element api="P:Symbiote.Core.Platform.Platform.PlatformType" />
        <element api="P:Symbiote.Core.Platform.Platform.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatform" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatform.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatform" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatform.InstantiateConnector(System.String)">
      <topicdata group="api" />
      <apidata name="InstantiateConnector" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Symbiote.Core.Platform.Platform.InstantiateConnector(System.String)">
          <type api="T:Symbiote.Core.Platform.Platform" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Platform.IPlatform.InstantiateConnector(System.String)">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatform" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector">
      <topicdata group="api" />
      <apidata name="WindowsPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.#ctor(System.String)" />
        <element api="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse">
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse" />
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse(Symbiote.Core.Item)" />
        </element>
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browseable" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Configuration" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.ConfigurationDefinition" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Configure(System.String)" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.cpuIdle" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.cpuUsed" />
        <element api="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find">
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(System.String)" />
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(Symbiote.Core.Item,System.String)" />
        </element>
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.FQN" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.InitializeItems" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.InstanceName" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.IsConfigured" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.itemRoot" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.lastCPUIdle" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.lastCPUUsed" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Name" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.PluginType" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Read(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Restart" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Start" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Stop" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Version" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Write(System.String,System.Object)" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Writeable" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector">
      <topicdata name="WindowsPlatformConnector" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" />
      <apidata name="WindowsPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse">
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse" />
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse(Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Configure(System.String)" />
        <element api="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find">
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(System.String)" />
          <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(Symbiote.Core.Item,System.String)" />
        </element>
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.InitializeItems" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Read(Symbiote.Core.Item)" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Restart" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Start" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Stop" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Write(System.String,System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector">
      <topicdata name="WindowsPlatformConnector" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" />
      <apidata name="WindowsPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browseable" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Configuration" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.FQN" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.InstanceName" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.IsConfigured" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Name" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.PluginType" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Version" />
        <element api="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Writeable" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector">
      <topicdata name="WindowsPlatformConnector" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" />
      <apidata name="WindowsPlatformConnector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.cpuIdle" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.cpuUsed" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.itemRoot" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.lastCPUIdle" />
        <element api="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.lastCPUUsed" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse">
      <topicdata name="Browse" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Browse" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find">
      <topicdata name="Find" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Find" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(System.String)" />
        <element api="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(Symbiote.Core.Item,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browse" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="root">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Browseable">
      <topicdata group="api" />
      <apidata name="Browseable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Browseable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ConfigurationDefinition" />
      <setter name="set_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Configure(System.String)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configuration">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.cpuIdle">
      <topicdata group="api" />
      <apidata name="cpuIdle" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Diagnostics.PerformanceCounter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.cpuUsed">
      <topicdata group="api" />
      <apidata name="cpuUsed" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Diagnostics.PerformanceCounter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(Symbiote.Core.Item,System.String)">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="root">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find(System.String)">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Find" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Find(System.String)">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.FQN">
      <topicdata group="api" />
      <apidata name="FQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_FQN" />
      <setter name="set_FQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.FQN">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.InitializeItems">
      <topicdata group="api" />
      <apidata name="InitializeItems" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.InstanceName">
      <topicdata group="api" />
      <apidata name="InstanceName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_InstanceName" />
      <setter name="set_InstanceName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.IsConfigured">
      <topicdata group="api" />
      <apidata name="IsConfigured" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsConfigured" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.itemRoot">
      <topicdata group="api" />
      <apidata name="itemRoot" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.lastCPUIdle">
      <topicdata group="api" />
      <apidata name="lastCPUIdle" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.lastCPUUsed">
      <topicdata group="api" />
      <apidata name="lastCPUUsed" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Name">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.PluginType">
      <topicdata group="api" />
      <apidata name="PluginType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginType" />
      <setter name="set_PluginType" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.PluginType">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Read(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.Connector.IConnector.Read(Symbiote.Core.Item)">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.IPluginInstance.Restart">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.IPluginInstance.Start">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Plugin.IPluginInstance.Stop">
          <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Version">
      <topicdata group="api" />
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Version" />
      <setter name="set_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Version">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Write(System.String,System.Object)">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Platform.Windows.WindowsPlatformConnector.Writeable">
      <topicdata group="api" />
      <apidata name="Writeable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Writeable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Platform.Windows" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Plugin">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Plugin" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Plugin.IEndpoint" />
        <element api="T:Symbiote.Core.Plugin.IPluginInstance" />
        <element api="T:Symbiote.Core.Plugin.Plugin" />
        <element api="T:Symbiote.Core.Plugin.PluginArchive" />
        <element api="T:Symbiote.Core.Plugin.InvalidPluginArchive" />
        <element api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" />
        <element api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" />
        <element api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" />
        <element api="T:Symbiote.Core.Plugin.PluginType" />
        <element api="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
        <element api="T:Symbiote.Core.Plugin.IPlugin" />
        <element api="T:Symbiote.Core.Plugin.PluginAuthorization" />
        <element api="T:Symbiote.Core.Plugin.PluginAssembly" />
        <element api="T:Symbiote.Core.Plugin.PluginManager" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Plugin.IEndpoint">
      <topicdata group="api" />
      <apidata name="IEndpoint" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </implements>
      <elements>
        <element api="M:Symbiote.Core.Plugin.IEndpoint.Send(System.Object)" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
        <element api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Restart" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Start" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.IEndpoint">
      <topicdata name="IEndpoint" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.IEndpoint" />
      <apidata name="IEndpoint" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.IEndpoint.Send(System.Object)" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Restart" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Start" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IEndpoint" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.IEndpoint">
      <topicdata name="IEndpoint" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.IEndpoint" />
      <apidata name="IEndpoint" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
        <element api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IEndpoint" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.IEndpoint.Send(System.Object)">
      <topicdata group="api" />
      <apidata name="Send" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IEndpoint" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.InvalidPluginArchive">
      <topicdata group="api" />
      <apidata name="InvalidPluginArchive" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.InvalidPluginArchive.#ctor(System.String,System.String)" />
        <element api="P:Symbiote.Core.Plugin.InvalidPluginArchive.Message" />
        <element api="P:Symbiote.Core.Plugin.PluginArchive.FileName" />
        <element api="P:Symbiote.Core.Plugin.PluginArchive.Plugin" />
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetFileName(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetPlugin(Symbiote.Core.Plugin.Plugin)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.InvalidPluginArchive">
      <topicdata name="InvalidPluginArchive" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.InvalidPluginArchive" />
      <apidata name="InvalidPluginArchive" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetFileName(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetPlugin(Symbiote.Core.Plugin.Plugin)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.InvalidPluginArchive" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.InvalidPluginArchive">
      <topicdata name="InvalidPluginArchive" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.InvalidPluginArchive" />
      <apidata name="InvalidPluginArchive" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.InvalidPluginArchive.Message" />
        <element api="P:Symbiote.Core.Plugin.PluginArchive.FileName" />
        <element api="P:Symbiote.Core.Plugin.PluginArchive.Plugin" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.InvalidPluginArchive" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.InvalidPluginArchive.#ctor(System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.InvalidPluginArchive" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.InvalidPluginArchive.Message">
      <topicdata group="api" />
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.InvalidPluginArchive" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.IPlugin">
      <topicdata group="api" />
      <apidata name="IPlugin" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Symbiote.Core.Plugin.IEndpoint" ref="true" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </implementors>
      <elements>
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.IPlugin">
      <topicdata name="IPlugin" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.IPlugin" />
      <apidata name="IPlugin" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.IPlugin.FQN">
      <topicdata group="api" />
      <apidata name="FQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_FQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.IPlugin.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.IPlugin.PluginType">
      <topicdata group="api" />
      <apidata name="PluginType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_PluginType" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.IPlugin.Version">
      <topicdata group="api" />
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.IPluginInstance">
      <topicdata group="api" />
      <apidata name="IPluginInstance" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </implements>
      <implementors>
        <type api="T:Symbiote.Core.Plugin.IEndpoint" ref="true" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </implementors>
      <elements>
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
        <element api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Restart" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Start" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.IPluginInstance">
      <topicdata name="IPluginInstance" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.IPluginInstance" />
      <apidata name="IPluginInstance" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Restart" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Start" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.IPluginInstance">
      <topicdata name="IPluginInstance" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.IPluginInstance" />
      <apidata name="IPluginInstance" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
        <element api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName">
      <topicdata group="api" />
      <apidata name="InstanceName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_InstanceName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.IPluginInstance.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.IPluginInstance.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.IPluginInstance.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Plugin">
      <topicdata group="api" />
      <apidata name="Plugin" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Plugin.#ctor(System.String,System.String,System.String,Symbiote.Core.Plugin.PluginType,System.String)" />
        <element api="M:Symbiote.Core.Plugin.Plugin.Equals(System.Object)" />
        <element api="P:Symbiote.Core.Plugin.Plugin.Fingerprint" />
        <element api="P:Symbiote.Core.Plugin.Plugin.FQN" />
        <element api="M:Symbiote.Core.Plugin.Plugin.GetHashCode" />
        <element api="P:Symbiote.Core.Plugin.Plugin.Name" />
        <element api="P:Symbiote.Core.Plugin.Plugin.PluginType" />
        <element api="M:Symbiote.Core.Plugin.Plugin.SetFingerprint(System.String)" />
        <element api="P:Symbiote.Core.Plugin.Plugin.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Plugin">
      <topicdata name="Plugin" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Plugin" />
      <apidata name="Plugin" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Plugin.Equals(System.Object)" />
        <element api="M:Symbiote.Core.Plugin.Plugin.GetHashCode" />
        <element api="M:Symbiote.Core.Plugin.Plugin.SetFingerprint(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Plugin">
      <topicdata name="Plugin" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Plugin" />
      <apidata name="Plugin" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Plugin.Fingerprint" />
        <element api="P:Symbiote.Core.Plugin.Plugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.Plugin.Name" />
        <element api="P:Symbiote.Core.Plugin.Plugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.Plugin.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Plugin.#ctor(System.String,System.String,System.String,Symbiote.Core.Plugin.PluginType,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="version">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="pluginType">
          <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
        </parameter>
        <parameter name="fingerprint">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Plugin.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Plugin.Fingerprint">
      <topicdata group="api" />
      <apidata name="Fingerprint" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Fingerprint" />
      <setter name="set_Fingerprint" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Plugin.FQN">
      <topicdata group="api" />
      <apidata name="FQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_FQN" />
      <setter name="set_FQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.FQN">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Plugin.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Plugin.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Name">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Plugin.PluginType">
      <topicdata group="api" />
      <apidata name="PluginType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginType" />
      <setter name="set_PluginType" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.PluginType">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Plugin.SetFingerprint(System.String)">
      <topicdata group="api" />
      <apidata name="SetFingerprint" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fingerprint">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Plugin.Version">
      <topicdata group="api" />
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Version" />
      <setter name="set_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Version">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginArchive">
      <topicdata group="api" />
      <apidata name="PluginArchive" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Symbiote.Core.Plugin.InvalidPluginArchive" ref="true" />
        </descendents>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginArchive.#ctor(System.String,System.String,Symbiote.Core.Plugin.Plugin)" />
        <element api="P:Symbiote.Core.Plugin.PluginArchive.FileName" />
        <element api="P:Symbiote.Core.Plugin.PluginArchive.Plugin" />
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetFileName(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetPlugin(Symbiote.Core.Plugin.Plugin)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.PluginArchive">
      <topicdata name="PluginArchive" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.PluginArchive" />
      <apidata name="PluginArchive" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetFileName(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginArchive.SetPlugin(Symbiote.Core.Plugin.Plugin)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchive" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.PluginArchive">
      <topicdata name="PluginArchive" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.PluginArchive" />
      <apidata name="PluginArchive" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.PluginArchive.FileName" />
        <element api="P:Symbiote.Core.Plugin.PluginArchive.Plugin" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchive" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginArchive.#ctor(System.String,System.String,Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="fileName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="checksum" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="plugin" optional="true">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginArchive.FileName">
      <topicdata group="api" />
      <apidata name="FileName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_FileName" />
      <setter name="set_FileName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginArchive.Plugin">
      <topicdata group="api" />
      <apidata name="Plugin" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Plugin" />
      <setter name="set_Plugin" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginArchive.SetFileName(System.String)">
      <topicdata group="api" />
      <apidata name="SetFileName" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginArchive.SetPlugin(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="SetPlugin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginArchiveLoadResult">
      <topicdata group="api" />
      <apidata name="PluginArchiveLoadResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Result" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Symbiote.Core.Result.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)" />
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Plugin.PluginArchiveLoadResult.LogAllMessages">
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginArchiveLoadResult.LogResult">
          <element api="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginArchiveLoadResult.#ctor" />
        <element api="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.InvalidArchives" />
        <element api="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.ValidArchives" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.PluginArchiveLoadResult">
      <topicdata name="PluginArchiveLoadResult" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" />
      <apidata name="PluginArchiveLoadResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Result.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)" />
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Plugin.PluginArchiveLoadResult.LogAllMessages">
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginArchiveLoadResult.LogResult">
          <element api="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.PluginArchiveLoadResult">
      <topicdata name="PluginArchiveLoadResult" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" />
      <apidata name="PluginArchiveLoadResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.InvalidArchives" />
        <element api="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.ValidArchives" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginArchiveLoadResult.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.InvalidArchives">
      <topicdata group="api" />
      <apidata name="InvalidArchives" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InvalidArchives" />
      <setter name="set_InvalidArchives" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.InvalidPluginArchive" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.ValidArchives">
      <topicdata group="api" />
      <apidata name="ValidArchives" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ValidArchives" />
      <setter name="set_ValidArchives" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginAssembly">
      <topicdata group="api" />
      <apidata name="PluginAssembly" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginAssembly.#ctor(System.String,System.String,System.String,Symbiote.Core.Plugin.PluginType,System.String,System.Type,System.Reflection.Assembly)" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Assembly" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Fingerprint" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.FQN" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Name" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.PluginType" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Type" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.PluginAssembly">
      <topicdata name="PluginAssembly" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.PluginAssembly" />
      <apidata name="PluginAssembly" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.PluginAssembly">
      <topicdata name="PluginAssembly" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.PluginAssembly" />
      <apidata name="PluginAssembly" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Assembly" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Fingerprint" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.FQN" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Name" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.PluginType" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Type" />
        <element api="P:Symbiote.Core.Plugin.PluginAssembly.Version" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginAssembly.#ctor(System.String,System.String,System.String,Symbiote.Core.Plugin.PluginType,System.String,System.Type,System.Reflection.Assembly)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="version">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="pluginType">
          <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
        </parameter>
        <parameter name="fingerprint">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="assembly">
          <type api="T:System.Reflection.Assembly" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginAssembly.Assembly">
      <topicdata group="api" />
      <apidata name="Assembly" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Assembly" />
      <setter name="set_Assembly" />
      <returns>
        <type api="T:System.Reflection.Assembly" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginAssembly.Fingerprint">
      <topicdata group="api" />
      <apidata name="Fingerprint" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Fingerprint" />
      <setter name="set_Fingerprint" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginAssembly.FQN">
      <topicdata group="api" />
      <apidata name="FQN" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_FQN" />
      <setter name="set_FQN" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.FQN">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginAssembly.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Name">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginAssembly.PluginType">
      <topicdata group="api" />
      <apidata name="PluginType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginType" />
      <setter name="set_PluginType" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.PluginType">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginAssembly.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Type" />
      <setter name="set_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginAssembly.Version">
      <topicdata group="api" />
      <apidata name="Version" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Version" />
      <setter name="set_Version" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Plugin.IPlugin.Version">
          <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginAuthorization">
      <topicdata group="api" />
      <apidata name="PluginAuthorization" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Plugin.PluginAuthorization.Unknown" />
        <element api="F:Symbiote.Core.Plugin.PluginAuthorization.Unauthorized" />
        <element api="F:Symbiote.Core.Plugin.PluginAuthorization.Authorized" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginAuthorization.Authorized">
      <topicdata group="api" notopic="" />
      <apidata name="Authorized" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginAuthorization" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAuthorization" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginAuthorization.Unauthorized">
      <topicdata group="api" notopic="" />
      <apidata name="Unauthorized" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginAuthorization" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAuthorization" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginAuthorization.Unknown">
      <topicdata group="api" notopic="" />
      <apidata name="Unknown" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginAuthorization" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginAuthorization" ref="false" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginManager">
      <topicdata group="api" />
      <apidata name="PluginManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.#ctor(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.#cctor" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.Configuration" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.ConfigurationDefinition" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.Configure">
          <element api="M:Symbiote.Core.Plugin.PluginManager.Configure" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.Configure(Symbiote.Core.Plugin.PluginManagerConfiguration)" />
        </element>
        <element api="P:Symbiote.Core.Plugin.PluginManager.ConnectorManager" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.CreatePluginInstance``1(System.String)" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.EndpointManager" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.FindPlugin">
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly">
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginInstance(System.String,Symbiote.Core.Plugin.PluginType)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginItem(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveConfigurationFileName" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveExtension" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchivePayloadFileName" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginDirectory(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginType(System.String)" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.installationLock" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.InstallPlugin">
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Boolean)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform,System.Boolean)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPluginAsync(Symbiote.Core.Plugin.PluginArchive)" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.instance" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins">
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins(System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance},System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
        </element>
        <element api="P:Symbiote.Core.Plugin.PluginManager.InvalidPluginArchives" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.IsPluginLoadable(Symbiote.Core.Plugin.Plugin)" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.loadablePluginTypes" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives">
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives(System.String,System.String,Symbiote.Core.Platform.IPlatform)" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies">
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies(System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly">
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
        </element>
        <element api="F:Symbiote.Core.Plugin.PluginManager.logger" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.manager" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive">
          <element api="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String,System.String,System.String,Symbiote.Core.Platform.IPlatform)" />
        </element>
        <element api="P:Symbiote.Core.Plugin.PluginManager.PluginArchives" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.PluginAssemblies" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.PluginInstances" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.Plugins" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ReinstallPlugin(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ReinstallPluginAsync(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ReloadPluginArchives" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Restart" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.SaveConfiguration" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Start" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.State" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Stop" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.UninstallPlugin">
          <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPluginAsync(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.UpdatePlugin(Symbiote.Core.Plugin.PluginArchive)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.UpdatePluginAsync(Symbiote.Core.Plugin.PluginArchive)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssembly(System.Reflection.Assembly)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssemblyName(System.Reflection.AssemblyName)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.PluginManager">
      <topicdata name="PluginManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.PluginManager" />
      <apidata name="PluginManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.Configure">
          <element api="M:Symbiote.Core.Plugin.PluginManager.Configure" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.Configure(Symbiote.Core.Plugin.PluginManagerConfiguration)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.CreatePluginInstance``1(System.String)" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.FindPlugin">
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly">
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginInstance(System.String,Symbiote.Core.Plugin.PluginType)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginItem(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveConfigurationFileName" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveExtension" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchivePayloadFileName" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginDirectory(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.GetPluginType(System.String)" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.InstallPlugin">
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Boolean)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform,System.Boolean)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPluginAsync(Symbiote.Core.Plugin.PluginArchive)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins">
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins(System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance},System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.IsPluginLoadable(Symbiote.Core.Plugin.Plugin)" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives">
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives(System.String,System.String,Symbiote.Core.Platform.IPlatform)" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies">
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies(System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly">
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive">
          <element api="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String,System.String,System.String,Symbiote.Core.Platform.IPlatform)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.ReinstallPlugin(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ReinstallPluginAsync(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ReloadPluginArchives" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Restart" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.SaveConfiguration" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Start" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Stop" />
        <element api="Overload:Symbiote.Core.Plugin.PluginManager.UninstallPlugin">
          <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin)" />
          <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPluginAsync(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.UpdatePlugin(Symbiote.Core.Plugin.PluginArchive)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.UpdatePluginAsync(Symbiote.Core.Plugin.PluginArchive)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssembly(System.Reflection.Assembly)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssemblyName(System.Reflection.AssemblyName)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.PluginManager">
      <topicdata name="PluginManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.PluginManager" />
      <apidata name="PluginManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.PluginManager.Configuration" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.ConnectorManager" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.EndpointManager" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.InvalidPluginArchives" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.PluginArchives" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.PluginAssemblies" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.PluginInstances" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.Plugins" />
        <element api="P:Symbiote.Core.Plugin.PluginManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Plugin.PluginManager">
      <topicdata name="PluginManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Plugin.PluginManager" />
      <apidata name="PluginManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Plugin.PluginManager.installationLock" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.instance" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.loadablePluginTypes" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.logger" />
        <element api="F:Symbiote.Core.Plugin.PluginManager.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.Configure">
      <topicdata name="Configure" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Configure" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.Configure" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.Configure(Symbiote.Core.Plugin.PluginManagerConfiguration)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.FindPlugin">
      <topicdata name="FindPlugin" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="FindPlugin" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly">
      <topicdata name="FindPluginAssembly" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="FindPluginAssembly" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.InstallPlugin">
      <topicdata name="InstallPlugin" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="InstallPlugin" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Boolean)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins">
      <topicdata name="InstantiatePlugins" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="InstantiatePlugins" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins(System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance},System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives">
      <topicdata name="LoadPluginArchives" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LoadPluginArchives" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives(System.String,System.String,Symbiote.Core.Platform.IPlatform)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies">
      <topicdata name="LoadPluginAssemblies" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LoadPluginAssemblies" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies(System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly">
      <topicdata name="LoadPluginAssembly" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LoadPluginAssembly" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive">
      <topicdata name="ParsePluginArchive" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ParsePluginArchive" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String,System.String,System.String,Symbiote.Core.Platform.IPlatform)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.PluginManager.UninstallPlugin">
      <topicdata name="UninstallPlugin" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="UninstallPlugin" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin)" />
        <element api="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.#ctor(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.Configure">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.PluginManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.Configure(Symbiote.Core.Plugin.PluginManagerConfiguration)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.PluginManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="configuration">
          <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.ConnectorManager">
      <topicdata group="api" />
      <apidata name="ConnectorManager" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ConnectorManager" />
      <setter name="set_ConnectorManager" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.CreatePluginInstance``1(System.String)">
      <topicdata group="api" />
      <apidata name="CreatePluginInstance" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.EndpointManager">
      <topicdata group="api" />
      <apidata name="EndpointManager" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_EndpointManager" />
      <setter name="set_EndpointManager" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String)">
      <topicdata group="api" />
      <apidata name="FindPlugin" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.PluginManager.FindPlugin" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})">
      <topicdata group="api" />
      <apidata name="FindPlugin" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.FindPlugin" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="plugins">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String)">
      <topicdata group="api" />
      <apidata name="FindPluginAssembly" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})">
      <topicdata group="api" />
      <apidata name="FindPluginAssembly" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="assemblies">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.FindPluginInstance(System.String,Symbiote.Core.Plugin.PluginType)">
      <topicdata group="api" />
      <apidata name="FindPluginInstance" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instanceName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="pluginType" optional="true">
          <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
          <argument>
            <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
            <enumValue>
              <field name="Connector" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.FindPluginItem(System.String)">
      <topicdata group="api" />
      <apidata name="FindPluginItem" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.GetConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="GetConfigurationDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.GetDefaultConfiguration">
      <topicdata group="api" />
      <apidata name="GetDefaultConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveConfigurationFileName">
      <topicdata group="api" />
      <apidata name="GetPluginArchiveConfigurationFileName" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveExtension">
      <topicdata group="api" />
      <apidata name="GetPluginArchiveExtension" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchivePayloadFileName">
      <topicdata group="api" />
      <apidata name="GetPluginArchivePayloadFileName" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.GetPluginDirectory(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="GetPluginDirectory" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.GetPluginType(System.String)">
      <topicdata group="api" />
      <apidata name="GetPluginType" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginManager.installationLock">
      <topicdata group="api" />
      <apidata name="installationLock" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Boolean)">
      <topicdata group="api" />
      <apidata name="InstallPlugin" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.PluginManager.InstallPlugin" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="archive">
          <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
        </parameter>
        <parameter name="updatePlugin" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform,System.Boolean)">
      <topicdata group="api" />
      <apidata name="InstallPlugin" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.InstallPlugin" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="archive">
          <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
        </parameter>
        <parameter name="plugins">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="platform">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </parameter>
        <parameter name="updatePlugin" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.InstallPluginAsync(Symbiote.Core.Plugin.PluginArchive)">
      <topicdata group="api" />
      <apidata name="InstallPluginAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="archive">
          <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Result`1" ref="true">
              <specialization>
                <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.Instance(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins">
      <topicdata group="api" />
      <apidata name="InstantiatePlugins" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins(System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance},System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})">
      <topicdata group="api" />
      <apidata name="InstantiatePlugins" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configuredInstances">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="assemblies">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.InvalidPluginArchives">
      <topicdata group="api" />
      <apidata name="InvalidPluginArchives" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_InvalidPluginArchives" />
      <setter name="set_InvalidPluginArchives" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.InvalidPluginArchive" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.IsPluginLoadable(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="IsPluginLoadable" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginManager.loadablePluginTypes">
      <topicdata group="api" />
      <apidata name="loadablePluginTypes" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <arrayOf rank="1">
          <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives">
      <topicdata group="api" />
      <apidata name="LoadPluginArchives" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives(System.String,System.String,Symbiote.Core.Platform.IPlatform)">
      <topicdata group="api" />
      <apidata name="LoadPluginArchives" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="directory">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="searchPattern">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="platform">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies">
      <topicdata group="api" />
      <apidata name="LoadPluginAssemblies" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies(System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})">
      <topicdata group="api" />
      <apidata name="LoadPluginAssemblies" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugins">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="LoadPluginAssembly" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})">
      <topicdata group="api" />
      <apidata name="LoadPluginAssembly" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
        <parameter name="pluginAssemblies">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginManager.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String)">
      <topicdata group="api" />
      <apidata name="ParsePluginArchive" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String,System.String,System.String,Symbiote.Core.Platform.IPlatform)">
      <topicdata group="api" />
      <apidata name="ParsePluginArchive" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="configFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="payloadFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="platform">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.PluginArchives">
      <topicdata group="api" />
      <apidata name="PluginArchives" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginArchives" />
      <setter name="set_PluginArchives" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.PluginAssemblies">
      <topicdata group="api" />
      <apidata name="PluginAssemblies" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginAssemblies" />
      <setter name="set_PluginAssemblies" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginAssembly" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.PluginInstances">
      <topicdata group="api" />
      <apidata name="PluginInstances" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_PluginInstances" />
      <setter name="set_PluginInstances" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.Plugins">
      <topicdata group="api" />
      <apidata name="Plugins" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Plugins" />
      <setter name="set_Plugins" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.ReinstallPlugin(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="ReinstallPlugin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.ReinstallPluginAsync(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="ReinstallPluginAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Result" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.ReloadPluginArchives">
      <topicdata group="api" />
      <apidata name="ReloadPluginArchives" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginArchiveLoadResult" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="UninstallPlugin" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.PluginManager.UninstallPlugin" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform)">
      <topicdata group="api" />
      <apidata name="UninstallPlugin" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Plugin.PluginManager.UninstallPlugin" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
        <parameter name="plugins">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="platform">
          <type api="T:Symbiote.Core.Platform.IPlatform" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.UninstallPluginAsync(Symbiote.Core.Plugin.Plugin)">
      <topicdata group="api" />
      <apidata name="UninstallPluginAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plugin">
          <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Result" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.UpdatePlugin(Symbiote.Core.Plugin.PluginArchive)">
      <topicdata group="api" />
      <apidata name="UpdatePlugin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="archive">
          <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.UpdatePluginAsync(Symbiote.Core.Plugin.PluginArchive)">
      <topicdata group="api" />
      <apidata name="UpdatePluginAsync" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="archive">
          <type api="T:Symbiote.Core.Plugin.PluginArchive" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Result`1" ref="true">
              <specialization>
                <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssembly(System.Reflection.Assembly)">
      <topicdata group="api" />
      <apidata name="ValidatePluginAssembly" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="assembly">
          <type api="T:System.Reflection.Assembly" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Type" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssemblyName(System.Reflection.AssemblyName)">
      <topicdata group="api" />
      <apidata name="ValidatePluginAssemblyName" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="assemblyName">
          <type api="T:System.Reflection.AssemblyName" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginManagerConfiguration">
      <topicdata group="api" />
      <apidata name="PluginManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManagerConfiguration.#ctor" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfiguration.Instances" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfiguration.Plugins" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.PluginManagerConfiguration">
      <topicdata name="PluginManagerConfiguration" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.PluginManagerConfiguration" />
      <apidata name="PluginManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.PluginManagerConfiguration">
      <topicdata name="PluginManagerConfiguration" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.PluginManagerConfiguration" />
      <apidata name="PluginManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfiguration.Instances" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfiguration.Plugins" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManagerConfiguration.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManagerConfiguration.Instances">
      <topicdata group="api" />
      <apidata name="Instances" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Instances" />
      <setter name="set_Instances" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManagerConfiguration.Plugins">
      <topicdata group="api" />
      <apidata name="Plugins" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Plugins" />
      <setter name="set_Plugins" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Plugin" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance">
      <topicdata group="api" />
      <apidata name="PluginManagerConfigurationPluginInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.#ctor" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.AssemblyName" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.Configuration" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.InstanceName" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance">
      <topicdata name="PluginManagerConfigurationPluginInstance" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" />
      <apidata name="PluginManagerConfigurationPluginInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance">
      <topicdata name="PluginManagerConfigurationPluginInstance" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" />
      <apidata name="PluginManagerConfigurationPluginInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.AssemblyName" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.Configuration" />
        <element api="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.InstanceName" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.AssemblyName">
      <topicdata group="api" />
      <apidata name="AssemblyName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_AssemblyName" />
      <setter name="set_AssemblyName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance.InstanceName">
      <topicdata group="api" />
      <apidata name="InstanceName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InstanceName" />
      <setter name="set_InstanceName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginType">
      <topicdata group="api" />
      <apidata name="PluginType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Plugin.PluginType.Unknown" />
        <element api="F:Symbiote.Core.Plugin.PluginType.Connector" />
        <element api="F:Symbiote.Core.Plugin.PluginType.Endpoint" />
        <element api="F:Symbiote.Core.Plugin.PluginType.App" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginType.App">
      <topicdata group="api" notopic="" />
      <apidata name="App" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <value>3</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginType.Connector">
      <topicdata group="api" notopic="" />
      <apidata name="Connector" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginType.Endpoint">
      <topicdata group="api" notopic="" />
      <apidata name="Endpoint" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginType.Unknown">
      <topicdata group="api" notopic="" />
      <apidata name="Unknown" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginType" ref="false" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.PluginTypeManager`1">
      <topicdata group="api" />
      <apidata name="PluginTypeManager" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.#ctor(Symbiote.Core.ProgramManager,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance})" />
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.#cctor" />
        <element api="P:Symbiote.Core.Plugin.PluginTypeManager`1.ConfiguredInstances" />
        <element api="P:Symbiote.Core.Plugin.PluginTypeManager`1.Instances" />
        <element api="F:Symbiote.Core.Plugin.PluginTypeManager`1.logger" />
        <element api="F:Symbiote.Core.Plugin.PluginTypeManager`1.manager" />
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.Restart" />
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.Start" />
        <element api="P:Symbiote.Core.Plugin.PluginTypeManager`1.State" />
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.PluginTypeManager`1">
      <topicdata name="PluginTypeManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
      <apidata name="PluginTypeManager" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.Restart" />
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.Start" />
        <element api="M:Symbiote.Core.Plugin.PluginTypeManager`1.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.PluginTypeManager`1">
      <topicdata name="PluginTypeManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
      <apidata name="PluginTypeManager" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:Symbiote.Core.Plugin.PluginTypeManager`1.ConfiguredInstances" />
        <element api="P:Symbiote.Core.Plugin.PluginTypeManager`1.Instances" />
        <element api="P:Symbiote.Core.Plugin.PluginTypeManager`1.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Plugin.PluginTypeManager`1">
      <topicdata name="PluginTypeManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
      <apidata name="PluginTypeManager" group="type" subgroup="class" />
      <typedata visibility="assembly" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="F:Symbiote.Core.Plugin.PluginTypeManager`1.logger" />
        <element api="F:Symbiote.Core.Plugin.PluginTypeManager`1.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginTypeManager`1.#ctor(Symbiote.Core.ProgramManager,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
        <parameter name="configuredInstances">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginTypeManager`1.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginTypeManager`1.ConfiguredInstances">
      <topicdata group="api" />
      <apidata name="ConfiguredInstances" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ConfiguredInstances" />
      <setter name="set_ConfiguredInstances" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginTypeManager`1.Instances">
      <topicdata group="api" />
      <apidata name="Instances" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Instances" />
      <setter name="set_Instances" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Plugin.PluginTypeManager`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginTypeManager`1.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.xLogger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.PluginTypeManager`1.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginTypeManager`1.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginTypeManager`1.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.PluginTypeManager`1.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.PluginTypeManager`1.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin" />
        <type api="T:Symbiote.Core.Plugin.PluginTypeManager`1" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Plugin.Connector">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Plugin.Connector" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" />
        <element api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" />
        <element api="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" />
        <element api="T:Symbiote.Core.Plugin.Connector.IAddable" />
        <element api="T:Symbiote.Core.Plugin.Connector.IConnector" />
        <element api="T:Symbiote.Core.Plugin.Connector.ISubscribable" />
        <element api="T:Symbiote.Core.Plugin.Connector.IWriteable" />
        <element api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.ConnectorInstance">
      <topicdata group="api" />
      <apidata name="ConnectorInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorInstance.#ctor" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorInstance.EndpointType" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorInstance.Name" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.ConnectorInstance">
      <topicdata name="ConnectorInstance" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" />
      <apidata name="ConnectorInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Connector.ConnectorInstance">
      <topicdata name="ConnectorInstance" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" />
      <apidata name="ConnectorInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorInstance.EndpointType" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorInstance.Name" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorInstance.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorInstance.EndpointType">
      <topicdata group="api" />
      <apidata name="EndpointType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EndpointType" />
      <setter name="set_EndpointType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorInstance.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.ConnectorItem">
      <topicdata group="api" />
      <apidata name="ConnectorItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Item" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
          <element api="M:Symbiote.Core.Item.AddChild(Symbiote.Core.Item)" />
        </element>
        <element api="E:Symbiote.Core.Item.Changed" />
        <element api="P:Symbiote.Core.Item.Children" />
        <element api="M:Symbiote.Core.Item.Clone" />
        <element api="P:Symbiote.Core.Item.FQN" />
        <element api="P:Symbiote.Core.Item.Guid" />
        <element api="M:Symbiote.Core.Item.HasChildren" />
        <element api="P:Symbiote.Core.Item.Name" />
        <element api="M:Symbiote.Core.Item.OnChange(System.Object)" />
        <element api="P:Symbiote.Core.Item.Parent" />
        <element api="P:Symbiote.Core.Item.Path" />
        <element api="M:Symbiote.Core.Item.ReadAsync" />
        <element api="M:Symbiote.Core.Item.ReadFromSourceAsync" />
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
          <element api="M:Symbiote.Core.Item.RemoveChild(Symbiote.Core.Item)" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
          <element api="M:Symbiote.Core.Item.SetParent(Symbiote.Core.Item)" />
        </element>
        <element api="P:Symbiote.Core.Item.SourceFQN" />
        <element api="P:Symbiote.Core.Item.SourceItem" />
        <element api="M:Symbiote.Core.Item.SourceItemChanged(Symbiote.Core.Item,Symbiote.Core.ItemEventArgs)" />
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.ToJson">
          <element api="M:Symbiote.Core.Item.ToJson" />
          <element api="M:Symbiote.Core.Item.ToJson(Newtonsoft.Json.Serialization.DefaultContractResolver)" />
        </element>
        <element api="M:Symbiote.Core.Item.ToString" />
        <element api="M:Symbiote.Core.Item.UnsubscribeFromSource" />
        <element api="P:Symbiote.Core.Item.Value" />
        <element api="P:Symbiote.Core.Item.Writeable" />
        <element api="M:Symbiote.Core.Item.WriteAsync(System.Object)" />
        <element api="M:Symbiote.Core.Item.WriteToSourceAsync(System.Object)" />
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor" />
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.Boolean)" />
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String)" />
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String,System.Boolean)" />
        </element>
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorItem.Connector" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.Read" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.ReadFromSource" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SubscribeToSource" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.Write(System.Object)" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.WriteToSource(System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.ConnectorItem">
      <topicdata name="ConnectorItem" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />
      <apidata name="ConnectorItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
          <element api="M:Symbiote.Core.Item.AddChild(Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Item.Clone" />
        <element api="M:Symbiote.Core.Item.HasChildren" />
        <element api="M:Symbiote.Core.Item.OnChange(System.Object)" />
        <element api="M:Symbiote.Core.Item.ReadAsync" />
        <element api="M:Symbiote.Core.Item.ReadFromSourceAsync" />
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
          <element api="M:Symbiote.Core.Item.RemoveChild(Symbiote.Core.Item)" />
        </element>
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
          <element api="M:Symbiote.Core.Item.SetParent(Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Item.SourceItemChanged(Symbiote.Core.Item,Symbiote.Core.ItemEventArgs)" />
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.ToJson">
          <element api="M:Symbiote.Core.Item.ToJson" />
          <element api="M:Symbiote.Core.Item.ToJson(Newtonsoft.Json.Serialization.DefaultContractResolver)" />
        </element>
        <element api="M:Symbiote.Core.Item.ToString" />
        <element api="M:Symbiote.Core.Item.UnsubscribeFromSource" />
        <element api="M:Symbiote.Core.Item.WriteAsync(System.Object)" />
        <element api="M:Symbiote.Core.Item.WriteToSourceAsync(System.Object)" />
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.Read" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.ReadFromSource" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SubscribeToSource" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.Write(System.Object)" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.WriteToSource(System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Connector.ConnectorItem">
      <topicdata name="ConnectorItem" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />
      <apidata name="ConnectorItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Item.Children" />
        <element api="P:Symbiote.Core.Item.FQN" />
        <element api="P:Symbiote.Core.Item.Guid" />
        <element api="P:Symbiote.Core.Item.Name" />
        <element api="P:Symbiote.Core.Item.Parent" />
        <element api="P:Symbiote.Core.Item.Path" />
        <element api="P:Symbiote.Core.Item.SourceFQN" />
        <element api="P:Symbiote.Core.Item.SourceItem" />
        <element api="P:Symbiote.Core.Item.Value" />
        <element api="P:Symbiote.Core.Item.Writeable" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorItem.Connector" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />
      </containers>
    </api>
    <api id="Events.T:Symbiote.Core.Plugin.Connector.ConnectorItem">
      <topicdata name="ConnectorItem" group="list" subgroup="Events" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />
      <apidata name="ConnectorItem" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:Symbiote.Core.Item.Changed" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild">
      <topicdata name="AddChild" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="AddChild" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
        <element api="M:Symbiote.Core.Item.AddChild(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild">
      <topicdata name="RemoveChild" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="RemoveChild" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
        <element api="M:Symbiote.Core.Item.RemoveChild(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent">
      <topicdata name="SetParent" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="SetParent" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
        <element api="M:Symbiote.Core.Item.SetParent(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" allMembersTopicId="" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.Boolean)" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String)" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor" />
      <parameters>
        <parameter name="connector">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="isRoot">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor" />
      <parameters>
        <parameter name="connector">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceFQN">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor" />
      <parameters>
        <parameter name="connector">
          <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceFQN" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
        <parameter name="isRoot" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <topicdata group="api" />
      <apidata name="AddChild" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.AddChild" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="pluginItem">
          <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorItem.Connector">
      <topicdata group="api" />
      <apidata name="Connector" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Connector" />
      <setter name="set_Connector" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Newtonsoft.Json.JsonIgnoreAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.Read">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Symbiote.Core.Item.Read">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.ReadFromSource">
      <topicdata group="api" />
      <apidata name="ReadFromSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Symbiote.Core.Item.ReadFromSource">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <topicdata group="api" />
      <apidata name="RemoveChild" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.RemoveChild" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="pluginItem">
          <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <topicdata group="api" />
      <apidata name="SetParent" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="parent">
          <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SubscribeToSource">
      <topicdata group="api" />
      <apidata name="SubscribeToSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Symbiote.Core.Item.SubscribeToSource">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.Write(System.Object)">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Symbiote.Core.Item.Write(System.Object)">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorItem.WriteToSource(System.Object)">
      <topicdata group="api" />
      <apidata name="WriteToSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Symbiote.Core.Item.WriteToSource(System.Object)">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.ConnectorManager">
      <topicdata group="api" />
      <apidata name="ConnectorManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.#ctor(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.#cctor" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.Configuration" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.ConfigurationDefinition" />
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure" />
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure(Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration)" />
        </element>
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.EndpointInstances" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.Endpoints" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.GetDefaultConfiguration" />
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.instance" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Instance(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)" />
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.logger" />
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.manager" />
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.pluginManager" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.RegisterEndpoints" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Restart" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.SaveConfiguration" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Start" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.State" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.ConnectorManager">
      <topicdata name="ConnectorManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorManager" />
      <apidata name="ConnectorManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure">
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure" />
          <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure(Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Instance(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.RegisterEndpoints" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Restart" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.SaveConfiguration" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Start" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Connector.ConnectorManager">
      <topicdata name="ConnectorManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorManager" />
      <apidata name="ConnectorManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.Configuration" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.EndpointInstances" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.Endpoints" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Plugin.Connector.ConnectorManager">
      <topicdata name="ConnectorManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorManager" />
      <apidata name="ConnectorManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.instance" />
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.logger" />
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.manager" />
        <element api="F:Symbiote.Core.Plugin.Connector.ConnectorManager.pluginManager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure">
      <topicdata name="Configure" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Configure" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure" />
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure(Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.#ctor(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="pluginManager">
          <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
        </parameter>
        <parameter name="programManager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorManager.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorManager.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure(Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Connector.ConnectorManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="configuration">
          <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorManager.EndpointInstances">
      <topicdata group="api" />
      <apidata name="EndpointInstances" group="member" subgroup="property" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_EndpointInstances" />
      <setter name="set_EndpointInstances" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorManager.Endpoints">
      <topicdata group="api" />
      <apidata name="Endpoints" group="member" subgroup="property" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Endpoints" />
      <setter name="set_Endpoints" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Type" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.GetConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="GetConfigurationDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.GetDefaultConfiguration">
      <topicdata group="api" />
      <apidata name="GetDefaultConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Connector.ConnectorManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Instance(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="pluginManager">
          <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
        </parameter>
        <parameter name="programManager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Connector.ConnectorManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Connector.ConnectorManager.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Connector.ConnectorManager.pluginManager">
      <topicdata group="api" />
      <apidata name="pluginManager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.RegisterEndpoints">
      <topicdata group="api" />
      <apidata name="RegisterEndpoints" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Type" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration">
      <topicdata group="api" />
      <apidata name="ConnectorManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration.#ctor" />
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration.Instances" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration">
      <topicdata name="ConnectorManagerConfiguration" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" />
      <apidata name="ConnectorManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration">
      <topicdata name="ConnectorManagerConfiguration" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" />
      <apidata name="ConnectorManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration.Instances" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration.Instances">
      <topicdata group="api" />
      <apidata name="Instances" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Instances" />
      <setter name="set_Instances" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Connector.ConnectorInstance" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ConnectorManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.IAddable">
      <topicdata group="api" />
      <apidata name="IAddable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.IAddable.Add(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.IAddable">
      <topicdata name="IAddable" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.IAddable" />
      <apidata name="IAddable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.IAddable.Add(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IAddable" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.IAddable.Add(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="sourceFQN">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IAddable" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.IConnector">
      <topicdata group="api" />
      <apidata name="IConnector" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implements>
        <type api="T:Symbiote.Core.Plugin.IPluginInstance" ref="true" />
        <type api="T:Symbiote.Core.Plugin.IPlugin" ref="true" />
      </implements>
      <implementors>
        <type api="T:Symbiote.Core.Platform.Windows.WindowsPlatformConnector" ref="true" />
        <type api="T:Symbiote.Core.Platform.UNIX.UNIXPlatformConnector" ref="true" />
      </implementors>
      <elements>
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
        <element api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Restart" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Start" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Stop" />
        <element api="Overload:Symbiote.Core.Plugin.Connector.IConnector.Browse">
          <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse" />
          <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Find(System.String)" />
        <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Read(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.IConnector">
      <topicdata name="IConnector" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.IConnector" />
      <apidata name="IConnector" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Restart" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Start" />
        <element api="M:Symbiote.Core.Plugin.IPluginInstance.Stop" />
        <element api="Overload:Symbiote.Core.Plugin.Connector.IConnector.Browse">
          <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse" />
          <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Find(System.String)" />
        <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Read(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Connector.IConnector">
      <topicdata name="IConnector" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Connector.IConnector" />
      <apidata name="IConnector" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.IPlugin.FQN" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Name" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.PluginType" />
        <element api="P:Symbiote.Core.Plugin.IPlugin.Version" />
        <element api="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.Connector.IConnector.Browse">
      <topicdata name="Browse" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Browse" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse" />
        <element api="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.IConnector.Browse">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Connector.IConnector.Browse" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Connector.IConnector.Browse" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="root">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Item" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.IConnector.Find(System.String)">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.IConnector.Read(Symbiote.Core.Item)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IConnector" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.ISubscribable">
      <topicdata group="api" />
      <apidata name="ISubscribable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.ISubscribable.Subscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
        <element api="P:Symbiote.Core.Plugin.Connector.ISubscribable.Subscriptions" />
        <element api="M:Symbiote.Core.Plugin.Connector.ISubscribable.UnSubscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.ISubscribable">
      <topicdata name="ISubscribable" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.ISubscribable" />
      <apidata name="ISubscribable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.ISubscribable.Subscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
        <element api="M:Symbiote.Core.Plugin.Connector.ISubscribable.UnSubscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ISubscribable" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Connector.ISubscribable">
      <topicdata name="ISubscribable" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Connector.ISubscribable" />
      <apidata name="ISubscribable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Connector.ISubscribable.Subscriptions" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ISubscribable" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ISubscribable.Subscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <topicdata group="api" />
      <apidata name="Subscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ISubscribable" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Connector.ISubscribable.Subscriptions">
      <topicdata group="api" />
      <apidata name="Subscriptions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Subscriptions" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ISubscribable" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.ISubscribable.UnSubscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <topicdata group="api" />
      <apidata name="UnSubscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Plugin.Connector.ConnectorItem" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.ISubscribable" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Connector.IWriteable">
      <topicdata group="api" />
      <apidata name="IWriteable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.IWriteable.Write(Symbiote.Core.Item,System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Connector.IWriteable">
      <topicdata name="IWriteable" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Connector.IWriteable" />
      <apidata name="IWriteable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Connector.IWriteable.Write(Symbiote.Core.Item,System.Object)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IWriteable" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Connector.IWriteable.Write(Symbiote.Core.Item,System.Object)">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="item">
          <type api="T:Symbiote.Core.Item" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Connector" />
        <type api="T:Symbiote.Core.Plugin.Connector.IWriteable" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Plugin.Endpoint">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Plugin.Endpoint" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" />
        <element api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" />
        <element api="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance">
      <topicdata group="api" />
      <apidata name="EndpointInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointInstance.#ctor" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointInstance.EndpointType" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointInstance.Name" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Endpoint.EndpointInstance">
      <topicdata name="EndpointInstance" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" />
      <apidata name="EndpointInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Endpoint.EndpointInstance">
      <topicdata name="EndpointInstance" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" />
      <apidata name="EndpointInstance" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointInstance.EndpointType" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointInstance.Name" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointInstance.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointInstance.EndpointType">
      <topicdata group="api" />
      <apidata name="EndpointType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_EndpointType" />
      <setter name="set_EndpointType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointInstance.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Endpoint.EndpointManager">
      <topicdata group="api" />
      <apidata name="EndpointManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.#ctor(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.#cctor" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configuration" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.ConfigurationDefinition" />
        <element api="Overload:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure">
          <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure" />
          <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure(Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration)" />
        </element>
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.EndpointInstances" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.Endpoints" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.GetDefaultConfiguration" />
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.instance" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Instance(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)" />
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.logger" />
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.manager" />
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.pluginManager" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.RegisterEndpoints" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Restart" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.SaveConfiguration" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Start" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.State" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Endpoint.EndpointManager">
      <topicdata name="EndpointManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" />
      <apidata name="EndpointManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure">
          <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure" />
          <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure(Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration)" />
        </element>
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Instance(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.RegisterEndpoints" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Restart" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.SaveConfiguration" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Start" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Endpoint.EndpointManager">
      <topicdata name="EndpointManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" />
      <apidata name="EndpointManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configuration" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.EndpointInstances" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.Endpoints" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Plugin.Endpoint.EndpointManager">
      <topicdata name="EndpointManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" />
      <apidata name="EndpointManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.instance" />
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.logger" />
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.manager" />
        <element api="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.pluginManager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure">
      <topicdata name="Configure" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Configure" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure" />
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure(Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.#ctor(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="pluginManager">
          <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
        </parameter>
        <parameter name="programManager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure(Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Plugin.Endpoint.EndpointManager.Configure" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="configuration">
          <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.EndpointInstances">
      <topicdata group="api" />
      <apidata name="EndpointInstances" group="member" subgroup="property" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_EndpointInstances" />
      <setter name="set_EndpointInstances" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:Symbiote.Core.Plugin.IEndpoint" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.Endpoints">
      <topicdata group="api" />
      <apidata name="Endpoints" group="member" subgroup="property" />
      <memberdata visibility="assembly" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Endpoints" />
      <setter name="set_Endpoints" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Type" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.GetConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="GetConfigurationDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.GetDefaultConfiguration">
      <topicdata group="api" />
      <apidata name="GetDefaultConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Instance(Symbiote.Core.Plugin.PluginManager,Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="pluginManager">
          <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
        </parameter>
        <parameter name="programManager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Plugin.Endpoint.EndpointManager.pluginManager">
      <topicdata group="api" />
      <apidata name="pluginManager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Plugin.PluginManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.RegisterEndpoints">
      <topicdata group="api" />
      <apidata name="RegisterEndpoints" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Type" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManager" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration">
      <topicdata group="api" />
      <apidata name="EndpointManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration.#ctor" />
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration.Instances" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration">
      <topicdata name="EndpointManagerConfiguration" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" />
      <apidata name="EndpointManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration">
      <topicdata name="EndpointManagerConfiguration" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" />
      <apidata name="EndpointManagerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration.Instances" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration.Instances">
      <topicdata group="api" />
      <apidata name="Instances" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Instances" />
      <setter name="set_Instances" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointInstance" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Plugin.Endpoint" />
        <type api="T:Symbiote.Core.Plugin.Endpoint.EndpointManagerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Service">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Service" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Service.IService" />
        <element api="T:Symbiote.Core.Service.ServiceManager" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Service.IService">
      <topicdata group="api" />
      <apidata name="IService" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </implementors>
      <elements>
        <element api="P:Symbiote.Core.Service.IService.IsRunning" />
        <element api="M:Symbiote.Core.Service.IService.Start" />
        <element api="M:Symbiote.Core.Service.IService.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.IService">
      <topicdata name="IService" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.IService" />
      <apidata name="IService" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Service.IService.Start" />
        <element api="M:Symbiote.Core.Service.IService.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.IService" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.IService">
      <topicdata name="IService" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.IService" />
      <apidata name="IService" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.IService.IsRunning" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.IService" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.IService.IsRunning">
      <topicdata group="api" />
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.IService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IService.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.IService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IService.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.IService" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.ServiceManager">
      <topicdata group="api" />
      <apidata name="ServiceManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.IManager" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.ServiceManager.#ctor(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Service.ServiceManager.#cctor" />
        <element api="F:Symbiote.Core.Service.ServiceManager.instance" />
        <element api="M:Symbiote.Core.Service.ServiceManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="Overload:Symbiote.Core.Service.ServiceManager.InstantiateServices">
          <element api="M:Symbiote.Core.Service.ServiceManager.InstantiateServices" />
          <element api="M:Symbiote.Core.Service.ServiceManager.InstantiateServices(System.Collections.Generic.Dictionary{System.String,System.Type})" />
        </element>
        <element api="F:Symbiote.Core.Service.ServiceManager.logger" />
        <element api="F:Symbiote.Core.Service.ServiceManager.manager" />
        <element api="Overload:Symbiote.Core.Service.ServiceManager.RegisterServices">
          <element api="M:Symbiote.Core.Service.ServiceManager.RegisterServices" />
          <element api="M:Symbiote.Core.Service.ServiceManager.RegisterServices(Symbiote.Core.Configuration.ConfigurationManager)" />
        </element>
        <element api="M:Symbiote.Core.Service.ServiceManager.Restart" />
        <element api="P:Symbiote.Core.Service.ServiceManager.Services" />
        <element api="P:Symbiote.Core.Service.ServiceManager.ServiceTypes" />
        <element api="M:Symbiote.Core.Service.ServiceManager.Start" />
        <element api="Overload:Symbiote.Core.Service.ServiceManager.StartServices">
          <element api="M:Symbiote.Core.Service.ServiceManager.StartServices" />
          <element api="M:Symbiote.Core.Service.ServiceManager.StartServices(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Service.IService})" />
        </element>
        <element api="P:Symbiote.Core.Service.ServiceManager.State" />
        <element api="M:Symbiote.Core.Service.ServiceManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.ServiceManager">
      <topicdata name="ServiceManager" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.ServiceManager" />
      <apidata name="ServiceManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.ServiceManager.Instance(Symbiote.Core.ProgramManager)" />
        <element api="Overload:Symbiote.Core.Service.ServiceManager.InstantiateServices">
          <element api="M:Symbiote.Core.Service.ServiceManager.InstantiateServices" />
          <element api="M:Symbiote.Core.Service.ServiceManager.InstantiateServices(System.Collections.Generic.Dictionary{System.String,System.Type})" />
        </element>
        <element api="Overload:Symbiote.Core.Service.ServiceManager.RegisterServices">
          <element api="M:Symbiote.Core.Service.ServiceManager.RegisterServices" />
          <element api="M:Symbiote.Core.Service.ServiceManager.RegisterServices(Symbiote.Core.Configuration.ConfigurationManager)" />
        </element>
        <element api="M:Symbiote.Core.Service.ServiceManager.Restart" />
        <element api="M:Symbiote.Core.Service.ServiceManager.Start" />
        <element api="Overload:Symbiote.Core.Service.ServiceManager.StartServices">
          <element api="M:Symbiote.Core.Service.ServiceManager.StartServices" />
          <element api="M:Symbiote.Core.Service.ServiceManager.StartServices(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Service.IService})" />
        </element>
        <element api="M:Symbiote.Core.Service.ServiceManager.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.ServiceManager">
      <topicdata name="ServiceManager" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.ServiceManager" />
      <apidata name="ServiceManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.ServiceManager.Services" />
        <element api="P:Symbiote.Core.Service.ServiceManager.ServiceTypes" />
        <element api="P:Symbiote.Core.Service.ServiceManager.State" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.ServiceManager">
      <topicdata name="ServiceManager" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.ServiceManager" />
      <apidata name="ServiceManager" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.ServiceManager.instance" />
        <element api="F:Symbiote.Core.Service.ServiceManager.logger" />
        <element api="F:Symbiote.Core.Service.ServiceManager.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.ServiceManager.InstantiateServices">
      <topicdata name="InstantiateServices" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="InstantiateServices" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.ServiceManager.InstantiateServices" />
        <element api="M:Symbiote.Core.Service.ServiceManager.InstantiateServices(System.Collections.Generic.Dictionary{System.String,System.Type})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.ServiceManager.RegisterServices">
      <topicdata name="RegisterServices" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="RegisterServices" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.ServiceManager.RegisterServices" />
        <element api="M:Symbiote.Core.Service.ServiceManager.RegisterServices(Symbiote.Core.Configuration.ConfigurationManager)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.ServiceManager.StartServices">
      <topicdata name="StartServices" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="StartServices" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.ServiceManager.StartServices" />
        <element api="M:Symbiote.Core.Service.ServiceManager.StartServices(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Service.IService})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.#ctor(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.ServiceManager.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.Instance(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.InstantiateServices">
      <topicdata group="api" />
      <apidata name="InstantiateServices" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Service.ServiceManager.InstantiateServices" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:Symbiote.Core.Service.IService" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.InstantiateServices(System.Collections.Generic.Dictionary{System.String,System.Type})">
      <topicdata group="api" />
      <apidata name="InstantiateServices" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Service.ServiceManager.InstantiateServices" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="serviceTypes">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Type" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:Symbiote.Core.Service.IService" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.ServiceManager.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.ServiceManager.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.RegisterServices">
      <topicdata group="api" />
      <apidata name="RegisterServices" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Service.ServiceManager.RegisterServices" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Type" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.RegisterServices(Symbiote.Core.Configuration.ConfigurationManager)">
      <topicdata group="api" />
      <apidata name="RegisterServices" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Service.ServiceManager.RegisterServices" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="configurationManager">
          <type api="T:Symbiote.Core.Configuration.ConfigurationManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Type" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.Restart">
      <topicdata group="api" />
      <apidata name="Restart" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Restart">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.ServiceManager.Services">
      <topicdata group="api" />
      <apidata name="Services" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Services" />
      <setter name="set_Services" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:Symbiote.Core.Service.IService" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.ServiceManager.ServiceTypes">
      <topicdata group="api" />
      <apidata name="ServiceTypes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ServiceTypes" />
      <setter name="set_ServiceTypes" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Type" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Start">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.StartServices">
      <topicdata group="api" />
      <apidata name="StartServices" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Service.ServiceManager.StartServices" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.StartServices(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Service.IService})">
      <topicdata group="api" />
      <apidata name="StartServices" group="member" subgroup="method" />
      <memberdata visibility="private" overload="Overload:Symbiote.Core.Service.ServiceManager.StartServices" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="serviceInstances">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:Symbiote.Core.Service.IService" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.ServiceManager.State">
      <topicdata group="api" />
      <apidata name="State" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_State" />
      <setter name="set_State" />
      <returns>
        <type api="T:Symbiote.Core.ManagerState" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.IManager.State">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.ServiceManager.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.IManager.Stop">
          <type api="T:Symbiote.Core.IManager" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service" />
        <type api="T:Symbiote.Core.Service.ServiceManager" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Service.IoT.MQTT">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Service.IoT.MQTT" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" />
        <element api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker">
      <topicdata group="api" />
      <apidata name="MQTTBroker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Service.IService" ref="true" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.#ctor(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.#cctor" />
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configuration" />
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.ConfigurationDefinition" />
        <element api="Overload:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure">
          <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure" />
          <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure(Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration)" />
        </element>
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.GetDefaultConfiguration" />
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.instance" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Instance(Symbiote.Core.ProgramManager)" />
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.IsRunning" />
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.logger" />
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.manager" />
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.running" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.SaveConfiguration" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Start" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker">
      <topicdata name="MQTTBroker" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" />
      <apidata name="MQTTBroker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure">
          <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure" />
          <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure(Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration)" />
        </element>
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Instance(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.SaveConfiguration" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Start" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker">
      <topicdata name="MQTTBroker" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" />
      <apidata name="MQTTBroker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configuration" />
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.IsRunning" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker">
      <topicdata name="MQTTBroker" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" />
      <apidata name="MQTTBroker" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.instance" />
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.logger" />
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.manager" />
        <element api="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.running" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure">
      <topicdata name="Configure" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Configure" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure" />
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure(Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.#ctor(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure(Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Configure" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="configuration">
          <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.GetConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="GetConfigurationDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.GetDefaultConfiguration">
      <topicdata group="api" />
      <apidata name="GetDefaultConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Instance(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.IsRunning">
      <topicdata group="api" />
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Service.IService.IsRunning">
          <type api="T:Symbiote.Core.Service.IService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.running">
      <topicdata group="api" />
      <apidata name="running" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Service.IService.Start">
          <type api="T:Symbiote.Core.Service.IService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBroker.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Service.IService.Stop">
          <type api="T:Symbiote.Core.Service.IService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBroker" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration">
      <topicdata group="api" />
      <apidata name="MQTTBrokerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration.#ctor" />
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration.Name" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration">
      <topicdata name="MQTTBrokerConfiguration" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" />
      <apidata name="MQTTBrokerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration">
      <topicdata name="MQTTBrokerConfiguration" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" />
      <apidata name="MQTTBrokerConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration.Name" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Name" />
      <setter name="set_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.IoT.MQTT" />
        <type api="T:Symbiote.Core.Service.IoT.MQTT.MQTTBrokerConfiguration" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Service.Web">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Service.Web" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Service.Web.ApiResult`1" />
        <element api="T:Symbiote.Core.Service.Web.OwinStartup" />
        <element api="T:Symbiote.Core.Service.Web.WebService" />
        <element api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Service.Web.ApiResult`1">
      <topicdata group="api" />
      <apidata name="ApiResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Symbiote.Core.Result`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Symbiote.Core.Service.Web.ApiResult`1" />
            </specialization>
          </type>
          <type api="T:Symbiote.Core.Result" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Service.Web.ApiResult`1.LogAllMessages">
          <element api="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="M:Symbiote.Core.Result`1.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result`1.Incorporate(Symbiote.Core.Result)" />
        <element api="Overload:Symbiote.Core.Service.Web.ApiResult`1.LogResult">
          <element api="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Service.Web.ApiResult`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="P:Symbiote.Core.Result`1.ReturnValue" />
        <element api="M:Symbiote.Core.Result`1.SetReturnValue(`0)" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.ApiResult`1.#ctor(System.Net.Http.HttpRequestMessage)" />
        <element api="M:Symbiote.Core.Service.Web.ApiResult`1.CreateResponse(System.Net.Http.Formatting.JsonMediaTypeFormatter)" />
        <element api="M:Symbiote.Core.Service.Web.ApiResult`1.LogRequest(System.Action{System.String})" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.RemoteIP" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.Request" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.Response" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.Route" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.ShortGuid" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.StatusCode" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.ApiResult`1">
      <topicdata name="ApiResult" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.ApiResult`1" />
      <apidata name="ApiResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:Symbiote.Core.Result.LastErrorMessage" />
        <element api="M:Symbiote.Core.Result.LastInfoMessage" />
        <element api="M:Symbiote.Core.Result.LastWarningMessage" />
        <element api="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)" />
        <element api="Overload:Symbiote.Core.Service.Web.ApiResult`1.LogAllMessages">
          <element api="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)" />
          <element api="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)" />
        </element>
        <element api="M:Symbiote.Core.Result`1.AddError(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddInfo(System.String)" />
        <element api="M:Symbiote.Core.Result`1.AddWarning(System.String)" />
        <element api="M:Symbiote.Core.Result`1.Incorporate(Symbiote.Core.Result)" />
        <element api="Overload:Symbiote.Core.Service.Web.ApiResult`1.LogResult">
          <element api="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)" />
          <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)" />
          <element api="M:Symbiote.Core.Service.Web.ApiResult`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
        </element>
        <element api="M:Symbiote.Core.Result`1.SetReturnValue(`0)" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.ApiResult`1.CreateResponse(System.Net.Http.Formatting.JsonMediaTypeFormatter)" />
        <element api="M:Symbiote.Core.Service.Web.ApiResult`1.LogRequest(System.Action{System.String})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.ApiResult`1">
      <topicdata name="ApiResult" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.ApiResult`1" />
      <apidata name="ApiResult" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:Symbiote.Core.Result.Messages" />
        <element api="P:Symbiote.Core.Result.ResultCode" />
        <element api="P:Symbiote.Core.Result`1.ReturnValue" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.RemoteIP" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.Request" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.Response" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.Route" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.ShortGuid" />
        <element api="P:Symbiote.Core.Service.Web.ApiResult`1.StatusCode" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.ApiResult`1.LogResult">
      <topicdata name="LogResult" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)" />
        <element api="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)" />
        <element api="M:Symbiote.Core.Service.Web.ApiResult`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.ApiResult`1.#ctor(System.Net.Http.HttpRequestMessage)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="request">
          <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.ApiResult`1.CreateResponse(System.Net.Http.Formatting.JsonMediaTypeFormatter)">
      <topicdata group="api" />
      <apidata name="CreateResponse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="jsonFormatter">
          <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.ApiResult`1.LogRequest(System.Action{System.String})">
      <topicdata group="api" />
      <apidata name="LogRequest" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="logLevel">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.ApiResult`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)">
      <topicdata group="api" />
      <apidata name="LogResult" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.ApiResult`1.LogResult" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="successLogLevel">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="warningLogLevel">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="failureLogLevel">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="caller" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
          <attributes>
            <attribute>
              <type api="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Symbiote.Core.Service.Web.ApiResult`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.ApiResult`1.RemoteIP">
      <topicdata group="api" />
      <apidata name="RemoteIP" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RemoteIP" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.ApiResult`1.Request">
      <topicdata group="api" />
      <apidata name="Request" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Request" />
      <setter name="set_Request" />
      <returns>
        <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.ApiResult`1.Response">
      <topicdata group="api" />
      <apidata name="Response" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Response" />
      <setter name="set_Response" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.ApiResult`1.Route">
      <topicdata group="api" />
      <apidata name="Route" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Route" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.ApiResult`1.ShortGuid">
      <topicdata group="api" />
      <apidata name="ShortGuid" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ShortGuid" />
      <setter name="set_ShortGuid" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.ApiResult`1.StatusCode">
      <topicdata group="api" />
      <apidata name="StatusCode" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_StatusCode" />
      <setter name="set_StatusCode" />
      <returns>
        <type api="T:System.Net.HttpStatusCode" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.ApiResult`1" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.OwinStartup">
      <topicdata group="api" />
      <apidata name="OwinStartup" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.OwinStartup.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.OwinStartup.Configuration(Owin.IAppBuilder)" />
        <element api="F:Symbiote.Core.Service.Web.OwinStartup.manager" />
        <element api="P:Symbiote.Core.Service.Web.OwinStartup.WebServiceConfiguration" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.OwinStartup">
      <topicdata name="OwinStartup" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.OwinStartup" />
      <apidata name="OwinStartup" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.OwinStartup.Configuration(Owin.IAppBuilder)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.OwinStartup" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.OwinStartup">
      <topicdata name="OwinStartup" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.OwinStartup" />
      <apidata name="OwinStartup" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.Web.OwinStartup.WebServiceConfiguration" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.OwinStartup" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.OwinStartup">
      <topicdata name="OwinStartup" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.OwinStartup" />
      <apidata name="OwinStartup" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.OwinStartup.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.OwinStartup" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.OwinStartup.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.OwinStartup" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.OwinStartup.Configuration(Owin.IAppBuilder)">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="app">
          <type api="T:Owin.IAppBuilder" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.OwinStartup" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.OwinStartup.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.OwinStartup" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.OwinStartup.WebServiceConfiguration">
      <topicdata group="api" />
      <apidata name="WebServiceConfiguration" group="member" subgroup="property" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_WebServiceConfiguration" />
      <setter name="set_WebServiceConfiguration" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.OwinStartup" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.WebService">
      <topicdata group="api" />
      <apidata name="WebService" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Service.IService" ref="true" />
        <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
          <specialization>
            <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.WebService.#ctor(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Service.Web.WebService.#cctor" />
        <element api="P:Symbiote.Core.Service.Web.WebService.ApiControllers" />
        <element api="F:Symbiote.Core.Service.Web.WebService.configuration" />
        <element api="P:Symbiote.Core.Service.Web.WebService.Configuration" />
        <element api="P:Symbiote.Core.Service.Web.WebService.ConfigurationDefinition" />
        <element api="Overload:Symbiote.Core.Service.Web.WebService.Configure">
          <element api="M:Symbiote.Core.Service.Web.WebService.Configure" />
          <element api="M:Symbiote.Core.Service.Web.WebService.Configure(Symbiote.Core.Service.Web.WebServiceConfiguration)" />
        </element>
        <element api="P:Symbiote.Core.Service.Web.WebService.GetConfiguration" />
        <element api="M:Symbiote.Core.Service.Web.WebService.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Service.Web.WebService.GetDefaultConfiguration" />
        <element api="P:Symbiote.Core.Service.Web.WebService.Hubs" />
        <element api="F:Symbiote.Core.Service.Web.WebService.instance" />
        <element api="M:Symbiote.Core.Service.Web.WebService.Instance(Symbiote.Core.ProgramManager)" />
        <element api="P:Symbiote.Core.Service.Web.WebService.IsRunning" />
        <element api="F:Symbiote.Core.Service.Web.WebService.logger" />
        <element api="F:Symbiote.Core.Service.Web.WebService.manager" />
        <element api="M:Symbiote.Core.Service.Web.WebService.SaveConfiguration" />
        <element api="F:Symbiote.Core.Service.Web.WebService.server" />
        <element api="M:Symbiote.Core.Service.Web.WebService.Start" />
        <element api="M:Symbiote.Core.Service.Web.WebService.Stop" />
        <element api="P:Symbiote.Core.Service.Web.WebService.URL" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.WebService">
      <topicdata name="WebService" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.WebService" />
      <apidata name="WebService" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.WebService.Configure">
          <element api="M:Symbiote.Core.Service.Web.WebService.Configure" />
          <element api="M:Symbiote.Core.Service.Web.WebService.Configure(Symbiote.Core.Service.Web.WebServiceConfiguration)" />
        </element>
        <element api="M:Symbiote.Core.Service.Web.WebService.GetConfigurationDefinition" />
        <element api="M:Symbiote.Core.Service.Web.WebService.GetDefaultConfiguration" />
        <element api="M:Symbiote.Core.Service.Web.WebService.Instance(Symbiote.Core.ProgramManager)" />
        <element api="M:Symbiote.Core.Service.Web.WebService.SaveConfiguration" />
        <element api="M:Symbiote.Core.Service.Web.WebService.Start" />
        <element api="M:Symbiote.Core.Service.Web.WebService.Stop" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.WebService">
      <topicdata name="WebService" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.WebService" />
      <apidata name="WebService" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.Web.WebService.ApiControllers" />
        <element api="P:Symbiote.Core.Service.Web.WebService.Configuration" />
        <element api="P:Symbiote.Core.Service.Web.WebService.ConfigurationDefinition" />
        <element api="P:Symbiote.Core.Service.Web.WebService.GetConfiguration" />
        <element api="P:Symbiote.Core.Service.Web.WebService.Hubs" />
        <element api="P:Symbiote.Core.Service.Web.WebService.IsRunning" />
        <element api="P:Symbiote.Core.Service.Web.WebService.URL" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.WebService">
      <topicdata name="WebService" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.WebService" />
      <apidata name="WebService" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.WebService.configuration" />
        <element api="F:Symbiote.Core.Service.Web.WebService.instance" />
        <element api="F:Symbiote.Core.Service.Web.WebService.logger" />
        <element api="F:Symbiote.Core.Service.Web.WebService.manager" />
        <element api="F:Symbiote.Core.Service.Web.WebService.server" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.WebService.Configure">
      <topicdata name="Configure" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Configure" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.WebService.Configure" />
        <element api="M:Symbiote.Core.Service.Web.WebService.Configure(Symbiote.Core.Service.Web.WebServiceConfiguration)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.#ctor(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebService.ApiControllers">
      <topicdata group="api" />
      <apidata name="ApiControllers" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_ApiControllers" />
      <setter name="set_ApiControllers" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.WebService.configuration">
      <topicdata group="api" />
      <apidata name="configuration" group="member" subgroup="field" />
      <memberdata visibility="assembly" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ThreadStaticAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebService.Configuration">
      <topicdata group="api" />
      <apidata name="Configuration" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Configuration" />
      <setter name="set_Configuration" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebService.ConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="ConfigurationDefinition" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_ConfigurationDefinition" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.Configure">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.WebService.Configure" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.Configure(Symbiote.Core.Service.Web.WebServiceConfiguration)">
      <topicdata group="api" />
      <apidata name="Configure" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.WebService.Configure" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="configuration">
          <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebService.GetConfiguration">
      <topicdata group="api" />
      <apidata name="GetConfiguration" group="member" subgroup="property" />
      <memberdata visibility="assembly" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_GetConfiguration" />
      <setter name="set_GetConfiguration" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.GetConfigurationDefinition">
      <topicdata group="api" />
      <apidata name="GetConfigurationDefinition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Configuration.ConfigurationDefinition" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.GetDefaultConfiguration">
      <topicdata group="api" />
      <apidata name="GetDefaultConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebService.Hubs">
      <topicdata group="api" />
      <apidata name="Hubs" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Hubs" />
      <setter name="set_Hubs" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.WebService.instance">
      <topicdata group="api" />
      <apidata name="instance" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.Instance(Symbiote.Core.ProgramManager)">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebService.IsRunning">
      <topicdata group="api" />
      <apidata name="IsRunning" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsRunning" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:Symbiote.Core.Service.IService.IsRunning">
          <type api="T:Symbiote.Core.Service.IService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.WebService.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.WebService.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.SaveConfiguration">
      <topicdata group="api" />
      <apidata name="SaveConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
          <type api="T:Symbiote.Core.Configuration.IConfigurable`1" ref="true">
            <specialization>
              <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.WebService.server">
      <topicdata group="api" />
      <apidata name="server" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.IDisposable" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.Start">
      <topicdata group="api" />
      <apidata name="Start" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Service.IService.Start">
          <type api="T:Symbiote.Core.Service.IService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebService.Stop">
      <topicdata group="api" />
      <apidata name="Stop" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Service.IService.Stop">
          <type api="T:Symbiote.Core.Service.IService" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebService.URL">
      <topicdata group="api" />
      <apidata name="URL" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_URL" />
      <setter name="set_URL" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebService" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.WebServiceConfiguration">
      <topicdata group="api" />
      <apidata name="WebServiceConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.WebServiceConfiguration.#ctor" />
        <element api="P:Symbiote.Core.Service.Web.WebServiceConfiguration.Port" />
        <element api="P:Symbiote.Core.Service.Web.WebServiceConfiguration.Root" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.WebServiceConfiguration">
      <topicdata name="WebServiceConfiguration" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.WebServiceConfiguration" />
      <apidata name="WebServiceConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.WebServiceConfiguration">
      <topicdata name="WebServiceConfiguration" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.WebServiceConfiguration" />
      <apidata name="WebServiceConfiguration" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.Web.WebServiceConfiguration.Port" />
        <element api="P:Symbiote.Core.Service.Web.WebServiceConfiguration.Root" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.WebServiceConfiguration.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebServiceConfiguration.Port">
      <topicdata group="api" />
      <apidata name="Port" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Port" />
      <setter name="set_Port" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.WebServiceConfiguration.Root">
      <topicdata group="api" />
      <apidata name="Root" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Root" />
      <setter name="set_Root" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web" />
        <type api="T:Symbiote.Core.Service.Web.WebServiceConfiguration" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Service.Web.API">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Service.Web.API" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Service.Web.API.PluginController" />
        <element api="T:Symbiote.Core.Service.Web.API.BrowseController" />
        <element api="T:Symbiote.Core.Service.Web.API.ConfigurationController" />
        <element api="T:Symbiote.Core.Service.Web.API.LogController" />
        <element api="T:Symbiote.Core.Service.Web.API.ReadController" />
        <element api="T:Symbiote.Core.Service.Web.API.ValuesController" />
        <element api="T:Symbiote.Core.Service.Web.API.IApiController" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Service.Web.API.BrowseController">
      <topicdata group="api" />
      <apidata name="BrowseController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Http.ApiController" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.BrowseController.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.API.BrowseController.#cctor" />
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Browse">
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse" />
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String)" />
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String,System.String)" />
        </element>
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.conciseSerializationProperties" />
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter">
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter" />
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        </element>
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.model" />
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.verboseSerializationProperties" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.API.BrowseController">
      <topicdata name="BrowseController" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.API.BrowseController" />
      <apidata name="BrowseController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.Browse">
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse" />
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String)" />
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String,System.String)" />
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter">
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter" />
          <element api="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.API.BrowseController">
      <topicdata name="BrowseController" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.API.BrowseController" />
      <apidata name="BrowseController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.API.BrowseController">
      <topicdata name="BrowseController" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.API.BrowseController" />
      <apidata name="BrowseController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.conciseSerializationProperties" />
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.model" />
        <element api="F:Symbiote.Core.Service.Web.API.BrowseController.verboseSerializationProperties" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.API.BrowseController.Browse">
      <topicdata name="Browse" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Browse" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse" />
        <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter">
      <topicdata name="JsonFormatter" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter" />
        <element api="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.BrowseController.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.BrowseController.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.BrowseController.Browse">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.BrowseController.Browse" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/browse</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String)">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.BrowseController.Browse" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="verbosity">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/browse/{verbosity}</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.BrowseController.Browse(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="Browse" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.BrowseController.Browse" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="verbosity" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>verbose</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/browse/{fqn}/{verbosity}</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.BrowseController.conciseSerializationProperties">
      <topicdata group="api" />
      <apidata name="conciseSerializationProperties" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter">
      <topicdata group="api" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" overload="Overload:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <topicdata group="api" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" overload="Overload:Symbiote.Core.Service.Web.API.BrowseController.JsonFormatter" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="serializationProperties">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="contractResolverType">
          <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
            <type api="T:Symbiote.Core.ContractResolver" ref="true" />
          </type>
        </parameter>
        <parameter name="includeSecondaryTypes" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.BrowseController.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.BrowseController.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.BrowseController.model">
      <topicdata group="api" />
      <apidata name="model" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.BrowseController.verboseSerializationProperties">
      <topicdata group="api" />
      <apidata name="verboseSerializationProperties" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.BrowseController" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.API.ConfigurationController">
      <topicdata group="api" />
      <apidata name="ConfigurationController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Http.ApiController" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ConfigurationController.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.API.ConfigurationController.#cctor" />
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.configuration" />
        <element api="M:Symbiote.Core.Service.Web.API.ConfigurationController.GetConfiguration" />
        <element api="M:Symbiote.Core.Service.Web.API.ConfigurationController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.serializationProperties" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.API.ConfigurationController">
      <topicdata name="ConfigurationController" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.API.ConfigurationController" />
      <apidata name="ConfigurationController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ConfigurationController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ConfigurationController.GetConfiguration" />
        <element api="M:Symbiote.Core.Service.Web.API.ConfigurationController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.API.ConfigurationController">
      <topicdata name="ConfigurationController" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.API.ConfigurationController" />
      <apidata name="ConfigurationController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.API.ConfigurationController">
      <topicdata name="ConfigurationController" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.API.ConfigurationController" />
      <apidata name="ConfigurationController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.configuration" />
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.ConfigurationController.serializationProperties" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ConfigurationController.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ConfigurationController.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.ConfigurationController.configuration">
      <topicdata group="api" />
      <apidata name="configuration" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.Type" ref="true" />
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ConfigurationController.GetConfiguration">
      <topicdata group="api" />
      <apidata name="GetConfiguration" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/configuration</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ConfigurationController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <topicdata group="api" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="serializationProperties">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="contractResolverType">
          <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
            <type api="T:Symbiote.Core.ContractResolver" ref="true" />
          </type>
        </parameter>
        <parameter name="includeSecondaryTypes" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.ConfigurationController.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.ConfigurationController.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.ConfigurationController.serializationProperties">
      <topicdata group="api" />
      <apidata name="serializationProperties" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ConfigurationController" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.API.IApiController">
      <topicdata group="api" />
      <apidata name="IApiController" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" ref="true" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </implementors>
      <elements>
        <element api="M:Symbiote.Core.Service.Web.API.IApiController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.API.IApiController">
      <topicdata name="IApiController" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.API.IApiController" />
      <apidata name="IApiController" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.API.IApiController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.IApiController" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.IApiController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <topicdata group="api" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="serializationProperties">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="contractResolverType">
          <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
            <type api="T:Symbiote.Core.ContractResolver" ref="true" />
          </type>
        </parameter>
        <parameter name="includeSecondaryTypes">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.IApiController" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.API.LogController">
      <topicdata group="api" />
      <apidata name="LogController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Http.ApiController" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Service.Web.API.IApiController" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.LogController.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.API.LogController.#cctor" />
        <element api="M:Symbiote.Core.Service.Web.API.LogController.GetLog" />
        <element api="M:Symbiote.Core.Service.Web.API.LogController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        <element api="F:Symbiote.Core.Service.Web.API.LogController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.LogController.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.API.LogController">
      <topicdata name="LogController" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.API.LogController" />
      <apidata name="LogController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.LogController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.LogController.GetLog" />
        <element api="M:Symbiote.Core.Service.Web.API.LogController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.API.LogController">
      <topicdata name="LogController" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.API.LogController" />
      <apidata name="LogController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.API.LogController">
      <topicdata name="LogController" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.API.LogController" />
      <apidata name="LogController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.API.LogController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.LogController.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.LogController.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.LogController.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.LogController.GetLog">
      <topicdata group="api" />
      <apidata name="GetLog" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/log</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.LogController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <topicdata group="api" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="serializationProperties">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="contractResolverType">
          <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
            <type api="T:Symbiote.Core.ContractResolver" ref="true" />
          </type>
        </parameter>
        <parameter name="includeSecondaryTypes" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.API.IApiController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
          <type api="T:Symbiote.Core.Service.Web.API.IApiController" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.LogController.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.LogController.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.LogController" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.API.PluginController">
      <topicdata group="api" />
      <apidata name="PluginController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Http.ApiController" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Service.Web.API.IApiController" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.#cctor" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.DownloadPluginArchive(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.GetPluginArchive(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.InstallPlugin(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.ListPluginArchives" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.ListPlugins" />
        <element api="F:Symbiote.Core.Service.Web.API.PluginController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.PluginController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.PluginController.pluginArchiveSerializationProperties" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.ReloadPluginArchives" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.UninstallPlugin(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.API.PluginController">
      <topicdata name="PluginController" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.API.PluginController" />
      <apidata name="PluginController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.PluginController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.DownloadPluginArchive(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.GetPluginArchive(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.InstallPlugin(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.ListPluginArchives" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.ListPlugins" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.ReloadPluginArchives" />
        <element api="M:Symbiote.Core.Service.Web.API.PluginController.UninstallPlugin(System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.API.PluginController">
      <topicdata name="PluginController" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.API.PluginController" />
      <apidata name="PluginController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.API.PluginController">
      <topicdata name="PluginController" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.API.PluginController" />
      <apidata name="PluginController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.API.PluginController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.PluginController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.PluginController.pluginArchiveSerializationProperties" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.DownloadPluginArchive(System.String)">
      <topicdata group="api" />
      <apidata name="DownloadPluginArchive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/plugin/archive/{fileName}/download</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.GetPluginArchive(System.String)">
      <topicdata group="api" />
      <apidata name="GetPluginArchive" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/plugin/archive/{fileName}</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.InstallPlugin(System.String)">
      <topicdata group="api" />
      <apidata name="InstallPlugin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/plugin/archive/{fileName}/install</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <topicdata group="api" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="serializationProperties">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="contractResolverType">
          <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
            <type api="T:Symbiote.Core.ContractResolver" ref="true" />
          </type>
        </parameter>
        <parameter name="includeSecondaryTypes" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.API.IApiController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
          <type api="T:Symbiote.Core.Service.Web.API.IApiController" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.ListPluginArchives">
      <topicdata group="api" />
      <apidata name="ListPluginArchives" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/plugin/archive</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.ListPlugins">
      <topicdata group="api" />
      <apidata name="ListPlugins" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/plugin</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.PluginController.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.PluginController.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.PluginController.pluginArchiveSerializationProperties">
      <topicdata group="api" />
      <apidata name="pluginArchiveSerializationProperties" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.ReloadPluginArchives">
      <topicdata group="api" />
      <apidata name="ReloadPluginArchives" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/plugin/archive/reload</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.PluginController.UninstallPlugin(System.String)">
      <topicdata group="api" />
      <apidata name="UninstallPlugin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.PluginController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/plugin/{fqn}/uninstall</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Symbiote.Core.Service.Web.API.ReadController">
      <topicdata group="api" />
      <apidata name="ReadController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Http.ApiController" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Service.Web.API.IApiController" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ReadController.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.API.ReadController.#cctor" />
        <element api="M:Symbiote.Core.Service.Web.API.ReadController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        <element api="F:Symbiote.Core.Service.Web.API.ReadController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.ReadController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.ReadController.model" />
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Read">
          <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read" />
          <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String)" />
          <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String,System.Boolean)" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.API.ReadController">
      <topicdata name="ReadController" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.API.ReadController" />
      <apidata name="ReadController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ReadController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)" />
        <element api="Overload:Symbiote.Core.Service.Web.API.ReadController.Read">
          <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read" />
          <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String)" />
          <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String,System.Boolean)" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.API.ReadController">
      <topicdata name="ReadController" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.API.ReadController" />
      <apidata name="ReadController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.API.ReadController">
      <topicdata name="ReadController" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.API.ReadController" />
      <apidata name="ReadController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.API.ReadController.logger" />
        <element api="F:Symbiote.Core.Service.Web.API.ReadController.manager" />
        <element api="F:Symbiote.Core.Service.Web.API.ReadController.model" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.API.ReadController.Read">
      <topicdata name="Read" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Read" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read" />
        <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ReadController.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ReadController.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ReadController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <topicdata group="api" />
      <apidata name="JsonFormatter" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="serializationProperties">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="contractResolverType">
          <type api="T:Symbiote.Core.ContractResolver.ContractResolverType" ref="false">
            <type api="T:Symbiote.Core.ContractResolver" ref="true" />
          </type>
        </parameter>
        <parameter name="includeSecondaryTypes" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" ref="true" />
      </returns>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.API.IApiController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
          <type api="T:Symbiote.Core.Service.Web.API.IApiController" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.ReadController.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.ReadController.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.API.ReadController.model">
      <topicdata group="api" />
      <apidata name="model" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Item" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ReadController.Read">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.ReadController.Read" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/read</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.ReadController.Read" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/read/{fqn}</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ReadController.Read(System.String,System.Boolean)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.ReadController.Read" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fromSource">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ReadController" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Web.Http.RouteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>api/read/{fqn}/{fromSource}</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Web.Http.HttpGetAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Symbiote.Core.Service.Web.API.ValuesController">
      <topicdata group="api" />
      <apidata name="ValuesController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Http.ApiController" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Delete(System.Int32)" />
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Get">
          <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Get" />
          <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Get(System.Int32)" />
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Post(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Put(System.Int32,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.API.ValuesController">
      <topicdata name="ValuesController" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.API.ValuesController" />
      <apidata name="ValuesController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
          <apidata name="ExecuteAsync" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
            <parameter name="cancellationToken">
              <type api="T:System.Threading.CancellationToken" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Threading.Tasks.Task`1" ref="true">
              <specialization>
                <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
              <type api="T:System.Web.Http.Controllers.IHttpController" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Validate">
          <element api="M:System.Web.Http.ApiController.Validate``1(``0)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0)" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
            <apidata name="Validate" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="false" />
            <templates>
              <template name="TEntity" />
            </templates>
            <parameters>
              <parameter name="entity">
                <template name="TEntity" index="0" api="M:System.Web.Http.ApiController.Validate``1(``0,System.String)" />
              </parameter>
              <parameter name="keyPrefix">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.BadRequest">
          <element api="M:System.Web.Http.ApiController.BadRequest">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.String)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="message">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.BadRequestErrorMessageResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <apidata name="BadRequest" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="modelState">
                <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.InvalidModelStateResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Conflict">
          <apidata name="Conflict" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.ConflictResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Content">
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.NegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <apidata name="Content" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="statusCode">
                <type api="T:System.Net.HttpStatusCode" ref="false" />
              </parameter>
              <parameter name="value">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
              </parameter>
              <parameter name="formatter">
                <type api="T:System.Net.Http.Formatting.MediaTypeFormatter" ref="true" />
              </parameter>
              <parameter name="mediaType">
                <type api="T:System.Net.Http.Headers.MediaTypeHeaderValue" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.FormattedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Created">
          <element api="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.String,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
            <apidata name="Created" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.CreatedAtRoute">
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <apidata name="CreatedAtRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.InternalServerError">
          <element api="M:System.Web.Http.ApiController.InternalServerError">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.InternalServerErrorResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
            <apidata name="InternalServerError" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="exception">
                <type api="T:System.Exception" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.ExceptionResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Json">
          <element api="M:System.Web.Http.ApiController.Json``1(``0)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <apidata name="Json" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
              </parameter>
              <parameter name="serializerSettings">
                <type api="T:Newtonsoft.Json.JsonSerializerSettings" ref="true" />
              </parameter>
              <parameter name="encoding">
                <type api="T:System.Text.Encoding" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.JsonResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.NotFound">
          <apidata name="NotFound" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Web.Http.Results.NotFoundResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Ok">
          <element api="M:System.Web.Http.ApiController.Ok">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <returns>
              <type api="T:System.Web.Http.Results.OkResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Ok``1(``0)">
            <apidata name="Ok" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <templates>
              <template name="T" />
            </templates>
            <parameters>
              <parameter name="content">
                <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.OkNegotiatedContentResult`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:System.Web.Http.ApiController.Ok``1(``0)" />
                </specialization>
              </type>
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Redirect">
          <element api="M:System.Web.Http.ApiController.Redirect(System.String)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.String" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Redirect(System.Uri)">
            <apidata name="Redirect" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="location">
                <type api="T:System.Uri" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.RedirectToRoute">
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Object" ref="true" />
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <apidata name="RedirectToRoute" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="routeName">
                <type api="T:System.String" ref="true" />
              </parameter>
              <parameter name="routeValues">
                <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
                  <specialization>
                    <type api="T:System.String" ref="true" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.RedirectToRouteResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
          <apidata name="ResponseMessage" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="response">
              <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.ResponseMessageResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
          <apidata name="StatusCode" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="status">
              <type api="T:System.Net.HttpStatusCode" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Web.Http.Results.StatusCodeResult" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Unauthorized">
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="false" />
            <parameters>
              <parameter name="challenges" params="true">
                <arrayOf rank="1">
                  <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                </arrayOf>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <apidata name="Unauthorized" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="challenges">
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <type api="T:System.Net.Http.Headers.AuthenticationHeaderValue" ref="true" />
                  </specialization>
                </type>
              </parameter>
            </parameters>
            <returns>
              <type api="T:System.Web.Http.Results.UnauthorizedResult" ref="true" />
            </returns>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
          <apidata name="Initialize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="controllerContext">
              <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
            </parameter>
          </parameters>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Dispose">
          <element api="M:System.Web.Http.ApiController.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
          <element api="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:System.Web.Http" />
              <type api="T:System.Web.Http.ApiController" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Delete(System.Int32)" />
        <element api="Overload:Symbiote.Core.Service.Web.API.ValuesController.Get">
          <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Get" />
          <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Get(System.Int32)" />
        </element>
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Post(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Put(System.Int32,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.API.ValuesController">
      <topicdata name="ValuesController" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.API.ValuesController" />
      <apidata name="ValuesController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Web.Http.ApiController.Configuration">
          <apidata name="Configuration" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Configuration" />
          <setter name="set_Configuration" />
          <returns>
            <type api="T:System.Web.Http.HttpConfiguration" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ControllerContext">
          <apidata name="ControllerContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ControllerContext" />
          <setter name="set_ControllerContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpControllerContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ActionContext">
          <apidata name="ActionContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_ActionContext" />
          <setter name="set_ActionContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.ModelState">
          <apidata name="ModelState" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_ModelState" />
          <returns>
            <type api="T:System.Web.Http.ModelBinding.ModelStateDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Request">
          <apidata name="Request" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Request" />
          <setter name="set_Request" />
          <returns>
            <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.RequestContext">
          <apidata name="RequestContext" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_RequestContext" />
          <setter name="set_RequestContext" />
          <returns>
            <type api="T:System.Web.Http.Controllers.HttpRequestContext" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.Url">
          <apidata name="Url" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_Url" />
          <setter name="set_Url" />
          <returns>
            <type api="T:System.Web.Http.Routing.UrlHelper" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
        <element api="P:System.Web.Http.ApiController.User">
          <apidata name="User" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" />
          <getter name="get_User" />
          <setter name="set_User" />
          <returns>
            <type api="T:System.Security.Principal.IPrincipal" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Web.Http" module="System.Web.Http" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Web.Http" />
            <type api="T:System.Web.Http.ApiController" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.API.ValuesController.Get">
      <topicdata name="Get" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Get" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Get" />
        <element api="M:Symbiote.Core.Service.Web.API.ValuesController.Get(System.Int32)" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ValuesController.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ValuesController.Delete(System.Int32)">
      <topicdata group="api" />
      <apidata name="Delete" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ValuesController.Get">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.ValuesController.Get" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ValuesController.Get(System.Int32)">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.API.ValuesController.Get" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ValuesController.Post(System.String)">
      <topicdata group="api" />
      <apidata name="Post" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
          <attributes>
            <attribute>
              <type api="T:System.Web.Http.FromBodyAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.API.ValuesController.Put(System.Int32,System.String)">
      <topicdata group="api" />
      <apidata name="Put" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="id">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <type api="T:System.String" ref="true" />
          <attributes>
            <attribute>
              <type api="T:System.Web.Http.FromBodyAttribute" ref="true" />
            </attribute>
          </attributes>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.API" />
        <type api="T:Symbiote.Core.Service.Web.API.ValuesController" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Core.Service.Web.SignalR">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Service.Web.SignalR" group="namespace" />
      <elements>
        <element api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" />
        <element api="T:Symbiote.Core.Service.Web.SignalR.LogHub" />
        <element api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" />
        <element api="T:Symbiote.Core.Service.Web.SignalR.IHub" />
      </elements>
    </api>
    <api id="T:Symbiote.Core.Service.Web.SignalR.HubHelper">
      <topicdata group="api" />
      <apidata name="HubHelper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.#ctor(Symbiote.Core.ProgramManager,Symbiote.Core.Service.Web.SignalR.IHub)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.#cctor" />
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
        <element api="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Hub" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.HubHelper.logger" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.HubHelper.manager" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.OnChange(System.Object,System.EventArgs)" />
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
        <element api="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscriptions" />
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.SignalR.HubHelper">
      <topicdata name="HubHelper" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.HubHelper" />
      <apidata name="HubHelper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.OnChange(System.Object,System.EventArgs)" />
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe">
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String)" />
          <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.SignalR.HubHelper">
      <topicdata name="HubHelper" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.HubHelper" />
      <apidata name="HubHelper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Hub" />
        <element api="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscriptions" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.SignalR.HubHelper">
      <topicdata name="HubHelper" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.HubHelper" />
      <apidata name="HubHelper" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.SignalR.HubHelper.logger" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.HubHelper.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions">
      <topicdata name="GetClientSubscriptions" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="GetClientSubscriptions" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions">
      <topicdata name="GetSubscriptions" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="GetSubscriptions" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe">
      <topicdata name="Subscribe" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Subscribe" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe">
      <topicdata name="Unsubscribe" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="Unsubscribe" group="member" subgroup="method" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.#ctor(Symbiote.Core.ProgramManager,Symbiote.Core.Service.Web.SignalR.IHub)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="manager">
          <type api="T:Symbiote.Core.ProgramManager" ref="true" />
        </parameter>
        <parameter name="hub">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String)">
      <topicdata group="api" />
      <apidata name="GetClientSubscriptions" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="client">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <topicdata group="api" />
      <apidata name="GetClientSubscriptions" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="client">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <type api="T:System.Collections.Generic.List`1" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object)">
      <topicdata group="api" />
      <apidata name="GetSubscriptions" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <topicdata group="api" />
      <apidata name="GetSubscriptions" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <type api="T:System.Collections.Generic.List`1" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Hub">
      <topicdata group="api" />
      <apidata name="Hub" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Hub" />
      <setter name="set_Hub" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.HubHelper.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.HubHelper.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.OnChange(System.Object,System.EventArgs)">
      <topicdata group="api" />
      <apidata name="OnChange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.EventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String)">
      <topicdata group="api" />
      <apidata name="Subscribe" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="client">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <topicdata group="api" />
      <apidata name="Subscribe" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="client">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <type api="T:System.Collections.Generic.List`1" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscriptions">
      <topicdata group="api" />
      <apidata name="Subscriptions" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" set-visibility="private" />
      <getter name="get_Subscriptions" />
      <setter name="set_Subscriptions" />
      <returns>
        <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String)">
      <topicdata group="api" />
      <apidata name="Unsubscribe" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="client">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <topicdata group="api" />
      <apidata name="Unsubscribe" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="client">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="dictionary">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <type api="T:System.Collections.Generic.List`1" ref="true">
                <specialization>
                  <type api="T:System.String" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Symbiote.Core.Result" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.SignalR.IHub">
      <topicdata group="api" />
      <apidata name="IHub" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </implementors>
      <elements>
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Read(System.Object,System.EventArgs)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Subscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Unsubscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Write(System.Object[])" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.WriteToSource(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.SignalR.IHub">
      <topicdata name="IHub" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.IHub" />
      <apidata name="IHub" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Read(System.Object,System.EventArgs)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Subscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Unsubscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.Write(System.Object[])" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.IHub.WriteToSource(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.IHub.Read(System.Object,System.EventArgs)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.EventArgs" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.IHub.Subscribe(System.Object)">
      <topicdata group="api" />
      <apidata name="Subscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.IHub.Unsubscribe(System.Object)">
      <topicdata group="api" />
      <apidata name="Unsubscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.IHub.Write(System.Object[])">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.IHub.WriteToSource(System.Object[])">
      <topicdata group="api" />
      <apidata name="WriteToSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.SignalR.ItemHub">
      <topicdata group="api" />
      <apidata name="ItemHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </implements>
      <elements>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.ItemHub.Dispose">
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Clients">
          <apidata name="Clients" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Clients" />
          <setter name="set_Clients" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Context">
          <apidata name="Context" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Context" />
          <setter name="set_Context" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Groups">
          <apidata name="Groups" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Groups" />
          <setter name="set_Groups" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.IGroupManager" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.#cctor" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.GetLogPrefix" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.ItemHub.hubManager" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.ItemHub.logger" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.ItemHub.manager" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnConnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnDisconnected(System.Boolean)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnReconnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Read(System.Object,System.EventArgs)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Subscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Unsubscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Write(System.Object[])" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.WriteToSource(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.SignalR.ItemHub">
      <topicdata name="ItemHub" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.ItemHub" />
      <apidata name="ItemHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.ItemHub.Dispose">
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.GetLogPrefix" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnConnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnDisconnected(System.Boolean)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnReconnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Read(System.Object,System.EventArgs)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Subscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Unsubscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Write(System.Object[])" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.ItemHub.WriteToSource(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.SignalR.ItemHub">
      <topicdata name="ItemHub" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.ItemHub" />
      <apidata name="ItemHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Clients">
          <apidata name="Clients" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Clients" />
          <setter name="set_Clients" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Context">
          <apidata name="Context" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Context" />
          <setter name="set_Context" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Groups">
          <apidata name="Groups" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Groups" />
          <setter name="set_Groups" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.IGroupManager" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.SignalR.ItemHub">
      <topicdata name="ItemHub" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.ItemHub" />
      <apidata name="ItemHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.SignalR.ItemHub.hubManager" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.ItemHub.logger" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.ItemHub.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.GetLogPrefix">
      <topicdata group="api" />
      <apidata name="GetLogPrefix" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.ItemHub.hubManager">
      <topicdata group="api" />
      <apidata name="hubManager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.ItemHub.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.ItemHub.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnConnected">
      <topicdata group="api" />
      <apidata name="OnConnected" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.AspNet.SignalR.Hub.OnConnected">
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected">
          <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnDisconnected(System.Boolean)">
      <topicdata group="api" />
      <apidata name="OnDisconnected" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.AspNet.SignalR.Hub.OnDisconnected(System.Boolean)">
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="stopCalled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected(System.Boolean)">
          <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnReconnected">
      <topicdata group="api" />
      <apidata name="OnReconnected" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.AspNet.SignalR.Hub.OnReconnected">
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected">
          <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Read(System.Object,System.EventArgs)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.EventArgs" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Read(System.Object,System.EventArgs)">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Subscribe(System.Object)">
      <topicdata group="api" />
      <apidata name="Subscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="arg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Subscribe(System.Object)">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Unsubscribe(System.Object)">
      <topicdata group="api" />
      <apidata name="Unsubscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="arg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Unsubscribe(System.Object)">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Write(System.Object[])">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Write(System.Object[])">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.ItemHub.WriteToSource(System.Object[])">
      <topicdata group="api" />
      <apidata name="WriteToSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.WriteToSource(System.Object[])">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.ItemHub" ref="true" />
      </containers>
    </api>
    <api id="T:Symbiote.Core.Service.Web.SignalR.LogHub">
      <topicdata group="api" />
      <apidata name="LogHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
      </implements>
      <elements>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.LogHub.Dispose">
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Clients">
          <apidata name="Clients" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Clients" />
          <setter name="set_Clients" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Context">
          <apidata name="Context" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Context" />
          <setter name="set_Context" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Groups">
          <apidata name="Groups" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Groups" />
          <setter name="set_Groups" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.IGroupManager" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.#ctor" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.#cctor" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.GetLogPrefix" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.LogHub.hubManager" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.LogHub.logger" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.LogHub.manager" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnConnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnDisconnected(System.Boolean)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnReconnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Read(System.Object,System.EventArgs)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Subscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Unsubscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Write(System.Object[])" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.WriteToSource(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Core.Service.Web.SignalR.LogHub">
      <topicdata name="LogHub" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.LogHub" />
      <apidata name="LogHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="Overload:Symbiote.Core.Service.Web.SignalR.LogHub.Dispose">
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="public" />
            <proceduredata virtual="true" final="true" />
            <implements>
              <member api="M:System.IDisposable.Dispose">
                <type api="T:System.IDisposable" ref="true" />
              </member>
            </implements>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
          <element api="M:Microsoft.AspNet.SignalR.Hub.Dispose(System.Boolean)">
            <apidata name="Dispose" group="member" subgroup="method" />
            <memberdata visibility="family" />
            <proceduredata virtual="true" />
            <parameters>
              <parameter name="disposing">
                <type api="T:System.Boolean" ref="false" />
              </parameter>
            </parameters>
            <containers>
              <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
              <namespace api="N:Microsoft.AspNet.SignalR" />
              <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
            </containers>
          </element>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.GetLogPrefix" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnConnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnDisconnected(System.Boolean)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnReconnected" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Read(System.Object,System.EventArgs)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Subscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Unsubscribe(System.Object)" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.Write(System.Object[])" />
        <element api="M:Symbiote.Core.Service.Web.SignalR.LogHub.WriteToSource(System.Object[])" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" />
      </containers>
    </api>
    <api id="Properties.T:Symbiote.Core.Service.Web.SignalR.LogHub">
      <topicdata name="LogHub" group="list" subgroup="Properties" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.LogHub" />
      <apidata name="LogHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Clients">
          <apidata name="Clients" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Clients" />
          <setter name="set_Clients" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext`1" ref="true">
              <specialization>
                <type api="T:System.Object" ref="true" />
              </specialization>
            </type>
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Clients">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Context">
          <apidata name="Context" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Context" />
          <setter name="set_Context" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.Hubs.HubCallerContext" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Context">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
        <element api="P:Microsoft.AspNet.SignalR.Hub.Groups">
          <apidata name="Groups" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Groups" />
          <setter name="set_Groups" />
          <returns>
            <type api="T:Microsoft.AspNet.SignalR.IGroupManager" ref="true" />
          </returns>
          <implements>
            <member api="P:Microsoft.AspNet.SignalR.Hubs.IHub.Groups">
              <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="Microsoft.AspNet.SignalR.Core" module="Microsoft.AspNet.SignalR.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Microsoft.AspNet.SignalR" />
            <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" />
      </containers>
    </api>
    <api id="Fields.T:Symbiote.Core.Service.Web.SignalR.LogHub">
      <topicdata name="LogHub" group="list" subgroup="Fields" typeTopicId="T:Symbiote.Core.Service.Web.SignalR.LogHub" />
      <apidata name="LogHub" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="F:Symbiote.Core.Service.Web.SignalR.LogHub.hubManager" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.LogHub.logger" />
        <element api="F:Symbiote.Core.Service.Web.SignalR.LogHub.manager" />
      </elements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.#cctor">
      <topicdata group="api" />
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.GetLogPrefix">
      <topicdata group="api" />
      <apidata name="GetLogPrefix" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.LogHub.hubManager">
      <topicdata group="api" />
      <apidata name="hubManager" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.Service.Web.SignalR.HubHelper" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.LogHub.logger">
      <topicdata group="api" />
      <apidata name="logger" group="member" subgroup="field" />
      <memberdata visibility="private" static="true" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:NLog.Logger" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="F:Symbiote.Core.Service.Web.SignalR.LogHub.manager">
      <topicdata group="api" />
      <apidata name="manager" group="member" subgroup="field" />
      <memberdata visibility="private" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:Symbiote.Core.ProgramManager" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnConnected">
      <topicdata group="api" />
      <apidata name="OnConnected" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.AspNet.SignalR.Hub.OnConnected">
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnConnected">
          <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnDisconnected(System.Boolean)">
      <topicdata group="api" />
      <apidata name="OnDisconnected" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.AspNet.SignalR.Hub.OnDisconnected(System.Boolean)">
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="stopCalled">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnDisconnected(System.Boolean)">
          <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnReconnected">
      <topicdata group="api" />
      <apidata name="OnReconnected" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Microsoft.AspNet.SignalR.Hub.OnReconnected">
          <type api="T:Microsoft.AspNet.SignalR.Hub" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <implements>
        <member api="M:Microsoft.AspNet.SignalR.Hubs.IHub.OnReconnected">
          <type api="T:Microsoft.AspNet.SignalR.Hubs.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.Read(System.Object,System.EventArgs)">
      <topicdata group="api" />
      <apidata name="Read" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sender">
          <type api="T:System.Object" ref="true" />
        </parameter>
        <parameter name="e">
          <type api="T:System.EventArgs" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Read(System.Object,System.EventArgs)">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.Subscribe(System.Object)">
      <topicdata group="api" />
      <apidata name="Subscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="arg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Subscribe(System.Object)">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.Unsubscribe(System.Object)">
      <topicdata group="api" />
      <apidata name="Unsubscribe" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="arg">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Unsubscribe(System.Object)">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.Write(System.Object[])">
      <topicdata group="api" />
      <apidata name="Write" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.Write(System.Object[])">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Core.Service.Web.SignalR.LogHub.WriteToSource(System.Object[])">
      <topicdata group="api" />
      <apidata name="WriteToSource" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:Symbiote.Core.Service.Web.SignalR.IHub.WriteToSource(System.Object[])">
          <type api="T:Symbiote.Core.Service.Web.SignalR.IHub" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Symbiote" module="Symbiote" kind="ConsoleApplication">
          <assemblydata version="0.5.0.0 (0.5.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Core.Service.Web.SignalR" />
        <type api="T:Symbiote.Core.Service.Web.SignalR.LogHub" ref="true" />
      </containers>
    </api>
    <api id="N:Symbiote.Cryptography">
      <topicdata group="api" />
      <apidata name="Symbiote.Cryptography" group="namespace" />
      <elements>
        <element api="T:Symbiote.Cryptography.FingerprintValidator" />
      </elements>
    </api>
    <api id="T:Symbiote.Cryptography.FingerprintValidator">
      <topicdata group="api" />
      <apidata name="FingerprintValidator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Cryptography.FingerprintValidator.#ctor" />
        <element api="M:Symbiote.Cryptography.FingerprintValidator.ComputeHash(System.String,System.String)" />
        <element api="M:Symbiote.Cryptography.FingerprintValidator.GenerateSalt" />
        <element api="M:Symbiote.Cryptography.FingerprintValidator.Validate(System.String,System.String,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote.Cryptography" module="Symbiote.Cryptography" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.0.0 (1.0.0.0)" />
        </library>
        <namespace api="N:Symbiote.Cryptography" />
      </containers>
    </api>
    <api id="Methods.T:Symbiote.Cryptography.FingerprintValidator">
      <topicdata name="FingerprintValidator" group="list" subgroup="Methods" typeTopicId="T:Symbiote.Cryptography.FingerprintValidator" />
      <apidata name="FingerprintValidator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Symbiote.Cryptography.FingerprintValidator.ComputeHash(System.String,System.String)" />
        <element api="M:Symbiote.Cryptography.FingerprintValidator.GenerateSalt" />
        <element api="M:Symbiote.Cryptography.FingerprintValidator.Validate(System.String,System.String,System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="Symbiote.Cryptography" module="Symbiote.Cryptography" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.0.0 (1.0.0.0)" />
        </library>
        <namespace api="N:Symbiote.Cryptography" />
        <type api="T:Symbiote.Cryptography.FingerprintValidator" />
      </containers>
    </api>
    <api id="M:Symbiote.Cryptography.FingerprintValidator.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="Symbiote.Cryptography" module="Symbiote.Cryptography" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.0.0 (1.0.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Cryptography" />
        <type api="T:Symbiote.Cryptography.FingerprintValidator" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Cryptography.FingerprintValidator.ComputeHash(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ComputeHash" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="salt" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote.Cryptography" module="Symbiote.Cryptography" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.0.0 (1.0.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Cryptography" />
        <type api="T:Symbiote.Cryptography.FingerprintValidator" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Cryptography.FingerprintValidator.GenerateSalt">
      <topicdata group="api" />
      <apidata name="GenerateSalt" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Symbiote.Cryptography" module="Symbiote.Cryptography" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.0.0 (1.0.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Cryptography" />
        <type api="T:Symbiote.Cryptography.FingerprintValidator" ref="true" />
      </containers>
    </api>
    <api id="M:Symbiote.Cryptography.FingerprintValidator.Validate(System.String,System.String,System.String,System.String)">
      <topicdata group="api" />
      <apidata name="Validate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fingerprint">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fqn">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="version">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="checksum" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Symbiote.Cryptography" module="Symbiote.Cryptography" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.0.0 (1.0.0.0)" />
          <noAptca />
        </library>
        <namespace api="N:Symbiote.Cryptography" />
        <type api="T:Symbiote.Cryptography.FingerprintValidator" ref="true" />
      </containers>
    </api>
    <api id="R:Project_Documentation">
      <topicdata group="root" />
      <elements>
        <element api="G:Symbiote.Core" />
        <element api="N:Symbiote.Cryptography" />
      </elements>
    </api>
    <api id="G:Symbiote.Core.Service">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Service" group="namespaceGroup" />
      <elements>
        <element api="N:Symbiote.Core.Service" />
        <element api="N:Symbiote.Core.Service.IoT.MQTT" />
        <element api="N:Symbiote.Core.Service.Web" />
        <element api="N:Symbiote.Core.Service.Web.API" />
        <element api="N:Symbiote.Core.Service.Web.SignalR" />
      </elements>
    </api>
    <api id="G:Symbiote.Core">
      <topicdata group="api" />
      <apidata name="Symbiote.Core" group="namespaceGroup" />
      <elements>
        <element api="N:Symbiote.Core" />
        <element api="N:Symbiote.Core.Configuration" />
        <element api="N:Symbiote.Core.Model" />
        <element api="G:Symbiote.Core.Platform" />
        <element api="G:Symbiote.Core.Plugin" />
        <element api="G:Symbiote.Core.Service" />
      </elements>
    </api>
    <api id="G:Symbiote.Core.Plugin">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Plugin" group="namespaceGroup" />
      <elements>
        <element api="N:Symbiote.Core.Plugin" />
        <element api="N:Symbiote.Core.Plugin.Connector" />
        <element api="N:Symbiote.Core.Plugin.Endpoint" />
      </elements>
    </api>
    <api id="G:Symbiote.Core.Platform">
      <topicdata group="api" />
      <apidata name="Symbiote.Core.Platform" group="namespaceGroup" />
      <elements>
        <element api="N:Symbiote.Core.Platform" />
        <element api="N:Symbiote.Core.Platform.UNIX" />
        <element api="N:Symbiote.Core.Platform.Windows" />
      </elements>
    </api>
  </apis>
</reflection>
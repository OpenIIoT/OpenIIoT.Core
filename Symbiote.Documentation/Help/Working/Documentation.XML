<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Symbiote</name>
  </assembly>
  <members>
    <member name="T:Symbiote.Core.BigFont">
      <summary>
            BigFont transforms strings into large, stylized characters.
            </summary>
    </member>
    <member name="T:Symbiote.Core.BigFont.Font">
      <summary>
            Font type enumeration
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.Font.Default">
      <summary>
            Default font; DefaultFont property will be substituted when used.
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.Font.Block">
      <summary>
            Block font.
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.Font.Graffiti">
      <summary>
            Graffiti font.
            </summary>
    </member>
    <member name="T:Symbiote.Core.BigFont.FontSize">
      <summary>
            Font size enumeration; the integer value indicates the height in lines
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.FontSize.Default">
      <summary>
            Default size; DefaultFontSize property will be substituted when used.
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.FontSize.Large">
      <summary>
            Large font size (8 lines).
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.FontSize.Medium">
      <summary>
            Medium font size (6 lines).
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.FontSize.Small">
      <summary>
            Small font size (4 lines).
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.defaultFont">
      <summary>
            The default font used to initialize the DefaultFont property.
            </summary>
    </member>
    <member name="F:Symbiote.Core.BigFont.defaultFontSize">
      <summary>
            The default font size used to initialize the DefaultFontSize property.
            </summary>
    </member>
    <member name="P:Symbiote.Core.BigFont.DefaultFont">
      <summary>
            The default font.
            </summary>
    </member>
    <member name="P:Symbiote.Core.BigFont.DefaultFontSize">
      <summary>
            The default font size.
            </summary>
    </member>
    <member name="P:Symbiote.Core.BigFont.Alphabet">
      <summary>
            The alphabet.
            </summary>
    </member>
    <member name="M:Symbiote.Core.BigFont.#cctor">
      <summary>
            The default constructor.  Initializes the alphabet.
            </summary>
    </member>
    <member name="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.FontSize)">
      <summary>
            Generates a large string of characters corresponding to the input phrase.
            </summary>
      <remarks>
            Any character that doesn't exist in the alphabet will be replaced with a question mark.
            </remarks>
      <param name="phrase">The phrase to generate.</param>
      <param name="size">The size of the font to use.</param>
      <returns>A string array containing the generated output.</returns>
      <seealso cref="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.Font,Symbiote.Core.BigFont.FontSize)" />
    </member>
    <member name="M:Symbiote.Core.BigFont.Generate(System.String,Symbiote.Core.BigFont.Font,Symbiote.Core.BigFont.FontSize)">
      <summary>
            Generates a large string of characters corresponding to the input phrase.
            </summary>
      <remarks>
            Any character that doesn't exist in the alphabet will be replaced with a question mark.
            </remarks>
      <param name="phrase">The phrase to generate.</param>
      <param name="font">The Font type to use.</param>
      <param name="size">The size of the font to use.</param>
      <returns>A string array containing the generated output.</returns>
    </member>
    <member name="T:Symbiote.Core.ManagerState">
      <summary>
            Enumeration of the different Manager states.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ManagerState.Unknown">
      <summary>
            The default value
            </summary>
    </member>
    <member name="F:Symbiote.Core.ManagerState.Starting">
      <summary>
            The Manager is starting
            </summary>
    </member>
    <member name="F:Symbiote.Core.ManagerState.Running">
      <summary>
            The Manager is running
            </summary>
    </member>
    <member name="F:Symbiote.Core.ManagerState.Stopping">
      <summary>
            The Manager is stopping
            </summary>
    </member>
    <member name="F:Symbiote.Core.ManagerState.Stopped">
      <summary>
            The Manager has stopped
            </summary>
    </member>
    <member name="F:Symbiote.Core.ManagerState.Faulted">
      <summary>
            The Manager is faulted
            </summary>
    </member>
    <member name="T:Symbiote.Core.IManager">
      <summary>
            Defines the interface used for the various Managers within the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.IManager.State">
      <summary>
            Indicates the state of the Manager.
            </summary>
    </member>
    <member name="M:Symbiote.Core.IManager.Start">
      <summary>
            Starts the Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.IManager.Restart">
      <summary>
            Restarts the Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.IManager.Stop">
      <summary>
            Stops the Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.ItemEventArgs">
      <summary>
            The ItemEventArgs contain the event arguments for Item Changed events.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ItemEventArgs.Value">
      <summary>
            The new value of the Item.
            </summary>
    </member>
    <member name="M:Symbiote.Core.ItemEventArgs.#ctor(System.Object)">
      <summary>
            The default constructor.
            </summary>
      <param name="value">The new value of the Item.</param>
    </member>
    <member name="T:Symbiote.Core.xLogger">
      <summary>
            xLogger is an extension of NLog.Logger that provides additional functionality for tracing the entry and exit, arbitrary
            checkpoints, exceptions and stack traces within methods.
            
            Additional methods allow for greater readability within log files, such as the ability to style entry/exit/exception logs,
            three tiers of large-font headings, separators and styled and unstyled multiline log messages.
            </summary>
      <example>
        <code>
            // create an instance of xLogger for the current class using the NLog LogManager
            private xLogger logger = (xLogger)LogManager.GetCurrentClassLogger(typeof(xLogger));
            
            // create a generic instance
            private xLogger logger = (xLogger)LogManager.GetLogger("generic logger name", typeof(xLogger));
            </code>
      </example>
    </member>
    <member name="F:Symbiote.Core.xLogger.Prefix">
      <summary>
            Generic prefix to append to the beginning of the other prefixes
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.Header">
      <summary>
            String to log prior to any text block.  If no header is desired, specify a blank string.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.EnterPrefix">
      <summary>
            String to append to the beginning of the method entry message.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.ExitPrefix">
      <summary>
            String to append to the beginning of the method exit message.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.CheckpointPrefix">
      <summary>
            String to append to the beginning of checkpoint messages.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.ExceptionPrefix">
      <summary>
            String to append to the beginning of exception messages.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.StackTracePrefix">
      <summary>
            String to append to the beginning of stack trace messages.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.ExecutionDurationPrefix">
      <summary>
            String to append to the beginning of execution duration messages.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.LinePrefix">
      <summary>
            String to append to the beginning of each line within a message.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.FinalLinePrefix">
      <summary>
            String to append to the beginning of the final line within a message.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.LinePrefixVariable">
      <summary>
            String to append to the beginning of each line requiring variable indentation.  The dollar sign '$' will be substituted for 
            a string of spaces of the appropriate length.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.Footer">
      <summary>
            String to log following any text block.  If no footer is desired, specify a blank string.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.InnerSeparator">
      <summary>
            String to log when LogSeparator() is invoked.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.OuterSeparator">
      <summary>
            String to log when the Separator() method is invoked.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.ExceptionHeaderPrefix">
      <summary>
            String to append to exception headers.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.ExceptionLinePrefix">
      <summary>
            String to append to exception lines.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.ExceptionFooterPrefix">
      <summary>
            String to append to exception footers.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.Indent">
      <summary>
            Number of spaces to indent lines where indentation is applied.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.AutoPruneEnabled">
      <summary>
            Determines whether persisted methods are automatically pruned after the interval defined by AutoPruneAge.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.AutoPruneAge">
      <summary>
            Interval after which persisted methods are automatically pruned from the PersistedMethods list, if AutoPruneEnabled is true.
            </summary>
    </member>
    <member name="F:Symbiote.Core.xLogger.PersistedMethodListLock">
      <summary>
            Lock to use to ensure thread safety with respect to the PersistedMethods list.
            </summary>
    </member>
    <member name="P:Symbiote.Core.xLogger.PersistedMethods">
      <summary>
            A list of Tuples containing a Guid and DateTime corresponding to methods logged with the persistence option.
            </summary>
    </member>
    <member name="M:Symbiote.Core.xLogger.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Symbiote.Core.xLogger.LogHeader(NLog.LogLevel,System.String)">
      <summary>
            Logs the header string using the supplied logging method
            </summary>
      <param name="level">The logging level to which to log the header.</param>
      <param name="prefix">The optional prefix string.</param>
    </member>
    <member name="M:Symbiote.Core.xLogger.LogFooter(NLog.LogLevel,System.String)">
      <summary>
            Logs the footer string using the supplied logging method
            </summary>
      <param name="level">The logging level to which to log the footer.</param>
      <param name="prefix">The optional prefix string.</param>
    </member>
    <member name="M:Symbiote.Core.xLogger.LogInnerSeparator(NLog.LogLevel,System.String)">
      <summary>
            Logs the separator string using the supplied logging method
            </summary>
      <param name="level">The logging level to which to log the separator.</param>
      <param name="prefix">The optional prefix string.</param>
    </member>
    <member name="M:Symbiote.Core.xLogger.LogOuterSeparator(NLog.LogLevel,System.String)">
      <summary>
            Logs the outer separator string with header and footer using the supplied logging method
            </summary>
      <param name="level">The logging level to which to log the separator.</param>
      <param name="prefix">The optional prefix string.</param>
    </member>
    <member name="M:Symbiote.Core.xLogger.LogVariables(NLog.LogLevel,System.Object[],System.String[],System.String)">
      <summary>
            Logs the supplied variable list with the optionally supplied names.
            </summary>
      <param name="level">The logging level to which to log the variable list.</param>
      <param name="variables">The list of variables to log.</param>
      <param name="variableNames">The list of names to log along with the list of variables.</param>
      <param name="prefix">The optional string prefix.</param>
    </member>
    <member name="M:Symbiote.Core.xLogger.LogExecutionDuration(NLog.LogLevel,System.String,System.Guid,System.Boolean,System.String)">
      <summary>
            Logs the execution duration for the persisted method matching the supplied Guid using the supplied message.
            </summary>
      <param name="level">The logging level to which to log the execution duration.</param>
      <param name="message">The message to log.</param>
      <param name="guid">The Guid of the persisted method for which the execution duration should be calculated.</param>
      <param name="remove">If true, removes the supplied Guid from the list of persisted methods after logging.</param>
      <param name="prefix">The optional prefix string.</param>
    </member>
    <member name="M:Symbiote.Core.xLogger.LogStackTrace(NLog.LogLevel,System.String)">
      <summary>
            Logs the current stack trace, excluding everything before Main() and after the calling method using the supplied logging method.
            </summary>
      <param name="level">The logging level to which to log the stack trace.</param>
      <param name="prefix">The optional prefix string.</param>
    </member>
    <member name="M:Symbiote.Core.xLogger.PrunePersistedMethods(System.Int32)">
      <summary>
            Prunes the PersistedMethods list of any tuples older than the specified age in seconds.
            </summary>
      <remarks>
            Should be called on a regular interval (minutes or perhaps hours) to keep things tidy.
            
            If doing so, be mindful of long running methods (Main(), for instance) and be aware that persistence will be deleted if used.
            </remarks>
      <param name="age">The age in seconds after which persisted methods will be pruned.</param>
      <example>
        <code>
            // prune persisted methods older than 5 minutes (300 seconds)
            MethodLogger.PrunePersistedMethods(300);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String)">
      <summary>
            Splits the supplied string into a string array by newline characters, then prints each element of the string array as a new 
            log message with the logging function specified in action.
            </summary>
      <param name="level">The logging level to which to log the message.</param>
      <param name="message">The message to split and log.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String[])" />
      <example>
        <code>
            // create a string with newline characters
            string s = "Hello \r\n World!"
            
            // invoke the method
            logger.Multiline(LogLevel.Info, s);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Multiline(NLog.LogLevel,System.String[])">
      <summary>
            Logs each element of the supplied string array as a new log message to the logging level specified in level.
            </summary>
      <param name="level">The logging level to which to log the message.</param>
      <param name="message">The message to log.</param>
      <example>
        <code>
            // create a string array
            string[] s = new string[] { "line 1", "line 2", "line 3" };
            
            // invoke the method
            logger.Multiline(LogLevel.Info, s);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String)">
      <summary>
            Appends the line prefix to each line of the supplied message and wraps the text in the header and footer.
            </summary>
      <param name="level">The logging level to which to log the message.</param>
      <param name="message">The message to wrap and log.</param>
      <example>
        <code>
            // create a string array
            string[] s = new string[] { "hello", "world", "!!!!" };
            
            // invoke the method
            logger.MultilineWrapped(LogLevel.Info, s);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.MultilineWrapped(NLog.LogLevel,System.String[])">
      <summary>
            Appends the line prefix to each line of the supplied message and wraps the text in the header and footer.
            </summary>
      <param name="level">The logging level to which to log the message.</param>
      <param name="message">The message to wrap and log.</param>
      <example>
        <code>
            // create a string array
            string[] s = new string[] { "hello", "world", "!!!!" };
            
            // invoke the method
            logger.MultilineWrapped(LogLevel.Info, s);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Separator(NLog.LogLevel)">
      <summary>
            Logs a separator with the logging function specified in action.
            </summary>
      <param name="level">The logging level to which to log the message.</param>
      <example>
        <code>
            // log the separator using the Info logging level
            logger.Separator(LogLevel.Info);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Heading(NLog.LogLevel,System.String)">
      <summary>
            Logs the supplied message converted to large sized text using BigFont and with the logging function specified in action.
            </summary>
      <remarks>
            Dependent upon the BigFont class (BigFont.cs)
            https://github.com/jpdillingham/BigFont
            </remarks>
      <param name="level">The logging level to which to log the message.</param>
      <param name="message">The message to convert and log.</param>
      <example>
        <code>
            // log a heading using the Debug logging level
            logger.Heading(LogLevel.Debug, "Hello World");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.SubHeading(NLog.LogLevel,System.String)">
      <summary>
            Logs the supplied message converted to medium sized text using BigFont and with the logging function specified in action.
            </summary>
      <remarks>
            Dependent upon the BigFont class (BigFont.cs)
            https://github.com/jpdillingham/BigFont
            </remarks>
      <param name="level">The logging level to which to log the message.</param>
      <param name="message">The message to convert and log.</param>
      <example>
        <code>
            // log a subheading using the Info logging level
            logger.SubHeading(LogLevel.Info, "This is a subheading!");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.SubSubHeading(NLog.LogLevel,System.String)">
      <summary>
            Logs the supplied message converted to small text using BigFont and with the logging function specified in action.
            </summary>
      <remarks>
            Dependent upon the BigFont class (BigFont.cs)
            https://github.com/jpdillingham/BigFont
            </remarks>
      <param name="level">The logging level to which to log the message.</param>
      <param name="message">The message to convert and log.</param>
      <example>
        <code>
            // log a sub-subheading using the Trace logging level
            logger.SubSubHeading(LogLevel.Trace, "This is a sub-subheading!");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.EnterMethod(System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the entrance of execution flow into a method (depending on the placement of this method call)
            and attempts to log the parameters passed in.  
            </summary>
      <remakrs>
            The parameters for the calling method are retrieved via the call stack and reflection and are then compared to the list of 
            parameters passed into this method.  It is important for the order and number of these parameters to match for the display
            of parameters and values to work properly.
            
            The Params() method should be used when invoking this method to pass the method parameters as it is shorthand for creating
            an object array explicitly.
            </remakrs>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <returns>The Guid for the persisted method.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // simplest example with no persistence and no parameters
            public void MyMethod()
            {
                logger.EnterMethod();
                
                // method body
                
                logger.ExitMethod();
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the entrance of execution flow into a method (depending on the placement of this method call)
            and attempts to log the parameters passed in.  
            </summary>
      <remakrs>
            The parameters for the calling method are retrieved via the call stack and reflection and are then compared to the list of 
            parameters passed into this method.  It is important for the order and number of these parameters to match for the display
            of parameters and values to work properly.
            
            The Params() method should be used when invoking this method to pass the method parameters as it is shorthand for creating
            an object array explicitly.
            </remakrs>
      <param name="parameters">An object array containing the parameters passed into the logged method.  Use the Params() method to build this.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <returns>The Guid for the persisted method.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log the method entry and parameters
            public void MyMethod(int one, int two)
            {
                logger.EnterMethod(xLogger.Params(one, two));
                
                // method body
                
                logger.ExitMethod();
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.EnterMethod(System.Boolean,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the entrance of execution flow into a method (depending on the placement of this method call)
            and attempts to log the parameters passed in.  
            </summary>
      <remakrs>
            The parameters for the calling method are retrieved via the call stack and reflection and are then compared to the list of 
            parameters passed into this method.  It is important for the order and number of these parameters to match for the display
            of parameters and values to work properly.
            
            The Params() method should be used when invoking this method to pass the method parameters as it is shorthand for creating
            an object array explicitly.
            </remakrs>
      <param name="persist">
            If true, persists the method's Guid internally with a timestamp. Entries using persistence need to provide the Guid string returned
            when invoking the Exit() method or a memory leak will occur.
            </param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <returns>The Guid for the persisted method.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log the method entry with persistence and no parameters
            public void MyMethod()
            {
                Guid persistedGuid = logger.EnterMethod(true);
                
                // method body
                
                logger.ExitMethod(persistedGuid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the entrance of execution flow into a method (depending on the placement of this method call)
            and attempts to log the parameters passed in.  
            </summary>
      <remakrs>
            The parameters for the calling method are retrieved via the call stack and reflection and are then compared to the list of 
            parameters passed into this method.  It is important for the order and number of these parameters to match for the display
            of parameters and values to work properly.
            
            The Params() method should be used when invoking this method to pass the method parameters as it is shorthand for creating
            an object array explicitly.
            </remakrs>
      <param name="parameters">An object array containing the parameters passed into the logged method.  Use the Params() method to build this.</param>
      <param name="persist">
            If true, persists the method's Guid internally with a timestamp. Entries using persistence need to provide the Guid string returned
            when invoking the Exit() method or a memory leak will occur.
            </param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <returns>The Guid for the persisted method.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.Params(System.Object[])" />
      <example>
        <code>
            // log the method entry with persistence and parameters
            public void MyMethod(int one, int two)
            {
                Guid persistedGuid = logger.EnterMethod(xLogger.Params(one, two), true);
                
                // method body
                
                logger.ExitMethod(persistedGuid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.ExitMethod(System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the exit of execution flow from a method (depending on the placement of this method call)
            </summary>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // simplest example with no persistence and no return value
            public void MyMethod()
            {
                logger.EnterMethod();
                
                // method body
                
                logger.ExitMethod();
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the exit of execution flow from a method (depending on the placement of this method call)
            </summary>
      <param name="returnValue">The return value of the method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log the method exit with no persistence and with a return value
            public void MyMethod()
            {
                logger.EnterMethod();
                
                // method body
                
                bool returnValue = false;
                logger.ExitMethod(returnValue);
                return returnValue;
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.ExitMethod(System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the exit of execution flow from a method (depending on the placement of this method call)
            </summary>
      <param name="guid">The Guid assigned by the corresponding Enter() method invocation.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log the method exit with persistence and no return value
            public void MyMethod()
            {
                Guid persistedGuid = logger.EnterMethod();
                
                // method body
                
                logger.ExitMethod(persistedGuid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.ExitMethod(System.Object,System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating the exit of execution flow from a method (depending on the placement of this method call)
            </summary>
      <param name="returnValue">The return value of the method.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <example>
        <code>
            // log the method exit with persistence and a return value
            public bool ExamplePersistedMethod(int one, int two)
            {
                Guid persistedGuid = logger.EnterMethod(xLogger.Params(one, two), true);
                
                // method body
                
                returnValue = true;
                logger.ExitMethod(returnValue, persistedGuid);
                return returnValue;
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log a basic checkpoint
            logger.Checkpoint();
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String)">
      <summary>
            Logs a message indicating that the execution folow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <remarks>
            This overload is provided as a workaround to disambiguate Checkpoint(string, string, int) and Checkpoint(string, string, string, int)
            </remarks>
      <param name="name">The checkpoint name.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log a named checkpoint
            logger.Checkpoint("My named checkpoint");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="name">The checkpoint name.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log a named checkpoint
            logger.Checkpoint("My named checkpoint");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // invoke EnterMethod with persistence and store the guid
            Guid guid = logger.EnterMethod(true);
            
            // log a persistent checkpoint using the stored guid
            logger.Checkpoint(guid);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="name">The checkpoint name.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // invoke EnterMethod with persistence and store the guid
            Guid guid = logger.EnterMethod(true);
            
            // log a named, persistent checkpoint using the stored guid
            logger.Checkpoint("My named checkpoint", guid);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a checkpoint with unnamed variables
            logger.Checkpoint(xLogger.Vars(one, two));
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="name">The checkpoint name.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a named checkpoint with unnamed variables
            logger.Checkpoint("My named checkpoint", xLogger.Vars(one, two));
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // invoke EnterMethod with persistence and store the guid
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a persistent checkpoint with unnamed variables
            logger.Checkpoint(xLogger.Vars(one, two), guid);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="name">The checkpoint name.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // invoke EnterMethod with persistence and store the guid
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a named, persistent checkpoint with unnamed variables
            logger.Checkpoint("My named checkpoint", xLogger.Vars(one, two), guid);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a checkpoint with named variables
            logger.Checkpoint(xLogger.Vars(one, two), xLogger.Names("one", "two"));
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="name">The checkpoint name.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a named checkpoint with named variables
            logger.Checkpoint("My named checkpoint", xLogger.Vars(one, two), xLogger.Names("one", "two"));
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // invoke EnterMethod with persistence and store the guid
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a persistent checkpoint with named variables
            logger.Checkpoint(xLogger.Vars(one, two), xLogger.Names("one", "two"), guid);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs a message indicating that the execution flow of a method has reached an arbitrary checkpoint defined at design-time.
            </summary>
      <param name="name">The checkpoint name.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // invoke EnterMethod with persistence and store the guid
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            int one = 1;
            int two = 2;
            
            // log a named, persistent checkpoint with named variables
            logger.Checkpoint("My named checkpoint", xLogger.Vars(one, two), xLogger.Names("one", "two"), guid);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(System.Exception,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="exception">The Exception to log.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception using the default (Error) logging level
                logger.Exception(ex);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="level">The logging level to which to log the exception.</param>
      <param name="exception">The Exception to log.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception using the Debug logging level
                logger.Exception(LogLevel.Debug, ex);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="exception">The Exception to log.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // invoke EnterMethod using persistence
            Guid guid = logger.EnterMethod(true);
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with persistence using the default (Error) logging level
                logger.Exception(ex, guid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="level">The logging level to which to log the exception.</param>
      <param name="exception">The Exception to log.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // invoke EnterMethod using persistence
            Guid guid = logger.EnterMethod(true);
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with persistence using the Trace logging level
                logger.Exception(LogLevel.Trace, ex, guid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with unnamed variables using the default (Error) logging level
                logger.Exception(ex, xLogger.Vars(one, two));
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="level">The logging level to which to log the exception.</param>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with unnamed variables using the Info logging level
                logger.Exception(LogLevel.Info, ex, xLogger.Vars(one, two));
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // invoke EnterMethod using persistence
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with unnamed variables and using persistence using the default (Error) logging level
                logger.Exception(ex, xLogger.Vars(one, two), guid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="level">The logging level to which to log the exception.</param>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <example>
        <code>
            // invoke EnterMethod using persistence
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with unnamed variables and using persistence using the Debug logging level
                logger.Exception(LogLevel.Debug, ex, xLogger.Vars(one, two), guid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with named variables using the default (Error) logging level
                logger.Exception(ex, xLogger.Vars(one, two), xLogger.Names("one", "two"));
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="level">The logging level to which to log the exception.</param>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with named variables using the Trace logging level
                logger.Exception(LogLevel.Trace, ex, xLogger.Vars(one, two), xLogger.Names("one", "two"));
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // invoke EnterMethod using persistence
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with named variables and using persistence using the default (Error) logging level
                logger.Exception(ex, xLogger.Vars(one, two), xLogger.Names("one", "two"), guid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)">
      <summary>
            Logs Exception details.
            </summary>
      <param name="level">The logging level to which to log the exception.</param>
      <param name="exception">The Exception to log.</param>
      <param name="variables">A list of variables to be logged.  Use the Vars() method to build this.</param>
      <param name="variableNames">A string array of variable names to be logged along with the supplied variables.  The number and order should match the variable array.</param>
      <param name="guid">The Guid returned by the Enter() method.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.Vars(System.Object[])" />
      <seealso cref="M:Symbiote.Core.xLogger.Names(System.String[])" />
      <example>
        <code>
            // invoke EnterMethod using persistence
            Guid guid = logger.EnterMethod(true);
            
            // declare some variables
            string one = "one";
            string two = "two";
            
            // catch an exception
            try
            {
                throw new Exception();
            }
            catch (Exception ex)
            {
                // log the exception with named variables and using persistence using the Debug logging level
                logger.Exception(LogLevel.Debug, ex, xLogger.Vars(one, two), xLogger.Names("one", "two"), guid);
            }
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.StackTrace(System.String,System.String,System.Int32)">
      <summary>
            Logs the current execution stack.
            </summary>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <seealso cref="M:Symbiote.Core.xLogger.StackTrace(NLog.LogLevel,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // log the stack trace using the default (Trace) logging level
            logger.StackTrace();
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.StackTrace(NLog.LogLevel,System.String,System.String,System.Int32)">
      <summary>
            Logs the current execution stack.
            </summary>
      <param name="level">The logging level to which to log the exception.</param>
      <param name="caller">An implicit parameter which evaluates to the name of the method that called this method.</param>
      <param name="filePath">An implicit parameter which evaluates to the filename from which the calling method was executed.</param>
      <param name="lineNumber">An implicit parameter which evaluates to the line number containing this method call.</param>
      <example>
        <code>
            // log the stack trace using the Debug logging level
            logger.StackTrace(logger.Debug);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.GetInvertedStackExcerpt">
      <summary>
            Returns an inverted excerpt of the current stack trace, omitting methods above Main() and those originating within this class.
            </summary>
      <returns>A list of type StackFrame containing an inverted excerpt of the current stack trace.</returns>
    </member>
    <member name="M:Symbiote.Core.xLogger.GetColloquialTypeName(System.Type)">
      <summary>
            Returns a "pretty" string representation of the provided Type;  specifically, corrects the naming of generic Types
            and appends the type parameters for the type to the name as it appears in the code editor.
            </summary>
      <param name="type">The type for which the colloquial name should be created.</param>
      <returns>A "pretty" string representation of the provided Type.</returns>
    </member>
    <member name="M:Symbiote.Core.xLogger.GetObjectSerialization(System.Object)">
      <summary>
            Returns a List of type string containing each line of the indented serialization of the supplied object.
            </summary>
      <param name="obj">The object to serialize.</param>
      <returns>A List of type string containing each line of the indented serialization of the supplied object.</returns>
    </member>
    <member name="M:Symbiote.Core.xLogger.GetExceptionSerialization(System.Exception)">
      <summary>
            Returns a list of type string containing each line of the indented serialization of the supplied Exception.
            Prints each method contained within the StackTraceString property to it's own line.
            </summary>
      <param name="exception">The Exception to serialize.</param>
      <returns>A List of type string containing each line of the indented serialization of the supplied Exception.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.GetObjectSerialization(System.Object)" />
    </member>
    <member name="M:Symbiote.Core.xLogger.GetCallingStackFrame">
      <summary>
            Searches the execution stack and returns the topmost frame not originating from this class, indicating the calling frame.
            </summary>
      <returns>The StackFrame containing the calling code.</returns>
    </member>
    <member name="M:Symbiote.Core.xLogger.GetMethodSignature(System.Reflection.MethodBase)">
      <summary>
            Builds and returns the calling method signature, including method name, parameter types and names.
            </summary>
      <param name="methodBase">The MethodInfo for which to return the signature.</param>
      <returns>The method signature, including method name, parameter types and names, of the calling method.</returns>
    </member>
    <member name="M:Symbiote.Core.xLogger.Params(System.Object[])">
      <summary>
            Returns the object array specified in the input parameter(s) for the method.  Accepts a dynamic number of parameters
            of any type which are implictly added to an object array.
            </summary>
      <remarks>
            This is a shorthand method that eliminates the need to explicitly define an object array when using the Enter() method.
            This is necessary because the current C# specification doesn't allow for the params keyword and optional implicit parameters in the same method
            signature due to ambiguity.
            
            Note that if any of the parameters is an array it must be cast to type object when being passed into the method.  This is due to the fact that
            arrays of any type are also an object and are presented ambiguously to this method because of the params keyword and type of object[].
            </remarks>
      <param name="parameters">A dynamic object array of method parameters.</param>
      <returns>The provided object array.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.EnterMethod(System.Object[],System.Boolean,System.String,System.String,System.Int32)" />
      <example>
        <code>
            // Enter() invocation with one parameter
            logger.EnterMethod(xLogger.Params(parameterOne));
            
            // Enter() invocation with two parameters
            logger.EnterMethod(xLogger.Params(parameterOne, parameterTwo));
            
            // Enter() invocation with any number of parameters
            logger.EnterMethod(xLogger.Params(parameterOne, ..., parameterN));
            
            // Enter() invocation with a parameter list containing an array
            logger.EnterMethod(xLogger.Params(parameterOne, parameterTwo, (object)arrayParameterThree));
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Vars(System.Object[])">
      <summary>
            Returns the object array specified in the variable list for a Checkpoint() method call.  Effectively an overload for Params(),
            provided for naming consistency with usage.
            </summary>
      <param name="variables">A dynamic object array of variables.</param>
      <returns>The provided object array.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.String,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Exception(NLog.LogLevel,System.Exception,System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Params(System.Object[])" />
      <example>
        <code>
            // Checkpoint() invocation with three variables
            int one = 1;
            int two = 2;
            string varThree = "three";
            
            logger.Checkpoint(xLogger.Vars(one, two, three));
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.xLogger.Names(System.String[])">
      <summary>
            Returns the string array specified in the variable name list for a Checkpoint() or Exception() method call.
            </summary>
      <remarks>
            When used in conjunction with Checkpoint() or Exception(), ensure the order and number of the supplied names matches that of the 
            related object array.
            </remarks>
      <param name="names">A dynamic string array of variable names.</param>
      <returns>The provided string array.</returns>
      <seealso cref="M:Symbiote.Core.xLogger.Checkpoint(System.Object[],System.String[],System.Guid,System.String,System.String,System.Int32)" />
      <seealso cref="M:Symbiote.Core.xLogger.Params(System.Object[])" />
      <example>
        <code>
            // Checkpoint() invocation with three variables
            int one = 1;
            int two = 2;
            string varThree = "three";
            
            logger.Checkpoint(xLogger.Vars(one, two, three), xLogger.Names("one", "two", "varThree"));
            </code>
      </example>
    </member>
    <member name="T:Symbiote.Core.xLogger.UnspecifiedReturnValue">
      <summary>
            Internal type used to differentiate a null return value from an unspecified return value.
            </summary>
    </member>
    <member name="T:Symbiote.Core.xLogger.ExcludedParam">
      <summary>
            Type used to differentiate a null parameter value and one which is intentionally excluded from a 
            method entry log.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Model.ModelManagerConfiguration">
      <summary>
            A class representing the configuration items for the Model Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManagerConfiguration.Items">
      <summary>
            The list of Items contained within the model.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManagerConfiguration.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Model.ModelManagerConfigurationItem">
      <summary>
            A generic container for model items within the configuration.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManagerConfigurationItem.FQN">
      <summary>
            The FQN of the item.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManagerConfigurationItem.SourceFQN">
      <summary>
            The FQN of the source item.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Clone">
      <summary>
            Creates a new copy of this item.
            </summary>
      <returns>A new copy of this item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManagerConfigurationItem.Equals(System.Object)">
      <summary>
            Returns true if the provided object is equal to this object, false otherwise.
            </summary>
      <param name="obj">The object to which this object should be compared.</param>
      <returns>True of the objects are equal, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManagerConfigurationItem.GetHashCode">
      <summary>
            Returns the hashcode of this object.
            </summary>
      <returns>An integer equal to the hash of the FQN of this object.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManagerConfigurationItem.ToString">
      <summary>
            Returns the string representation of the object.
            </summary>
      <returns>The string representation of the object.</returns>
    </member>
    <member name="T:Symbiote.Core.Model.ModelBuildResult">
      <summary>
            The ModelBuildResult extends the Result class and adds properties to return various
            products of a model build operation.
            
            The model build operation produces the model itself, which implements the composite design pattern,
            and a dictionary used to faciliate fast lookups of model items without traversing the composite tree.
            
            Two lists are also produced; a list of resolved items and a list of unresolved items.  As items are
            built from the list of items stored in the configuration, a number of checks and lookups are done
            to ensure that the items are valid.  Any items that are invalid are discarded and added to the unresolved list.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelBuildResult.Model">
      <summary>
            The Item model created by the build result.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelBuildResult.Dictionary">
      <summary>
            The dictionary of model items and FQNs created by the build result.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelBuildResult.ResolvedList">
      <summary>
            The list of model items that were resolved during the build.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelBuildResult.UnresolvedList">
      <summary>
            The list of model items that couldn't be resolved during the build.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelBuildResult.DeferredList">
      <summary>
            The list of model items that were defferred during the build.  This
            occurs if the item's SourceFQN is a model item (instead of a plugin item)
            and it is at a greater depth in the model than the item itself.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Model.ModelBuildResult.#ctor">
      <summary>
            The default constructor.
            </summary>
    </member>
    <member name="N:Symbiote.Core.Model">
      <summary>
            The Model namespace encapsulates the model for the application.  The model consists of two collections of Items;
            a parent/child tree of Items that implements the composite design pattern, and a dictionary keyed on the FQN of
            Items and containing a reference to the keyed Item.
            
            The Item composite allows for logical management and retrieval of data from the model, while the dictionary provides
            fast lookups of model items.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Model.ModelManager">
      <summary>
            The ModelManager class manages the Model for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Model.ModelManager.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Model.ModelManager.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Model.ModelManager.instance">
      <summary>
            The Singleton instance of ModelManager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManager.State">
      <summary>
            The state of the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManager.ConfigurationDefinition">
      <summary>
            The ConfigurationDefinition for the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManager.Configuration">
      <summary>
            The Configuration for the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManager.Model">
      <summary>
            The root Item for the model.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Model.ModelManager.Dictionary">
      <summary>
            A dictionary containing the Fully Qualified Names and references to all of the Items in the model.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.#ctor(Symbiote.Core.ProgramManager)">
      <summary>
            Private constructor, only called by Instance()
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.Instance(Symbiote.Core.ProgramManager)">
      <summary>
            Instantiates and/or returns the ModelManager instance.
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
      <returns>The Singleton instance of the ModelManager.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.Start">
      <summary>
            Starts the Model manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.Restart">
      <summary>
            Restarts the Configuration manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.Stop">
      <summary>
            Stops the Configuration manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.Configure">
      <summary>
            Configures the Model Manager using the configuration stored in the Configuration Manager, or, failing that, using the default configuration.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.Configure(Symbiote.Core.Model.ModelManagerConfiguration)">
      <summary>
            Configures the Manager using the supplied configuration, then saves the configuration to the Model Manager.
            </summary>
      <param name="configuration">The configuration with which the Model Manager should be configured.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.SaveConfiguration">
      <summary>
            Saves the configuration to the Configuration Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.BuildModel">
      <summary>
            Builds a Model using the Model Configuration stored within the ProgramManager and returns a ModelBuildResult containing the result.
            </summary>
      <returns>A new instance of ModelBuildResult containing the results of the build operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem})">
      <summary>
            Builds a Model using the provided list of ConfigurationItems and returns a ModelBuildResult containing the result.
            </summary>
      <param name="instanceName">The name of the application instance, to be used as the root node.</param>
      <param name="itemList">A list of ConfigurationItems containing Model Items to build.</param>
      <returns>A new instance of ModelBuildResult containing the results of the build operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.BuildModel(System.String,System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem},Symbiote.Core.Model.ModelBuildResult,System.Int32)">
      <summary>
            Accepts a list of Configuration.Items and recursively instantiates items in the Model corresponding to the items in the list.
            </summary>
      <param name="instanceName">The name of the application instance, to be used as the root node.</param>
      <param name="itemList">A list of model items from which to build the model.</param>
      <param name="result">An instance of ModelBuildResult, ideally new.  The method will recursively pass it to itself and return it to the calling method when complete.</param>
      <param name="depth">The current depth of recursion. Defaults to 0 if omitted.</param>
      <returns>A ModelBuildResult containing the result of the build operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.AttachModel(Symbiote.Core.Model.ModelBuildResult)">
      <summary>
            Assigns the Model and Dictionary contained within the supplied ModelBuildResult to the supplied model and dictionary.
            </summary>
      <param name="model">The model to which to attach the model contained within the ModelBuildResult.</param>
      <param name="dictionary">The dictionary to which to attach the dictionary contained within the ModelBuildResult.</param>
      <param name="modelBuildResult">The built model to attach.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.SaveModel">
      <summary>
            Generates a list of ConfigurationModelItems based on the current Model and updates the Configuration.  If flushToDisk is true, saves the updated Configuration to disk.
            </summary>
      <param name="flushToDisk">Save the updated Configuration to disk.</param>
      <returns>A Result containing the list of saved ConfigurationModelItems.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.SaveModel(Symbiote.Core.Item,Symbiote.Core.Result{System.Collections.Generic.List{Symbiote.Core.Model.ModelManagerConfigurationItem}})">
      <summary>
            Updates and returns the provided Result containing the list of ConfigurationModelItems with the recursively listed contents of the provided ModelItem.
            </summary>
      <param name="itemRoot">The ModelItem from which to start recursively updating the list.</param>
      <param name="configuration">A Result containing the list of ConfigurationModelItems to update.</param>
      <returns>A Result containing the list of saved ConfigurationModelItems.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item)">
      <summary>
            Adds an Item to the ModelManager's instance of Model and Dictionary.
            </summary>
      <param name="item">The Item to add.</param>
      <returns>A Result containing the added Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.AddItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)">
      <summary>
            Adds an Item to the given Model and Dictionary.
            </summary>
      <param name="model">The Model to which to add the Item.</param>
      <param name="dictionary">The Dictionary to which to add the Item.</param>
      <param name="item">The Item to add.</param>
      <returns>A Result containing the added Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.FindItem(System.String)">
      <summary>
            Returns the ModelItem from the Dictionary belonging to the ModelManager instance matching the supplied key.
            </summary>
      <param name="fqn">The Fully Qualified Name of the desired ModelItem.</param>
      <returns>The ModelItem from the Model corresponding to the supplied key.</returns>
      <remarks>Retrieves items from the Dictionary instance belonging to the ModelManager instance.</remarks>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.FindItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},System.String)">
      <summary>
            Returns the ModelItem from the supplied Dictionary matching the supplied key.
            </summary>
      <param name="dictionary">The Dictionary from which to retrieve the item.</param>
      <param name="fqn">The Fully Qualified Name of the desired ModelItem.</param>
      <returns>The ModelItem stored in the supplied Dictionary corresponding to the supplied key.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.UpdateItem(Symbiote.Core.Item,Symbiote.Core.Item)">
      <summary>
            Updates the supplied Item with the supplied Source Item.
            </summary>
      <param name="item">The Item to update.</param>
      <param name="sourceItem">The SourceItem with which to update the Item.</param>
      <returns>A Result containing the result of the operation and the updated Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.RemoveItem(Symbiote.Core.Item)">
      <summary>
            Removes an Item from the ModelManager's Dictionary and from its parent Item.
            </summary>
      <param name="item">The Item to remove.</param>
      <returns>A Result containing the removed Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.RemoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item)">
      <summary>
            Removes an Item from the provided Dictionary and removes it from its parent Item.
            </summary>
      <param name="dictionary">The Dictionary from which to remove the Item.</param>
      <param name="item">The Item to remove.</param>
      <returns>A Result containing the removed Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.MoveItem(Symbiote.Core.Item,System.String)">
      <summary>
            Moves the supplied Item from one place in the ModelManager's instances of Model and Dictionary to another based on the supplied FQN.
            </summary>
      <param name="item">The Item to move.</param>
      <param name="fqn">The Fully Qualified Name representing the new location for the item.</param>
      <returns>A Result containing the moved Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.MoveItem(System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)">
      <summary>
            Moves the supplied Item from one place in the supplied Model and Dictionary to another based on the supplied FQN.
            </summary>
      <param name="dictionary">The Dictionary containing the supplied Item.</param>
      <param name="item">The Item to move.</param>
      <param name="fqn">The Fully Qualified Name representing the new location for the Item.</param>
      <returns>A Result containing the moved Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.String)">
      <summary>
            Creates a copy of the specified Item and stores it at the specified FQN within the default Model and Dictionary.
            </summary>
      <param name="item">The Item to copy.</param>
      <param name="fqn">The Fully Qualified Name of the destination Item.</param>
      <returns>A Result containing the result of the operation and the newly created Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.CopyItem(Symbiote.Core.Item,System.Collections.Generic.Dictionary{System.String,Symbiote.Core.Item},Symbiote.Core.Item,System.String)">
      <summary>
            Creates a copy of the specified Item and stores it at the specified FQN within the specified Model and Dictionary.
            </summary>
      <param name="model">The Model in which to copy the Item.</param>
      <param name="dictionary">The Dictionary in which to copy the Item.</param>
      <param name="item">The Item to copy.</param>
      <param name="fqn">The Fully Qualified Name of the destination Item.</param>
      <returns>A Result containing the result of the operation and the newly created Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.AttachItem(Symbiote.Core.Item,Symbiote.Core.Item)">
      <summary>
            Attaches the provided Item to the supplied Item.  This method should be used only to attach plugin Items
            to the application model.  When adding Items directly, use AddItem.
            </summary>
      <param name="item">The Item to attach to the Model.</param>
      <param name="parentItem">The Item to which the new Item should be attached.</param>
      <returns>A Result containing the result of the operation and the attached Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.RenameItemInstance(Symbiote.Core.Item,System.String)">
      <summary>
            Renames the provided Item and all child Items "in place" without affecting the model.  
            This method supports the CopyItem and MoveItem methods; if you want to move something in the model
            as well as rename it, use MoveItem.  To be crystal clear, this is not a CRUD operation!
            </summary>
      <param name="item">The Item to rename.</param>
      <param name="fqn">The new Fully Qualified Name for the Item.</param>
      <returns>A renamed clone of the provided Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.GetConfigurationDefinition">
      <summary>
            Returns the ConfigurationDefinition for the Model Manager.
            </summary>
      <returns>The ConfigurationDefinition for the Model Manager.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.GetDefaultConfiguration">
      <summary>
            Returns the default Configuration for the Model Manager.
            </summary>
      <returns>The default Configuration for the Model Manager.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.GetParentFQNFromItemFQN(System.String)">
      <summary>
            Parses and returns an Item path from the given FQN.
            </summary>
      <param name="itemFQN">The FQN from which to parse the path.</param>
      <returns>The Item path.</returns>
    </member>
    <member name="M:Symbiote.Core.Model.ModelManager.GetItemNameFromItemFQN(System.String)">
      <summary>
            Parses and returns an Item name from the given FQN.
            </summary>
      <param name="itemFQN">The FQN from which to parse the name.</param>
      <returns>The Item name.</returns>
    </member>
    <member name="T:Symbiote.Core.Platform.Platform">
      <summary>
            The Platform class implements the platform interfaces necessary to run the application on a generic platform.  The class is abstract;
            any actual implementation needs to extend this class.
            </summary>
      <remarks>
            Some wierdness in the C# compiler won't allow implicitly defined interface properties if the property is less
            accessible than public.  For whatever reason the properties can be public but the class can be internal.
            The effective accessibility for these classes and all of their members is internal.
            </remarks>
    </member>
    <member name="F:Symbiote.Core.Platform.Platform.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.Platform.PlatformType">
      <summary>
            The Platform Type.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.Platform.Version">
      <summary>
            The Version of the Platform OS.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.Platform.Connector">
      <summary>
            The accompanying Connector Plugin for the Platform.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.#ctor">
      <summary>
            The default constructor.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.InstantiateConnector(System.String)">
      <summary>
            Instantiates the accompanying Connector Plugin with the supplied root path.
            </summary>
      <param name="instanceName">
      </param>
      <returns>The instantiated Connector Plugin.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.DirectoryExists(System.String)">
      <summary>
            Returns true if the specified directory exists, false otherwise.
            </summary>
      <param name="directory">The directory to check.</param>
      <returns>True if the specified directory exists, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ListDirectories(System.String)">
      <summary>
            Returns a list of subdirectories within the supplied path.
            </summary>
      <param name="parentDirectory">The parent directory to search.</param>
      <returns>A Result containing the result of the operation and list containing the fully qualified path of each directory found.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.DeleteDirectory(System.String)">
      <summary>
            Deletes the supplied directory.
            </summary>
      <param name="directory">The directory to delete.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ClearDirectory(System.String)">
      <summary>
            Deletes all files and subdirectories within the supplied directory.
            </summary>
      <param name="directory">The directory to clear.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.CreateDirectory(System.String)">
      <summary>
            Creates the supplied directory.
            </summary>
      <param name="directory">The directory to create.</param>
      <returns>A Result containing the result of the operation and the fully qualified path to the directory.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.FileExists(System.String)">
      <summary>
            Returns true if the specified file exists, false otherwise.
            </summary>
      <param name="file">The file to check.</param>
      <returns>True if the specified file exists, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ListFiles(System.String,System.String)">
      <summary>
            Returns a list of files within the supplied directory matching the supplied searchPattern.
            </summary>
      <param name="parentDirectory">The directory to search.</param>
      <param name="searchPattern">The search pattern to match files against.</param>
      <returns>A Result containing the result of the operation and a list containing the fully qualified filename of each file found.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.DeleteFile(System.String)">
      <summary>
            Deletes the specified file.
            </summary>
      <param name="file">The file to delete.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ReadFile(System.String)">
      <summary>
            Reads the contents of the specified file into a single string.
            </summary>
      <param name="file">The file to read.</param>
      <returns>A Result containing the result of the operation and a string containing the entire contents of the file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ReadFileLines(System.String)">
      <summary>
            Reads the contents of the specified file into a string array.
            </summary>
      <param name="file">The file to read.</param>
      <returns>A Result containing the result of the operation and a string array containing all of the lines from the file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.WriteFile(System.String,System.String)">
      <summary>
            Writes the contents of the supplied string into the specified file.  If the destination file already exists it is overwritten.
            </summary>
      <param name="file">The file to write.</param>
      <param name="contents">The text to write to the file.</param>
      <returns>The fully qualified name of the written file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ListZipFiles(System.String,System.String)">
      <summary>
            Returns a list of files contained within the specified zip file matching the supplied searchPattern.
            </summary>
      <param name="zipFile">The zip file to search.</param>
      <param name="searchPattern">The search pattern to match files against.</param>
      <returns>A Result containing the result of the operation and a list containing the fully qualified filename of each file found.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ExtractZip(System.String,System.String,System.Boolean)">
      <summary>
            Extracts the contents of the supplied zip file to the specified destination, 
            clearing the destination first if clearDestination is true.
            </summary>
      <param name="zipFile">The zip file to extract.</param>
      <param name="destination">The destination directory.</param>
      <param name="clearDestination">True if the destination directory should be cleared prior to extraction, false otherwise.</param>
      <returns>A Result containing the result of the operation and the fully qualified path to the extracted files.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Extracts the supplied file from the supplied zip file to the supplied destination, overwriting the file if overwrite is true.
            </summary>
      <param name="zipFile">The zip file from which to extract the file.</param>
      <param name="file">The file to extract from the zip file.</param>
      <param name="destination">The destination directory.</param>
      <param name="overwrite">True if an existing file should be overwritten, false otherwise.</param>
      <returns>A Result containing the result of the operation and the fully qualified filename of the extracted file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.Platform.ComputeFileChecksum(System.String)">
      <summary>
            Computes the checksum of the specified file.
            </summary>
      <param name="file">The file for which the checksum is to be computed.</param>
      <returns>A Result containing the result of the operation and the computed checksum.</returns>
    </member>
    <member name="T:Symbiote.Core.Platform.PlatformDirectories">
      <summary>
            The ProgramDirectories class encapsulates the filesystem directories needed to run the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Root">
      <summary>
            The root directory; the directory from which the main executable is running.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Data">
      <summary>
            The data directory
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Archives">
      <summary>
            The archive directory
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Plugins">
      <summary>
            The plugin directory
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Temp">
      <summary>
            The temporary directory
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Persistence">
      <summary>
            The persistence directory
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Web">
      <summary>
            The web directory
            </summary>
      <remarks>Web content is served from this directory; anything placed here will be exposed.</remarks>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformDirectories.Logs">
      <summary>
            The log directory
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformDirectories.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Creates an instance of ProgramDirectories using the provided dictionary
            </summary>
      <param name="directories">A dictionary containing the name and directory for each of the program directores.</param>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformDirectories.CheckDirectories">
      <summary>
            Check each of the directories in the internal directory list and ensures that they exist.  
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformDirectories.ToDictionary">
      <summary>
            Returns a dictionary containing all of the program directories keyed by name.
            </summary>
      <returns>A dictionary containing all of the program directories keyed by name.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformDirectories.LoadDirectories(System.String)">
      <summary>
            Deserializes the provided string to a dictionary containing the program directory names and paths, then creates
            an instance of ProgramDirectories with it.
            </summary>
      <param name="directories">A serialized dictionary containing the program directories and their paths.</param>
      <returns>A Result containing the result of the operation along with a ProgramDirectories instance containing the directories.</returns>
    </member>
    <member name="T:Symbiote.Core.Platform.PlatformType">
      <summary>
            Enumeration of the different Platform types.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Platform.PlatformType.Unknown">
      <summary>
            The default value
            </summary>
    </member>
    <member name="F:Symbiote.Core.Platform.PlatformType.Windows">
      <summary>
            The Windows platform
            </summary>
    </member>
    <member name="F:Symbiote.Core.Platform.PlatformType.UNIX">
      <summary>
            The UNIX platform
            </summary>
    </member>
    <member name="N:Symbiote.Core.Platform.UNIX">
      <summary>
                The UNIX namespace is responsible for providing the necessary Platform and Platform Connector for the application when run
                on the UNIX platform.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Platform.UNIX.UNIXPlatform">
      <summary>
            The UNIXPlatform class extends the Platform class and overloads the necessary methods to run the application on the UNIX platform.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.UNIX.UNIXPlatform.#ctor">
      <summary>
            The default constructor.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.UNIX.UNIXPlatform.InstantiateConnector(System.String)">
      <summary>
            Instantiates the accompanying Connector Plugin with the supplied root path.
            </summary>
      <param name="instanceName">
      </param>
      <returns>The instantiated Connector Plugin.</returns>
    </member>
    <member name="N:Symbiote.Core.Platform.Windows">
      <summary>
                The Windows namespace is responsible for providing the necessary Platform and Platform Connector for the application when run
                on the Windows platform.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Platform.Windows.WindowsPlatform">
      <summary>
            The WindowsPlatform class extends the Platform class and overloads the necessary methods to run the application on the Windows platform.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.Windows.WindowsPlatform.#ctor">
      <summary>
            The default constructor.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.Windows.WindowsPlatform.InstantiateConnector(System.String)">
      <summary>
            Instantiates the accompanying Connector Plugin with the supplied root path.
            </summary>
      <param name="instanceName">
      </param>
      <returns>The instantiated Connector Plugin.</returns>
    </member>
    <member name="T:Symbiote.Core.Platform.IPlatform">
      <summary>
            Defines the interface for Platform objects.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.IPlatform.PlatformType">
      <summary>
            The Platform Type.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.IPlatform.Version">
      <summary>
            The Version of the Platform OS.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.IPlatform.Connector">
      <summary>
            The accompanying Connector Plugin for the Platform.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.InstantiateConnector(System.String)">
      <summary>
            Instantiates the accompanying Connector Plugin with the supplied root path.
            </summary>
      <param name="instanceName">
      </param>
      <returns>The instantiated Connector Plugin.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.DirectoryExists(System.String)">
      <summary>
            Returns true if the specified directory exists, false otherwise.
            </summary>
      <param name="directory">The directory to check.</param>
      <returns>True if the specified directory exists, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ListDirectories(System.String)">
      <summary>
            Returns a list of subdirectories within the supplied path.
            </summary>
      <param name="parentDirectory">The parent directory to search.</param>
      <returns>A Result containing the result of the operation and list containing the fully qualified path of each directory found.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.DeleteDirectory(System.String)">
      <summary>
            Deletes the supplied directory.
            </summary>
      <param name="directory">The directory to delete.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ClearDirectory(System.String)">
      <summary>
            Deletes all files and subdirectories within the supplied directory.
            </summary>
      <param name="directory">The directory to clear.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.CreateDirectory(System.String)">
      <summary>
            Creates the supplied directory.
            </summary>
      <param name="directory">The directory to create.</param>
      <returns>A Result containing the result of the operation and the fully qualified path to the directory.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.FileExists(System.String)">
      <summary>
            Returns true if the specified file exists, false otherwise.
            </summary>
      <param name="file">The file to check.</param>
      <returns>True if the specified file exists, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ListFiles(System.String,System.String)">
      <summary>
            Returns a list of files within the supplied directory matching the supplied searchPattern.
            </summary>
      <param name="parentDirectory">The directory to search.</param>
      <param name="searchPattern">The search pattern to match files against.</param>
      <returns>A Result containing the result of the operation and a list containing the fully qualified filename of each file found.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.DeleteFile(System.String)">
      <summary>
            Deletes the specified file.
            </summary>
      <param name="file">The file to delete.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ReadFile(System.String)">
      <summary>
            Reads the contents of the specified file into a single string.
            </summary>
      <param name="file">The file to read.</param>
      <returns>A Result containing the result of the operation and a string containing the entire contents of the file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ReadFileLines(System.String)">
      <summary>
            Reads the contents of the specified file into a string array.
            </summary>
      <param name="file">The file to read.</param>
      <returns>A Result containing the result of the operation and a string array containing all of the lines from the file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.WriteFile(System.String,System.String)">
      <summary>
            Writes the contents of the supplied string into the specified file.  If the destination file already exists it is overwritten.
            </summary>
      <param name="file">The file to write.</param>
      <param name="contents">The text to write to the file.</param>
      <returns>The fully qualified name of the written file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ListZipFiles(System.String,System.String)">
      <summary>
            Returns a list of files contained within the specified zip file matching the supplied searchPattern.
            </summary>
      <param name="zipFile">The zip file to search.</param>
      <param name="searchPattern">The search pattern to match files against.</param>
      <returns>A Result containing the result of the operation and a list containing the fully qualified filename of each file found.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ExtractZip(System.String,System.String,System.Boolean)">
      <summary>
            Extracts the contents of the supplied zip file to the specified destination, 
            clearing the destination first if clearDestination is true.
            </summary>
      <param name="zipFile">The zip file to extract.</param>
      <param name="destination">The destination directory.</param>
      <param name="clearDestination">True if the destination directory should be cleared prior to extraction, false otherwise.</param>
      <returns>A Result containing the result of the operation and the fully qualified path to the extracted files.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ExtractZipFile(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Extracts the supplied file from the supplied zip file to the supplied destination, overwriting the file if overwrite is true.
            </summary>
      <param name="zipFile">The zip file from which to extract the file.</param>
      <param name="file">The file to extract from the zip file.</param>
      <param name="destination">The destination directory.</param>
      <param name="overwrite">True if an existing file should be overwritten, false otherwise.</param>
      <returns>A Result containing the result of the operation and the fully qualified filename of the extracted file.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.IPlatform.ComputeFileChecksum(System.String)">
      <summary>
            Computes the checksum of the specified file using the SHA256 hashing algorithm.
            </summary>
      <remarks>To ensure cross-platform, cross-installation compatibility, only an unsalted SHA256 algorithm is to be used.</remarks>
      <param name="file">The file for which the checksum is to be computed.</param>
      <returns>A Result containing the result of the operation and the computed checksum.</returns>
    </member>
    <member name="N:Symbiote.Core.Platform">
      <summary>
            The Platform namespace abstracts the platform on which the app runs.
            </summary>
      <remarks>
        <para>
                The primary purposes are to assist the application in determining the current platform (e.g. Windows or UNIX) and to
                allow for platform dependent code such as file IO to be substituted at run time. This allows for a single project that can 
                be compiled and run on both Windows and UNIX systems with no programatic changes.
            </para>
        <para>
                Each Platform type gets a folder (e.g. UNIX, Windows) and within that folder a derivation of Platform named as "PlatformPlatform"
                where the first "Platform" is the name.  Each Platform type is required to provide an implementation of IConnector for the platform which
                returns statistical information about the hardware and OS hosting the application.  Of primary concern is CPU, Memory and Hard Disk usage.
            </para>
        <para>
                Finally, the Platform Manager and PlatformDirectories class work together to ensure that the necessary directories are present in the 
                configured locations.  If any directories are missing they are recreated at startup.  The app.exe.config file contains the definition
                for these directories.  If the configuration file is missing any or all of the programatically defined directories an exception will be
                thrown by the constructor of PlatformDirectories, causing the initialization of the application to fail.
            </para>
      </remarks>
    </member>
    <member name="T:Symbiote.Core.Platform.PlatformManager">
      <summary>
            The PlatformManager class manages the application platform, specifically, the platform-dependent elements of the system.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Platform.PlatformManager.logger">
      <summary>
            The logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Platform.PlatformManager.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Platform.PlatformManager.instance">
      <summary>
            The Singleton instance of PlatformManager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformManager.State">
      <summary>
            The state of the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformManager.Platform">
      <summary>
            The current platform.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Platform.PlatformManager.Directories">
      <summary>
            A Dictionary containing all of the application directories, loaded from the App.config.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformManager.#ctor(Symbiote.Core.ProgramManager)">
      <summary>
            Private constructor, only called by Instance()
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformManager.Instance(Symbiote.Core.ProgramManager)">
      <summary>
            Instantiates and/or returns the PlatformManager instance.
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
      <returns>The Singleton instance of PlatformManager.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformManager.Start">
      <summary>
            Starts the Platform manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformManager.Restart">
      <summary>
            Restarts the Platform manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformManager.Stop">
      <summary>
            Stops the Platform manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformManager.GetPlatformType">
      <summary>
            Evaluates Environment.OSVersion.Platform to determine the current platform.
            </summary>
      <returns>A PlatformType enumeration corresponding to the current platform.</returns>
    </member>
    <member name="M:Symbiote.Core.Platform.PlatformManager.GetDirectories">
      <summary>
            Retrieves the "Directories" setting from the app.config file, or the default value if the retrieval fails.
            </summary>
      <returns>The list of program directories.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.Connector.IAddable">
      <summary>
            Defines the interface for Connector Plugins capable of allowing new ConnectorItems to be added at runtime.
            </summary>
      <remarks>
        <para>
                An <see cref="T:Symbiote.Core.Plugin.Connector.IConnector" /> instance implementing IAddable is responsible for adding additional <see cref="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />s
                to the Connector Plugin's Item data structure at runtime.  This functionality is intended primarily for data sources without
                the capability of fully describing the Items that are available for reading.
            </para>
        <para>
                New ConnectorItems are added via the <see cref="M:Symbiote.Core.Plugin.Connector.IAddable.Add(System.String,System.String)" /> method.  This method accepts a string containing the
                Fully Qualified Name for the new item, and a string containing the Fully Qualified Source Name for the item.  The Source Name
                should be validated by the Plugin to ensure it is well formed.  The Add() method must return an <see cref="T:Symbiote.Core.Result`1" />
                containing the result of the operation and Item that was added, as well as any informational, warning or error messages that 
                were generated during the operation.
            </para>
        <para>
                Fully Qualified Names may be any well formed name.  If the path of the FQN contains items that don't yet exist, the Plugin
                is responsible for creating them.  For example, if the specified FQN is "Devices.Switches.Momentary.Paddle" and only the 
                "Devices" Item exists, the Add() method is required to create "Switches", "Momentary" and "Paddle", with the SourceFQN property
                of "Paddle" set to the specified Fully Qualified Source Name.
            </para>
      </remarks>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.IAddable.Add(System.String,System.String)">
      <summary>
            Adds a new <see cref="T:Symbiote.Core.Plugin.Connector.ConnectorItem" /> with the specified Fully Qualified Name and Fully Qualified Source Name
            to the Connector Plugin's data structure.
            </summary>
      <remarks>
            Items contained within the Fully Qualified Path for the Item must be created if they don't yet exist.
            </remarks>
      <param name="fqn">The Fully Qualifed Name of the <see cref="T:Symbiote.Core.Item" /> to add.</param>
      <param name="sourceFQN">The Fully Qualified Source Name of the backing data point or structure.</param>
      <returns>An <see cref="T:Symbiote.Core.Result`1" /> containing an <see cref="T:Symbiote.Core.Item" /> and the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.Connector.IConnector">
      <summary>
            Defines the interface for Connector Plugins.
            </summary>
      <remarks>
        <para>
                Classes implementing IConnector are responsible for application extensibility, providing read/write access to external 
                data stores and interfaces.
            </para>
        <para>
                All data exposed by an IConnector must be represented as an <see cref="T:Symbiote.Core.Item" /> with instance type <see cref="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />.  
                ConnectorItem instances must be arranged in a composite (tree) data structure, the minimum structure being that of a single 
                root node.  This data structure is accessed by the application with the <see cref="M:Symbiote.Core.Plugin.Connector.IConnector.Browse" /> and <see cref="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)" /> 
                methods.  The <see cref="M:Symbiote.Core.Plugin.Connector.IConnector.Find(System.String)" /> method must be implemented to search for and return an Item matching the specified
                Fully Qualified Name within the data structure, if it exists.
            </para>
        <para>
                The <see cref="M:Symbiote.Core.Plugin.Connector.IConnector.Read(Symbiote.Core.Item)" /> method must return an <see cref="T:Symbiote.Core.Result`1" /> containing an object representing the 
                current value of the specified Item.  The Result must contain the result of the operation, including the status
                and any informational, warning or error messages that were generated.
            </para>
        <para>
                The IConnector interface represents the minimun implementation of the class.  Other functionality may be implemented by 
                implementing one or more of the following interfaces:
                <list><item><see cref="T:Symbiote.Core.Plugin.Connector.IAddable" />: Allows the application to add additional ConnectorItems to the Connector at runtime.</item><item><see cref="T:Symbiote.Core.Plugin.Connector.IWriteable" />: Allows the application to write values to the source of a ConnectorItem.</item><item><see cref="T:Symbiote.Core.Plugin.Connector.ISubscribable" />: Allows the application to subscribe Model Items to ConnectorItems to receive value updates.</item></list></para>
      </remarks>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.IConnector.Browse">
      <summary>
            Returns the root node of the connector's <see cref="T:Symbiote.Core.Item" /> tree.
            </summary>
      <returns>The root node of the connector's <see cref="T:Symbiote.Core.Item" /> tree.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.IConnector.Browse(Symbiote.Core.Item)">
      <summary>
            Returns a list of the children <see cref="T:Symbiote.Core.Item" />s for the specified Item within the connector's Item tree.
            </summary>
      <param name="root">The <see cref="T:Symbiote.Core.Item" /> for which the children are to be returned.</param>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of type <see cref="T:Symbiote.Core.Item" /> containing all of the specified Item's children.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.IConnector.Find(System.String)">
      <summary>
            Returns the <see cref="T:Symbiote.Core.Item" /> matching the specified Fully Qualified Name.
            </summary>
      <param name="fqn">The Fully Qualified Name of the <see cref="T:Symbiote.Core.Item" /> to return.</param>
      <returns>The found <see cref="T:Symbiote.Core.Item" />, or the default(Item) if not found.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.IConnector.Read(Symbiote.Core.Item)">
      <summary>
            Returns the current value of the specified <see cref="T:Symbiote.Core.Item" />.
            </summary>
      <param name="item">The <see cref="T:Symbiote.Core.Item" /> to read.</param>
      <returns>The current value of the <see cref="T:Symbiote.Core.Item" />.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.Connector.ISubscribable">
      <summary>
            Defines the interface for Connector Plugins which are capable of producing unsolicited value updates to configured Items.
            </summary>
      <remarks>
        <para>
                Each <see cref="T:Symbiote.Core.Plugin.Connector.IConnector" /> implementing ISubscribable must implement a <see cref="T:System.Collections.Generic.Dictionary`2" /> property
                named <see cref="P:Symbiote.Core.Plugin.Connector.ISubscribable.Subscriptions" /> keyed on <see cref="T:Symbiote.Core.Plugin.Connector.ConnectorItem" /> and with value <see cref="T:System.Int32" />.  Each entry in the 
                Dictionary represents an Item with at least one active subscriber.  
            </para>
        <para>
                Subscriptions are added via the <see cref="M:Symbiote.Core.Plugin.Connector.ISubscribable.Subscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)" /> method.  If the specified ConnectorItem does not exist
                in the Dictionary at the time of the method call, the method must add an entry to the Dictionary with value 1.  If the specified
                ConnectorItem exists in the Dictionary, the value must be incremented by 1.  The Subscribe() method must return an 
                <see cref="T:Symbiote.Core.Result" /> containing the result of the operation as well as any informational, warning or error messages 
                that were generated.
            </para>
        <para>
                Subscription are removed via the <see cref="M:Symbiote.Core.Plugin.Connector.ISubscribable.UnSubscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)" /> method.  Assuming the specified ConnectorItem exists
                in the Dictionary at the time of the method call, the value for the entry must be decremented by 1.  If, after the decrement,
                the value is zero or less, the item must be removed from the Dictionary completely.  The UnSubscribe() method must return an
                Result containing the result of the operation as well as any informational, warning or error messages that were generated.
            </para>
      </remarks>
    </member>
    <member name="P:Symbiote.Core.Plugin.Connector.ISubscribable.Subscriptions">
      <summary>
            The <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the current list of subscribed items and the number of subscribers for each.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ISubscribable.Subscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <summary>
            Creates a subscription to the specified ConnectorItem.
            </summary>
      <remarks>
                Upon the addition of the initial subscriber, an entry is added to the <see cref="P:Symbiote.Core.Plugin.Connector.ISubscribable.Subscriptions" />
                Dictionary keyed with the specified Item and with a quantity of one.  Successive subscriptions
                increment the quantity by one.
            </remarks>
      <param name="item">The <see cref="T:Symbiote.Core.Item" /> to which the subscription should be added.</param>
      <returns>An <see cref="T:Symbiote.Core.Result" /> containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ISubscribable.UnSubscribe(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <summary>
            Removes a subscription from the specified ConnectorItem.
            </summary>
      <remarks>
                Decrements the number of subscribers within the <see cref="P:Symbiote.Core.Plugin.Connector.ISubscribable.Subscriptions" /> Dictionary.
                Upon removal of the final subscriber, the subscription is completely removed.
            </remarks>
      <param name="item">The <see cref="T:Symbiote.Core.Item" /> for which the subscription should be removed.</param>
      <returns>An <see cref="T:Symbiote.Core.Result" /> containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.Connector.IWriteable">
      <summary>
            Defines the interface for Connector Plugins capable of writing data to the source of the Connector data.
            </summary>
      <remarks>
        <para>
                An <see cref="T:Symbiote.Core.Plugin.Connector.IConnector" /> instance implementing IWriteable is responsible for writing data to 
                <see cref="T:Symbiote.Core.Plugin.Connector.ConnectorItem" />s by way of the <see cref="M:Symbiote.Core.Plugin.Connector.IWriteable.Write(Symbiote.Core.Item,System.Object)" /> method.  This method accepts a 
                ConnectorItem instance and a value boxed in an <see cref="T:System.Object" />.
            </para>
        <para>
                The Write() method must return a valid <see cref="T:Symbiote.Core.Result" /> containing the result of the operation,
                including any informational, warning or error messages generated during the operation.
            </para>
      </remarks>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.IWriteable.Write(Symbiote.Core.Item,System.Object)">
      <summary>
            Writes the specified value to the specified <see cref="T:Symbiote.Core.Item" />.
            </summary>
      <param name="item">The <see cref="T:Symbiote.Core.Item" /> to write.</param>
      <param name="value">The value to write to the <see cref="T:Symbiote.Core.Item" />.</param>
      <returns>An <see cref="T:Symbiote.Core.Result" /> containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.Connector.ConnectorItem">
      <summary>
                ConnectorItem is an extension of the <see cref="T:Symbiote.Core.Item" /> class.  This class represents Items that are provided by <see cref="P:Symbiote.Core.Plugin.Connector.ConnectorItem.Connector" /><see cref="T:Symbiote.Core.Plugin.Plugin" />s.
            </summary>
      <remarks>
        <para>
            The primary differences between this class and the base Item are:
            <list><item>The ConnectorItem stores no values.  Furthermore it does not implement persistence.</item><item>The ConnectorItem reads and writes directly to the parent Connector Plugin using the Fully Qualified Name of the item.</item><item>
                    The ConnectorItem is written via Write() only from the parent Connector Plugin.  This in turn fires the OnChange event, 
                    which updates any subscribed Model Items.  Model items wishing to write to this item must use WriteToSource().
                </item></list></para>
      </remarks>
    </member>
    <member name="P:Symbiote.Core.Plugin.Connector.ConnectorItem.Connector">
      <summary>
            The <see cref="T:Symbiote.Core.Plugin.Connector.IConnector" /> instance to which this <see cref="T:Symbiote.Core.Item" /> belongs.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor">
      <summary>
            An empty constructor used for instantiating the root node of a model.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.Boolean)">
      <summary>
            Creates an instance of an <see cref="T:Symbiote.Core.Item" /> with the given Fully Qualified Name to be used as the root of a model.
            </summary>
      <param name="connector">The instance of <see cref="T:Symbiote.Core.Plugin.Connector.IConnector" /> hosting this <see cref="T:Symbiote.Core.Item" />.</param>
      <param name="fqn">The Fully Qualified Name of the <see cref="T:Symbiote.Core.Item" /> to create.</param>
      <param name="isRoot">True if the item is to be created as a root model item, false otherwise.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String)">
      <summary>
            Creates an instance of an <see cref="T:Symbiote.Core.Item" /> with the given Fully Qualified Name and Source Fully Qualified Name.
            </summary>
      <param name="connector">The instance of <see cref="T:Symbiote.Core.Plugin.Connector.IConnector" /> hosting this <see cref="T:Symbiote.Core.Item" />.</param>
      <param name="fqn">The Fully Qualified Name of the <see cref="T:Symbiote.Core.Item" /> to create.</param>
      <param name="sourceFQN">The Fully Qualified Name of the source item.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ConnectorItem.#ctor(Symbiote.Core.Plugin.Connector.IConnector,System.String,System.String,System.Boolean)">
      <summary>
            Creates an instance of an Item with the given Fully Qualified Name and type.  If isRoot is true, marks the Item as the root item in a model.
            </summary>
      <param name="connector">The instance of <see cref="T:Symbiote.Core.Plugin.Connector.IConnector" /> hosting this <see cref="T:Symbiote.Core.Item" />.</param>
      <param name="fqn">The Fully Qualified Name of the <see cref="T:Symbiote.Core.Item" /> create.</param>
      <param name="sourceFQN">The Fully Qualified Name of the source item.</param>
      <param name="isRoot">True if the item is to be created as a root model item, false otherwise.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ConnectorItem.SetParent(Symbiote.Core.Plugin.Connector.ConnectorItem)">
      <summary>
            Sets this <see cref="T:Symbiote.Core.Item" />'s parent Item to the specified Item.
            </summary>
      <param name="parent">The <see cref="T:Symbiote.Core.Item" /> to which this Item's Parent property is to be set.</param>
      <returns>An <see cref="T:Symbiote.Core.Result`1" /> containing the result of the operation and this <see cref="T:Symbiote.Core.Item" />.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ConnectorItem.Write(System.Object)">
      <summary>
            Called by the parent Connector plugin to update the value of the ConnectorItem.
            Updates the internal value of the ConnectorItem and fires the Change event to notify any subscribed Items of the update.
            </summary>
      <remarks>Should never be called by anything other than the parent Connector plugin.</remarks>
      <param name="value">The value with which to update the ConnectorItem.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.Connector.ConnectorItem.WriteToSource(System.Object)">
      <summary>
            Called by Items using this ConnectorItem as a source, passes updated values to the Connector plugin for writing to the source of the item.
            </summary>
      <remarks>Any and all writes to ConnectorItems (other than by the Connector plugin) should be performed with WriteToSource.</remarks>
      <param name="value">The value with which to update the ConnectorItem.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.IPluginInstance">
      <summary>
            Defines the interface for PluginInstance objects.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.IPluginInstance.InstanceName">
      <summary>
            The name of the PluginInstance.  This is the unique name by which the PluginManager
            persists the PluginInstance.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.IPluginInstance.Start">
      <summary>
            Starts the PluginInstance.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.IPluginInstance.Restart">
      <summary>
            Restarts the PluginInstance.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.IPluginInstance.Stop">
      <summary>
            Stops the PluginInstance.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.Plugin">
      <summary>
            The Plugin class represents Plugins that have been installed but not yet loaded.
            
            The heirarchy of Plugin objects is:
                PluginArchive
                    Plugin
                        PluginAssembly
                            PluginInstance
                            
            PluginArchive instances are installed, creating Plugin instances.
            Plugin instances are loaded, creating PluginAssembly instances.
            PluginAssembly instances are instantiated, creating PluginInstance instances.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.Plugin.Name">
      <summary>
            The name of the Plugin.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.Plugin.FQN">
      <summary>
            The Fully Qualified Name of the Plugin.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.Plugin.Version">
      <summary>
            The version of the Plugin.
            </summary>
      <remarks>Formatting is disretionary.  Any comparisons between versions will be "equals" rather than greater than/less than.</remarks>
    </member>
    <member name="P:Symbiote.Core.Plugin.Plugin.PluginType">
      <summary>
            The type of Plugin.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.Plugin.Fingerprint">
      <summary>
            The cryptographic fingerprint of the Plugin.
            </summary>
      <remarks>The SHA256 checksum of the Plugin assembly hashed again using the SHA256 algorithm and salted with the FQN + Version.</remarks>
    </member>
    <member name="M:Symbiote.Core.Plugin.Plugin.#ctor(System.String,System.String,System.String,Symbiote.Core.Plugin.PluginType,System.String)">
      <summary>
            The default constructor.
            </summary>
      <param name="name">The name of the Plugin.</param>
      <param name="fqn">The Fully Qualified Name of the Plugin.</param>
      <param name="version">The version of the Plugin.</param>
      <param name="pluginType">The type of Plugin.</param>
      <param name="fingerprint">The cryptographic fingerprint of the Plugin.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.Plugin.SetFingerprint(System.String)">
      <summary>
            Sets the Fingerprint property to the supplied value.
            </summary>
      <param name="fingerprint">The value to which the property should be set.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.Plugin.Equals(System.Object)">
      <summary>
            Compares this object to the specified object and returns true if the objects are equal.
            </summary>
      <param name="obj">The object to which this object should be compared.</param>
      <returns>True if this object and the specified object are equal, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.Plugin.GetHashCode">
      <summary>
            Returns this object's HashCode.
            </summary>
      <returns>This object's HashCode.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.PluginArchive">
      <summary>
            Represents a Plugin Archive file.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginArchive.FileName">
      <summary>
            The fully qualified filename of the file.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginArchive.Plugin">
      <summary>
            The Plugin contained within the archive.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginArchive.#ctor(System.String,System.String,Symbiote.Core.Plugin.Plugin)">
      <summary>
            The default constructor.
            </summary>
      <param name="fileName">The fully qualified filename of the file.</param>
      <param name="checksum">The checksum of the file.</param>
      <param name="plugin">The Plugin contained within the archive.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginArchive.SetFileName(System.String)">
      <summary>
            Sets the FileName property to the provided value.
            </summary>
      <param name="fileName">The value with which to set the FileName property.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginArchive.SetPlugin(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Sets the Plugin property to the provided value.
            </summary>
      <param name="plugin">The value with which to set the Plugin property.</param>
    </member>
    <member name="T:Symbiote.Core.Plugin.InvalidPluginArchive">
      <summary>
            Represents an invalid Plugin Archive file.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.InvalidPluginArchive.Message">
      <summary>
            A string containing the reason the Plugin Archive is invalid.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.InvalidPluginArchive.#ctor(System.String,System.String)">
      <summary>
            Constructs a new InvalidPluginArchive and sets the Message property to the provided string.
            </summary>
      <param name="fileName">The fully qualified filename of the file.</param>
      <param name="message">A string containing the reason the file is invalid.</param>
    </member>
    <member name="T:Symbiote.Core.Plugin.PluginArchiveLoadResult">
      <summary>
            The PluginArchiveLoadResult extends the Result class and adds a list of type PluginArchive
            and a Dictionary with key and value types of string.
            
            The ValidArchives PluginArchive list contains the list of valid plugin archives discovered during the load.
            
            The InvalidArchive dictionary contains the list of archives that did not pass validation, along with the reason
            validation failed.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.ValidArchives">
      <summary>
            The list of valid Plugin Archives discovered during the load.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginArchiveLoadResult.InvalidArchives">
      <summary>
            The list of invalid Plugin Archives and the reason they failed validation.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginArchiveLoadResult.#ctor">
      <summary>
            The default constructor.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Plugin.PluginManagerConfiguration">
      <summary>
            PluginManagerConfiguration contains the configuration model for the PluginManager.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Plugin.PluginType">
      <summary>
            Enumeration of the different Plugin types.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginType.Unknown">
      <summary>
            The default value
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginType.Connector">
      <summary>
            The Connector Plugin Type
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginType.Endpoint">
      <summary>
            The Endpoint Plugin Type
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginType.App">
      <summary>
            The App Plugin Type
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginTypeManager`1.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginTypeManager`1.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginTypeManager`1.State">
      <summary>
            The state of the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginTypeManager`1.ConfiguredInstances">
      <summary>
            The list of Plugin Instances from the Plugin Manager Configuration which are managed by this Plugin Type Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginTypeManager`1.Instances">
      <summary>
            The list of Plugin Instances managed by this Plugin Type Manager.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginTypeManager`1.#ctor(Symbiote.Core.ProgramManager,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance})">
      <summary>
            The default constructor.
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
      <param name="configuredInstances">A list of Plugin Instances from the Plugin Manager configuration which match this Plugin Type.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginTypeManager`1.Start">
      <summary>
            Starts the Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginTypeManager`1.Restart">
      <summary>
            Restarts the Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginTypeManager`1.Stop">
      <summary>
            Stops the Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Plugin.IPlugin">
      <summary>
            Defines the interface for Plugin objects.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.IPlugin.Name">
      <summary>
            The name of the Plugin.  Typically a single word but may be a phrase.
            Equal to the last tuple of the FQN.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.IPlugin.FQN">
      <summary>
            The Fully Qualified Name of the Plugin.  The FQN shall use the following pattern:
                Symbiote.Plugin.[Connector|Endpoint].Name
                
            The final tuple, Name, shall match the Name property.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.IPlugin.Version">
      <summary>
            The version of the Plugin.  This is a free-text field allowing any format
            the Plugin author desires.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.IPlugin.PluginType">
      <summary>
            The enumerated type of the Plugin.  This shall match the thrid tuple of the FQN.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Plugin.PluginAuthorization">
      <summary>
            Enumeration of the different types of Plugin authorizations.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginAuthorization.Unknown">
      <summary>
            The default value.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginAuthorization.Unauthorized">
      <summary>
            The Plugin is unauthorized.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginAuthorization.Authorized">
      <summary>
            The Plugin has been authorized.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Plugin.PluginAssembly">
      <summary>
            The PluginAssembly class represents a plugin for which the assembly file has been loaded.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginAssembly.Name">
      <summary>
            The name of the Plugin.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginAssembly.FQN">
      <summary>
            The Fully Qualified Name of the Plugin.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginAssembly.Version">
      <summary>
            The version of the Plugin.
            </summary>
      <remarks>Formatting is disretionary.  Any comparisons between versions will be "equals" rather than greater than/less than.</remarks>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginAssembly.PluginType">
      <summary>
            The type of Plugin.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginAssembly.Fingerprint">
      <summary>
            The cryptographic fingerprint of the Plugin.
            </summary>
      <remarks>The SHA256 checksum of the Plugin assembly hashed again using the SHA256 algorithm and salted with the FQN + Version.</remarks>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginAssembly.Type">
      <summary>
            The Type of the Plugin contained within the Plugin assembly.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginAssembly.Assembly">
      <summary>
            The Plugin assembly.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginAssembly.#ctor(System.String,System.String,System.String,Symbiote.Core.Plugin.PluginType,System.String,System.Type,System.Reflection.Assembly)">
      <summary>
            The default constructor.
            </summary>
      <param name="name">The name of the Plugin.</param>
      <param name="fqn">The Fully Qualified Name of the Plugin.</param>
      <param name="version">The version of the Plugin.</param>
      <param name="pluginType">The type of Plugin.</param>
      <param name="fingerprint">The cryptographic fingerprint of the Plugin.</param>
      <param name="type">The Type of the Plugin contained within the Plugin assembly.</param>
      <param name="assembly">The Plugin assembly.</param>
    </member>
    <member name="T:Symbiote.Core.Plugin.PluginManager">
      <summary>
            The PluginManager class controls the plugin subsystem.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginManager.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginManager.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginManager.instance">
      <summary>
            The Singleton instance of PluginManager.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginManager.loadablePluginTypes">
      <summary>
            An array of loadable plugin types.
            </summary>
      <seealso cref="M:Symbiote.Core.Plugin.PluginManager.IsPluginLoadable(Symbiote.Core.Plugin.Plugin)" />
    </member>
    <member name="F:Symbiote.Core.Plugin.PluginManager.installationLock">
      <summary>
            Lock object for installation/uninstallation of Plugins.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.State">
      <summary>
            The state of the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.ConfigurationDefinition">
      <summary>
            The ConfigurationDefinition for the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.Configuration">
      <summary>
            The Configuration for the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.PluginAssemblies">
      <summary>
            A list of currently loaded plugin assemblies.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.PluginInstances">
      <summary>
            A Dictionary of all Plugin Instances, keyed by instance name.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.Plugins">
      <summary>
            A list of installed plugins.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.PluginArchives">
      <summary>
            A list of all Plugin Archives.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.InvalidPluginArchives">
      <summary>
            A list of all invalid Plugin Archives.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.ConnectorManager">
      <summary>
            The manager for Plugins of type Connector.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Plugin.PluginManager.EndpointManager">
      <summary>
            The manager for Plugins of type Endpoint.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.#ctor(Symbiote.Core.ProgramManager)">
      <summary>
            Private constructor, only called by Instance()
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.Instance(Symbiote.Core.ProgramManager)">
      <summary>
            Instantiates and/or returns the PluginManager instance.
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
      <returns>The Singleton instance of PluginManager.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.Start">
      <summary>
            Starts the Plugin manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.Restart">
      <summary>
            Restarts the Plugin manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.Stop">
      <summary>
            Stops the Plugin manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.Configure">
      <summary>
            Configures the Manager using the configuration stored in the Configuration Manager, or, failing that, using the default configuration.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.Configure(Symbiote.Core.Plugin.PluginManagerConfiguration)">
      <summary>
            Configures the Manager using the supplied configuration, then saves the configuration to the Model Manager.
            </summary>
      <param name="configuration">The configuration with which the Model Manager should be configured.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.SaveConfiguration">
      <summary>
            Saves the configuration to the Configuration Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives">
      <summary>
            Loads all valid Plugin Archives in the archive directory into a list of type PluginArchive and returns it.
            </summary>
      <returns>An instance of PluginArchiveLoadResult.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.LoadPluginArchives(System.String,System.String,Symbiote.Core.Platform.IPlatform)">
      <summary>
            Loads all valid Plugin Archives matching the supplied searchPattern in the supplied directory using the supplied IPlatform 
            into a list of type PluginArchive and returns it.
            </summary>
      <param name="directory">The directory to search.</param>
      <param name="searchPattern">The file extension of Plugin Archives.</param>
      <param name="platform">The IPlatform instance to use to perform the search.</param>
      <returns>An instance of PluginArchiveLoadResult.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.ReloadPluginArchives">
      <summary>
            Refreshes the lists of valid and invalid Plugin Archives.
            </summary>
      <returns>An instance of PluginArchiveLoadResult.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String)">
      <summary>
            Parses a Plugin Archive file into a PluginArchive object and validates it using default parameters.
            </summary>
      <param name="fileName">The Plugin Archive file to parse.</param>
      <returns>A Result containing the result of the operation and the parsed PluginArchive.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.ParsePluginArchive(System.String,System.String,System.String,Symbiote.Core.Platform.IPlatform)">
      <summary>
            Parses a Plugin Archive file into a PluginArchive object and validates it.
            </summary>
      <param name="fileName">The Plugin Archive file to parse.</param>
      <param name="configFileName">The name of the Plugin config file expected to be found within the archive.</param>
      <param name="payloadFileName">The name of the file containing the Plugin files expected to be found within the archive.</param>
      <param name="platform">The IPlatform instance to use to carry out the parse.</param>
      <returns>A Result containing the result of the operation and the parsed PluginArchive.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.InstallPluginAsync(Symbiote.Core.Plugin.PluginArchive)">
      <summary>
            Asynchronously installs the Plugin contained within the supplied PluginArchive.
            </summary>
      <param name="archive">The PluginArchive from which the Plugin is to be installed.</param>
      <returns>A Result containing the result of the operation and the installed Plugin.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Boolean)">
      <summary>
            Installs the Plugin contained within the supplied PluginArchive.
            </summary>
      <param name="archive">The PluginArchive from which the Plugin is to be installed.</param>
      <param name="updatePlugin">When true, bypasses checks that prevent</param>
      <returns>A Result containing the result of the operation and the installed Plugin.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.InstallPlugin(Symbiote.Core.Plugin.PluginArchive,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform,System.Boolean)">
      <summary>
            Installs the Plugin contained within the supplied PluginArchive using the supplied IPlatform and adds the installed Plugin to the
            supplied PluginManagerConfiguration.
            
            Prior to installing, the Plugin Archive is re-parsed to ensure it did not changed between the time it was loaded into the PluginArchives
            list and when installation was requested.  If the Plugin within the archive is the same as the loaded plugin, installation continues, otherwise
            the operation fails and requests that the user refreshes the list.
            </summary>
      <param name="archive">The PluginArchive from which the Plugin is to be installed.</param>
      <param name="plugins">The List of type Plugin to which the installed Plugin should be added.</param>
      <param name="platform">The IPlatform instance with which the archive should be extracted.</param>
      <param name="updatePlugin">When true, bypasses checks that prevent duplicate installations.</param>
      <returns>A Result containing the result of the operation and the created Plugin instance.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.UninstallPluginAsync(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Asynchronously uninstalls the supplied plugin by deleting the directory using the default IPlatform, then removes it from the default
            PluginManagerConfiguration.
            </summary>
      <param name="plugin">The Plugin to uninstall.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Uninstalls the supplied plugin by deleting the directory using the default IPlatform, then removes it from the default 
            PluginManagerConfiguration.
            </summary>
      <param name="plugin">The Plugin to uninstall.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.UninstallPlugin(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin},Symbiote.Core.Platform.IPlatform)">
      <summary>
            Uninstalls the supplied Plugin by deleting the directory using the supplied IPlatform, then removes it from the supplied
            PluginManagerConfiguration.
            </summary>
      <param name="plugin">The Plugin to uninstall.</param>
      <param name="plugins">The List of type Plugin from which the Plugin is to be removed.</param>
      <param name="platform">The IPlatform instance with which the directory should be deleted.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.ReinstallPluginAsync(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Asynchronously reinstalls the specified Plugin by uninstalling, then installing from the original archive.
            </summary>
      <param name="plugin">The Plugin to reinstall.</param>
      <returns>A Result containing the result of hte operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.ReinstallPlugin(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Reinstalls the specified Plugin by uninstalling, then installing from the original archive.
            </summary>
      <param name="plugin">The Plugin to reinstall.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.UpdatePluginAsync(Symbiote.Core.Plugin.PluginArchive)">
      <summary>
            Asynchronously Updates the Plugin contained within the specified PluginArchive.
            </summary>
      <param name="archive">The PluginArchive to use for the update.</param>
      <returns>A Result containing the result of the operation and the updated Plugin.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.UpdatePlugin(Symbiote.Core.Plugin.PluginArchive)">
      <summary>
            Updates the Plugin contained withing the specified PluginArchive.
            </summary>
      <param name="archive">The PluginArchive to use for the update.</param>
      <returns>A Result containing the result of the operation and the updated Plugin.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String)">
      <summary>
            Searches the Plugins list for a Plugin with an FQN matching the supplied FQN and returns it if found.
            </summary>
      <param name="fqn">The Fully Qualified Name of the Plugin to find.</param>
      <returns>The Plugin matching the supplied FQN, or the default Plugin if not found.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.FindPlugin(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})">
      <summary>
            Searches the specified List of type Plugin for a Plugin with an FQN matching the supplied FQN and returns it if found.
            </summary>
      <param name="fqn">The Fully Qualified Name of the Plugin to find.</param>
      <param name="plugins">The List of type Plugin to search.</param>
      <returns>The Plugin matching the supplied FQN, or the default Plugin if not found.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies">
      <summary>
            Loads the Plugin Assemblies specified in the InstalledPlugins list of the Plugin Manager configuration.
            </summary>
      <returns>A Result containing the result of the operation and a list of the loaded PluginAssembly instances.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssemblies(System.Collections.Generic.List{Symbiote.Core.Plugin.Plugin})">
      <summary>
            Loads the Plugin Assemblies specified in the supplied list of Plugins using the supplied IPlatform instance.
            </summary>
      <param name="plugins">The list of Plugins from which the Plugin Assemblies should be loaded.</param>
      <returns>A Result containing the result of the operation and a list of the loaded PluginAssembly instances.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Loads the Plugin Assembly belonging to the specified Plugin and stores the instance in the PluginAssemblies list.
            </summary>
      <param name="plugin">The Plugin to which the Plugin Assembly to load belongs.</param>
      <returns>A Result containing the result of the operation and the newly created PluginAssembly instance.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.LoadPluginAssembly(Symbiote.Core.Plugin.Plugin,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})">
      <summary>
            Loads the Plugin Assembly belonging to the specified Plugin and stores the instance in the specified list.
            </summary>
      <param name="plugin">The Plugin to which the Plugin Assembly to load belongs.</param>
      <param name="pluginAssemblies">The list of type PluginAssembly to which the new instance should be added.</param>
      <returns>A Result containing the result of the operation and the newly created PluginAssembly instance.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String)">
      <summary>
            Finds and returns the PluginAssembly in the PluginAssemblies list whose FQN matches the specified FQN.
            </summary>
      <param name="fqn">The FQN of the desired PluginAssembly.</param>
      <returns>The PluginAssembly instance whose FQN matches the specified FQN, or the default PluginAssembly if not found.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.FindPluginAssembly(System.String,System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})">
      <summary>
            Finds and returns the PluginAssembly in the specified list of type PluginAssembly whose FQN matches the specified FQN.
            </summary>
      <param name="fqn">The FQN of the desired PluginAssembly.</param>
      <param name="assemblies">The List of type PluginAssembly in which to search.</param>
      <returns>The PluginAssembly instance whose FQN matches the specified FQN, or the default PluginAssembly if not found.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins">
      <summary>
            Iterates over the configured list of Plugin Instances, retreives the matching PluginAssembly from the list of 
            loaded PluginAssemblies and instantiates each instance
            </summary>
      <returns>A Result containing the result of the operation and a Dictionary containing the instantiated Plugins.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.InstantiatePlugins(System.Collections.Generic.List{Symbiote.Core.Plugin.PluginManagerConfigurationPluginInstance},System.Collections.Generic.List{Symbiote.Core.Plugin.PluginAssembly})">
      <summary>
            Iterates over the specified List of type PluginManagerConfigurationPluginInstance, retrieves the matching PluginAssembly
            from the supplied List of type PluginAssembly and instantiates each instance
            </summary>
      <param name="configuredInstances">The List of type PluginManagerConfigurationPluginInstance containing the list of Plugin instances to create.</param>
      <param name="assemblies">The List of type PluginAssembly containing the assemblies to which the supplied instances should be matched</param>
      <returns>A Result containing the result of the operation and a Dictionary containing the instantiated Plugins.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.CreatePluginInstance``1(System.String)">
      <summary>
            Creates and returns an instance of the specified plugin type with the specified name
            </summary>
      <remarks>
            The instanceName is propagated through the plugin instance and any internal reference (such as a ConnectorItem).  This name
            should match references to the plugin, either through fully qualified addressing or configuration.
            
            Note that this is only called via reflection (from InstantiatePlugins) so the references will always be zero. 
            </remarks>
      <param name="instanceName">The desired internal name of the instance</param>
      <returns>
      </returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.FindPluginInstance(System.String,Symbiote.Core.Plugin.PluginType)">
      <summary>
            Given an instance name string, return the matching instance of IPluginInstance.
            </summary>
      <param name="instanceName">The name of the instance to find.</param>
      <param name="pluginType">The Type of instance to find.</param>
      <returns>The instance of IPluginInstance matching the requested InstanceName.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.FindPluginItem(System.String)">
      <summary>
            Attempts to resolve the supplied plugin item Fully Qualified Name to an instance of Item contained in a Connector plugin.
            </summary>
      <param name="fqn">The Fully Qualified Name of the instance to find.</param>
      <returns>The found Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.GetConfigurationDefinition">
      <summary>
            Returns the ConfigurationDefinition for the Type.
            </summary>
      <returns>The ConfigurationDefinition for the Type.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.GetDefaultConfiguration">
      <summary>
            Returns the default instance of the configuration Model for the Type.
            </summary>
      <returns>The default instance of the configuration Model for the Type.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssemblyName(System.Reflection.AssemblyName)">
      <summary>
            Evaluates the supplied assembly name for correctness and returns an error message if it is incorrect.
            </summary>
      <remarks>
            The expected format of an assembly name is:  "Symbiote.Plugin.[Connector|Service].{PluginName}"
            The third tuple may match any enumerated value in PluginType.
            </remarks>
      <param name="assemblyName">The AssemblyName to be validated.</param>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.ValidatePluginAssembly(System.Reflection.Assembly)">
      <summary>
            Determines whether the supplied assembly is a valid plugin, and if so, returns the plugin type.
            </summary>
      <param name="assembly">The assembly to validate.</param>
      <returns>A Result containing the result of the operation and, if successful, the plugin type.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.GetPluginType(System.String)">
      <summary>
            Returns an enumeration instance representing the type of the plugin, derived from the third tuple of the plugin name.
            </summary>
      <param name="name">The fully qualified assembly name from which to parse the plugin type.</param>
      <returns>An instance of PluginType corresponding to the parsed type.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.GetPluginDirectory(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Returns the base directory in which the specified Plugin should be installed, based on the type and name of the 
            specified Plugin.
            </summary>
      <param name="plugin">The Plugin for which the directory is to be returned.</param>
      <returns>The directory in which the specified Plugin should be installed.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.IsPluginLoadable(Symbiote.Core.Plugin.Plugin)">
      <summary>
            Returns true if the supplied Plugin is capable of being loaded, false otherwise.
            </summary>
      <param name="plugin">The Plugin to check.</param>
      <returns>True if the Plugin is capable of being loaded, false otherwise.</returns>
      <seealso cref="F:Symbiote.Core.Plugin.PluginManager.loadablePluginTypes" />
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveConfigurationFileName">
      <summary>
            Retrieves the PluginArchiveConfigurationFileName setting or substitutes "SymbiotePlugin.json" if retrieval fails.
            </summary>
      <returns>The name of the Plugin Archive configuration file.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchivePayloadFileName">
      <summary>
            Retrieves the PluginArchivePayloadFileName setting or substitutes "Plugin.zip" if retrieval fails.
            </summary>
      <returns>The name of the Plugin payload file contained within a Plugin Archive.</returns>
    </member>
    <member name="M:Symbiote.Core.Plugin.PluginManager.GetPluginArchiveExtension">
      <summary>
            Retrieves the PluginArchiveExtension setting or substitutes "*.zip" if retrieval fails.
            </summary>
      <returns>The wildcard mask of the file extension for Plugin Archives.</returns>
    </member>
    <member name="F:Symbiote.Core.ProjectInstaller.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:Symbiote.Core.ProjectInstaller.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Symbiote.Core.ProjectInstaller.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.ServiceManager.Start">
      <summary>
            Starts the Service Manager and all services.
            </summary>
      <remarks>Don't forget that you tried to do this with reflection once and it ended badly.  Just copy/paste.</remarks>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Service.Web.ApiResult`1">
      <summary>
            Encapsulates the result of an API operation. 
            </summary>
      <typeparam name="T">The type of the Result object.</typeparam>
    </member>
    <member name="P:Symbiote.Core.Service.Web.ApiResult`1.Request">
      <summary>
            The HttpRequestMessage that originated the API request.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Service.Web.ApiResult`1.ShortGuid">
      <summary>
            A shortened Guid for the request.  The lifespan of the request is such that a full length Guid is not necessary.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Service.Web.ApiResult`1.Route">
      <summary>
            The route of the original request.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Service.Web.ApiResult`1.RemoteIP">
      <summary>
            The remote IP address of the original request.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Service.Web.ApiResult`1.StatusCode">
      <summary>
            The HttpStatusCode to return to the requestor.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Service.Web.ApiResult`1.Response">
      <summary>
            The HttpResponseMessage to return to the requestor.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.ApiResult`1.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
            Constructs a new APIResult using the supplied request, a new ShortGuid and with a StatusCode of 200/OK.
            </summary>
      <param name="request">
      </param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.ApiResult`1.LogRequest(System.Action{System.String})">
      <summary>
            Logs information about the API request to the supplied logger using the supplied log level.
            </summary>
      <param name="logLevel">The logging level to apply to the message.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.ApiResult`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)">
      <summary>
            Logs information about the result of the API request to the supplied logger using the supplied log levels for success, warning and failure messages.
            </summary>
      <param name="successLogLevel">The logging level to apply to success messages.</param>
      <param name="warningLogLevel">The logging level to apply to warning messages.</param>
      <param name="failureLogLevel">The logging level to apply to failure messages.</param>
      <param name="caller">The name of the method that called this method.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.ApiResult`1.CreateResponse(System.Net.Http.Formatting.JsonMediaTypeFormatter)">
      <summary>
            Generates an HttpResponseMessage using the StatusCode, Result object and the supplied JsonMediaTypeFormatter.
            </summary>
      <param name="jsonFormatter">The JsonMediaTypeFormatter instance to use to serialize the response.</param>
      <returns>The generated HttpResponseMessage.</returns>
    </member>
    <member name="T:Symbiote.Core.Service.Web.API.PluginController">
      <summary>
            Handles the API methods for AppArchives.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.API.PluginController.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.API.PluginController.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.API.PluginController.pluginArchiveSerializationProperties">
      <summary>
            The default serialization properties for an AppArchive.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.API.PluginController.ListPluginArchives">
      <summary>
            Returns the list of available AppArchives.
            </summary>
      <returns>The list of available AppArchives.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.API.PluginController.ReloadPluginArchives">
      <summary>
            Reloads the list of PluginArchives from disk and returns the list.
            </summary>
      <returns>The reloaded list of available PluginArchives.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.API.PluginController.GetPluginArchive(System.String)">
      <summary>
            Returns the PluginArchive from the list of available PluginArchives that matches the supplied filename.
            </summary>
      <param name="fileName">The Fully Qualified Name of the PluginArchive to return.</param>
      <returns>The matching PluginArchive.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.API.PluginController.InstallPlugin(System.String)">
      <summary>
            Installs the supplied PluginArchive.
            </summary>
      <param name="fileName">The filename of the Plugin Archive to install.</param>
      <returns>The App instance resulting from the installation.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.API.PluginController.UninstallPlugin(System.String)">
      <summary>
            Uninstalls the supplied Plugin.
            </summary>
      <param name="fqn">The Fully Qualified Name of the Plugin to uninstall.</param>
      <returns>An ApiResult containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.API.PluginController.JsonFormatter(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <summary>
            Returns the JsonMediaTypeFormatter to use with this controller.
            </summary>
      <param name="serializationProperties">A list of properties to exclude or include, depending on the ContractResolverType, in the serialized result.</param>
      <param name="contractResolverType">A ContractResolverType representing the desired behavior of serializationProperties, OptIn or OptOut.</param>
      <param name="includeSecondaryTypes">True if secondary types, such as those loaded from Plugins, should be included in the serialization.</param>
      <returns>A configured instance of JsonMediaTypeFormatter</returns>
    </member>
    <member name="F:Symbiote.Core.Service.Web.API.ReadController.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.API.ReadController.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Service.Web.SignalR.HubHelper">
      <summary>
            The HubHelper acts as a static subscription and event manager for SignalR hubs.
            </summary>
      <remarks>SignalR hubs are unable to persist data across instances because a new instance is created for each invocation.</remarks>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.HubHelper.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.HubHelper.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Hub">
      <summary>
            The hub being managed by the HubManager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscriptions">
      <summary>
            A dictionary containing all of the subscribed objects along with a list of clients subscribed to each object.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.#ctor(Symbiote.Core.ProgramManager,Symbiote.Core.Service.Web.SignalR.IHub)">
      <summary>
            The default constructor.  Creates a new instance of HubManager to manage the supplied hub with the supplied ProgramManager.
            </summary>
      <param name="manager">The ProgramManager for the application.</param>
      <param name="hub">The hub to be managed by the HubManager.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String)">
      <summary>
            Adds the supplied client to the default dictionary entry for the supplied key
            </summary>
      <param name="key">The object to which the client is subscribing.</param>
      <param name="client">The client subscribing to the object.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Subscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <summary>
            Adds the supplied client to the supplied dictionary entry for the supplied key
            </summary>
      <param name="key">The object to which the client is subscribing.</param>
      <param name="client">The client subscribing to the object.</param>
      <param name="dictionary">The dictionary to which to add the entry.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String)">
      <summary>
            Removes the supplied client from the default dictionary entry for the supplied key.
            </summary>
      <param name="key">The object to which the client is unsubscribing.</param>
      <param name="client">The client unsubscribing from the object.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.Unsubscribe(System.Object,System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <summary>
            Removes the supplied client from the supplied dictionary entry for the supplied key.
            </summary>
      <param name="key">The object from which the client is unsubscribing.</param>
      <param name="client">The client unsubscribing from the object.</param>
      <param name="dictionary">The dictionary from which to remove the entry.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object)">
      <summary>
            Returns the list of clients subscribed to the supplied object in the default dictionary.
            </summary>
      <param name="key">The object from which the list of clients should be retrieved.</param>
      <returns>A list containing the clients subscribed to the supplied object.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetSubscriptions(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <summary>
            Returns the list of clients subscribed to the supplied object in the supplied dictionary.
            </summary>
      <param name="key">The object from which the list of clients should be retrieved.</param>
      <param name="dictionary">The dictionary from which to retrieve the list of clients.</param>
      <returns>A list containing the clients subscribed to the supplied object.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String)">
      <summary>
            Returns a list of subscribed items for the supplied client using the default dictionary.
            </summary>
      <param name="client">The client for which to return the list of subscriptions.</param>
      <returns>A list containing all of the items to which the client is subscribed.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.GetClientSubscriptions(System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
      <summary>
            Returns a list of subscribed items for the supplied client using the supplied dictionary.
            </summary>
      <param name="client">The client for which to return the list of subscriptions.</param>
      <param name="dictionary">The dictionary from which to retrieve the list of subscriptions.</param>
      <returns>A list containing all of the items to which the client is subscribed.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.HubHelper.OnChange(System.Object,System.EventArgs)">
      <summary>
            An event proxy for the change event for items monitored by the hub.
            </summary>
      <remarks>This is necessary so that the event handler for an item can be removed when the client unsubscribes or disconnects.  
            An event handler within the hub itself is unable to be unregistered due to the way the hub is instantiated by SignalR.</remarks>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="T:Symbiote.Core.Service.Web.SignalR.LogHub">
      <summary>
            The LogHub provides realtime read access to logs.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.LogHub.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.LogHub.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.LogHub.hubManager">
      <summary>
            The HubManager managing this hub.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.#ctor">
      <summary>
            Constructs a new instance of the hub with the supplied ProgramManager.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnConnected">
      <summary>
            Event called when a new client connects to the hub.
            </summary>
      <returns>A Task used for asynchronous calls.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnDisconnected(System.Boolean)">
      <summary>
            Called when a client disconnects from the hub.
            </summary>
      <param name="stopCalled">True if the connection was intentionally stopped with Stop(), false otherwise.</param>
      <returns>A Task used for asynchronous calls.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.OnReconnected">
      <summary>
            Called when a client reconnects to the hub after having previously disconnected.
            </summary>
      <returns>A Task used for asynchronous calls.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.Read(System.Object,System.EventArgs)">
      <summary>
            Called from the HubManager event proxy; called when a new message is added to the Logger.
            </summary>
      <param name="sender">The object that raised the original Changed event.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.Write(System.Object[])">
      <summary>
            Invoked by clients to update the value of an Item.
            </summary>
      <remarks>Invokes the writeSuccess() and writeError() methods on the calling client depending on the outcome of the call.</remarks>
      <param name="args">An object array containing the Fully Qualified Name of the Item to update in the first index and an object containing the new value in the second.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.WriteToSource(System.Object[])">
      <summary>
            Invoked by clients to update the value of the SourceItem(s) for an Item.  Recursively writes the value all the way down to the origin.
            </summary>
      <remarks>Invokes the writeSuccess() and writeError() methods on the calling client depending on the outcome of the call.</remarks>
      <param name="args">An object array containing the Fully Qualified Name of the Item to update in the first index and an object containing the new value in the second.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.Subscribe(System.Object)">
      <summary>
            Subscribes the calling client to the logger.
            </summary>
      <remarks>
            Registers an event handler to the Changed event for the item, adds the client to the SignalR group for the item's FQN,
            Subscribes the client to the item within the HubManager and calls the subscribeSuccess() method on the calling client.
            </remarks>
      <param name="arg">The Fully Qualified name of the Item to which to subscribe.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.LogHub.Unsubscribe(System.Object)">
      <summary>
            Unsubscribes the calling client from the logger.
            </summary>
      <remarks>
            Unregisters the event handler for the item, removes the client to the SignalR group for the item's FQN,
            unsubscribes the client from the item within the HubManager and calls the unsubscribeSuccess() method on the calling client.
            </remarks>
    </member>
    <member name="T:Symbiote.Core.Service.Web.SignalR.ItemHub">
      <summary>
            The ItemHub provides realtime data access to Model Items.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.ItemHub.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.ItemHub.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Service.Web.SignalR.ItemHub.hubManager">
      <summary>
            The HubManager managing this hub.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.#ctor">
      <summary>
            Constructs a new instance of the hub with the supplied ProgramManager.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnConnected">
      <summary>
            Event called when a new client connects to the hub.
            </summary>
      <returns>A Task used for asynchronous calls.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnDisconnected(System.Boolean)">
      <summary>
            Called when a client disconnects from the hub.
            </summary>
      <param name="stopCalled">True if the connection was intentionally stopped with Stop(), false otherwise.</param>
      <returns>A Task used for asynchronous calls.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.OnReconnected">
      <summary>
            Called when a client reconnects to the hub after having previously disconnected.
            </summary>
      <returns>A Task used for asynchronous calls.</returns>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Read(System.Object,System.EventArgs)">
      <summary>
            Called from the HubManager event proxy; called when a subscribed Item's value changes.
            </summary>
      <param name="sender">The Item that raised the original Changed event.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Write(System.Object[])">
      <summary>
            Invoked by clients to update the value of an Item.
            </summary>
      <remarks>Invokes the writeSuccess() and writeError() methods on the calling client depending on the outcome of the call.</remarks>
      <param name="args">An object array containing the Fully Qualified Name of the Item to update in the first index and an object containing the new value in the second.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.WriteToSource(System.Object[])">
      <summary>
            Invoked by clients to update the value of the SourceItem(s) for an Item.  Recursively writes the value all the way down to the origin.
            </summary>
      <remarks>Invokes the writeSuccess() and writeError() methods on the calling client depending on the outcome of the call.</remarks>
      <param name="args">An object array containing the Fully Qualified Name of the Item to update in the first index and an object containing the new value in the second.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Subscribe(System.Object)">
      <summary>
            Subscribes the calling client to the item matching the provided FQN.
            </summary>
      <remarks>
            Registers an event handler to the Changed event for the item, adds the client to the SignalR group for the item's FQN,
            Subscribes the client to the item within the HubManager and calls the subscribeSuccess() method on the calling client.
            </remarks>
      <param name="arg">The Fully Qualified name of the Item to which to subscribe.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.ItemHub.Unsubscribe(System.Object)">
      <summary>
            Unsubscribes the calling client from the item matching the provided FQN.
            </summary>
      <remarks>
            Unregisters the event handler for the item, removes the client to the SignalR group for the item's FQN,
            unsubscribes the client from the item within the HubManager and calls the unsubscribeSuccess() method on the calling client.
            </remarks>
      <param name="arg">the Fully Qualified Name of the item to which the client is to be unsubscribed.</param>
    </member>
    <member name="T:Symbiote.Core.Service.Web.SignalR.IHub">
      <summary>
            The IHub interface defines characteristics of a Hub.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.IHub.Read(System.Object,System.EventArgs)">
      <summary>
            Called from the HubManager event proxy; called when a subscribed Item's value changes.
            </summary>
      <param name="sender">The Item that raised the original Changed event.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.IHub.Write(System.Object[])">
      <summary>
            Invoked by clients to update the value of an Item.
            </summary>
      <param name="args">An object array containing the Fully Qualified Name of the Item to update in the first index and an object containing the new value in the second.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.IHub.WriteToSource(System.Object[])">
      <summary>
            Invoked by clients to update the value of the SourceItem(s) for an Item.  Recursively writes the value all the way down to the origin.
            </summary>
      <param name="args">An object array containing the Fully Qualified Name of the Item to update in the first index and an object containing the new value in the second.</param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.IHub.Subscribe(System.Object)">
      <summary>
            Subscribes the calling client to the item matching the provided FQN.
            </summary>
      <param name="obj">
      </param>
    </member>
    <member name="M:Symbiote.Core.Service.Web.SignalR.IHub.Unsubscribe(System.Object)">
      <summary>
            Unsubscribes the calling client from the item matching the provided FQN.
            </summary>
      <param name="obj">the Fully Qualified Name of the item to which the client is to be unsubscribed.</param>
    </member>
    <member name="F:Symbiote.Core.Service.Web.WebService.configuration">
      <summary>
            The configuration for this Service.
            </summary>
      <remarks>Decorated as [ThreadStatic] so that it is accessible to the Owin startup class.</remarks>
    </member>
    <member name="P:Symbiote.Core.Service.Web.WebService.GetConfiguration">
      <summary>
            Provies configuration accessibility to the Owin startup class.
            </summary>
    </member>
    <member name="T:Symbiote.Core.RealtimeLogger">
      <summary>
            The RealtimeLogger class acts as a target for the NLog method logging target.  
            Fires the LogArrived event when new log messages are created by NLog.
            </summary>
    </member>
    <member name="F:Symbiote.Core.RealtimeLogger.logHistoryLimit">
      <summary>
            The default log history limit.
            </summary>
    </member>
    <member name="F:Symbiote.Core.RealtimeLogger.initialized">
      <summary>
            Initialization status of the class.
            </summary>
    </member>
    <member name="P:Symbiote.Core.RealtimeLogger.LogHistory">
      <summary>
            A queue containing the newest log messages, up to the LogHistoryLimit.
            </summary>
    </member>
    <member name="P:Symbiote.Core.RealtimeLogger.LogHistoryLimit">
      <summary>
            The maximum number of log messages to store in the log history queue.
            </summary>
      <remarks>
            If the value is reduced while the log is populated, the length of the LogHistory queue
            will be reduced to the desired value upon the addition of the next log.
            </remarks>
    </member>
    <member name="M:Symbiote.Core.RealtimeLogger.#ctor">
      <summary>
            The default constructor.
            </summary>
      <remarks>
            Included for good measure.  Not invoked when member methods are invoked using reflection,
            such as through NLog's MethodCall target.
            </remarks>
    </member>
    <member name="E:Symbiote.Core.RealtimeLogger.LogArrived">
      <summary>
            The Changed event is fired when new log messages are created by NLog.
            </summary>
    </member>
    <member name="T:Symbiote.Core.RealtimeLogger.EventHandler`1">
      <summary>
            This delegate is called when the Changed event fires.
            </summary>
      <typeparam name="RealtimeLoggerEventArgs">The EventArgs type associated with the event.</typeparam>
      <param name="sender">The sender of the event.  Null/default in this case.</param>
      <param name="e">The EventArgs instance associated with the event.</param>
    </member>
    <member name="M:Symbiote.Core.RealtimeLogger.Initialize">
      <summary>
            Initialize properties. 
            </summary>
      <remarks>
            Used in place of a constructor, which is not invoked when member methods are invoked using reflection, 
            such as through NLog's MethodCall target.
            </remarks>
    </member>
    <member name="M:Symbiote.Core.RealtimeLogger.AppendLogHistory(Symbiote.Core.RealtimeLoggerEventArgs)">
      <summary>
            Enqueues the supplied RealtimeLoggerEventArgs instance to the LogHistory queue.  
            If the queue exceeds 200 entries, the oldest log is first dequeued before the new log is enqueued.
            </summary>
      <param name="eventArgs">The RealtimeLoggerEventArgs instance to enqueue.</param>
    </member>
    <member name="M:Symbiote.Core.RealtimeLogger.PruneLogHistory">
      <summary>
            Repeatedly Dequeues logs from the LogHistory queue until the queue length matches LogHistoryLimit.
            </summary>
    </member>
    <member name="M:Symbiote.Core.RealtimeLogger.AppendLog(System.String,System.String,System.String,System.String)">
      <summary>
            Called by the NLog method logging target, this method fires the Changed event with the timestamp, level, logger and message
            associated with the new log message.
            </summary>
      <param name="dateTime">The timestamp of the log message in long date format.</param>
      <param name="level">The level of the log message.</param>
      <param name="logger">The logger instance that generated the message.</param>
      <param name="message">The log message.</param>
    </member>
    <member name="T:Symbiote.Core.RealtimeLoggerEventArgs">
      <summary>
            Contains the EventArgs associated with the RealtimeLogger Changed event.
            </summary>
    </member>
    <member name="P:Symbiote.Core.RealtimeLoggerEventArgs.DateTime">
      <summary>
            The timestamp of the log message.
            </summary>
    </member>
    <member name="P:Symbiote.Core.RealtimeLoggerEventArgs.Level">
      <summary>
            The logging level of the log message.
            </summary>
    </member>
    <member name="P:Symbiote.Core.RealtimeLoggerEventArgs.Logger">
      <summary>
            The name of the logger that generated the log message.
            </summary>
    </member>
    <member name="P:Symbiote.Core.RealtimeLoggerEventArgs.Message">
      <summary>
            The log message.
            </summary>
    </member>
    <member name="M:Symbiote.Core.RealtimeLoggerEventArgs.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            The default constructor.  Creates a new instance of RealtimeLoggerEventArgs with the supplied parameters.
            </summary>
      <param name="dateTime">The timestamp of the log message in long date format.</param>
      <param name="level">The level of the log message.</param>
      <param name="logger">The logger instance that generated the message.</param>
      <param name="message">The log message.</param>
    </member>
    <member name="T:Symbiote.Core.Configuration.IConfigurable`1">
      <summary>
            Defines the interface for Configurable objects.  When implemented, the implementing class gains the ability to store named instances of type T
            in the application configuration file.  The type T is defined by the implementing class.
            </summary>
      <remarks>
        <para>
                Any class wishing to store configuration information must to implement this interface and must also provide two
                static methods; GetConfigurationDefinition() and GetDefaultConfiguration().  
            </para>
        <para>
                These static methods are implemented to allow the <see cref="T:Symbiote.Core.Configuration.ConfigurationManager" /> to configure new instances of a class 
                (for instance, a Plugin) without requiring an instance to be created first. Without this functionality the 
                ConfigurationManager (or API, or whatever is trying to configure a new instance) would need to create a temporary "dummy" 
                instance of the object, fetch the ConfigurationDefinition and default Configuration from that instance, then discard it.
                The static methods provide a cleaner method for doing this.
            </para>
      </remarks>
      <typeparam name="T">The Configuration type</typeparam>
    </member>
    <member name="P:Symbiote.Core.Configuration.IConfigurable`1.ConfigurationDefinition">
      <summary>
            The ConfigurationDefinition for the class.  
            </summary>
    </member>
    <member name="P:Symbiote.Core.Configuration.IConfigurable`1.Configuration">
      <summary>
            The instance of T representing the Configuration for the implementation instance.
            </summary>
      <remarks>
            It is suggested that the implementing class also implements a special Type to model the configuration, however
            any type will work here.
            </remarks>
    </member>
    <member name="M:Symbiote.Core.Configuration.IConfigurable`1.Configure">
      <summary>
            Fetches the configuration for the current instance of the implementation from the Configuration Manager
            and configures the instance with the returned Configuration T.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.IConfigurable`1.Configure(`0)">
      <summary>
            Configures the current instance of the implementation with the supplied Configuration T.
            </summary>
      <param name="configuration">The instance of T containing the Configuration to be used to configure the instance.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.IConfigurable`1.SaveConfiguration">
      <summary>
            Stores the Configuration for the current instance of the implementation to the Configuration Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.Configuration.ConfigurationDefinition">
      <summary>
             Establishes a common object to represent the configuration details for various application items.  
             The configuration is comprised of two strings, a form and a schema, and a Type representing the model.  The strings are intended to contain json data;
             the form containing a json representation of an HTML form, and the schema containing a logical schema to be used as the basis of the form.
            
             When the configuration is edited (or a new instance created), the form and schema are used to generate an HTML form client side.  Angular Schemaform (schemaform.io)
             is used client-side (alternatives can be used, but this is the primary vector) to generate the form.  Schemaform creates a model using the form and schema and the client
             returns the model to the application.
             
             The returned model is deserialized to the Type specified in the Model property and an instance is returned to the owner object.
             
             When the owner starts or loads the configuration, the ConfigurationManager retrieves the relevant json from the configuration file and deserializes it to an instance of type Model
             and returns it.  The owner then manipulates the instance and when finished saves it back to the configuration manager, which in turn saves it to the configuration file as serialized
             json.
             </summary>
      <remarks>
             The ability to store the default configuration within this object was explored and due to the need to be able to statically call GetConfigurationDefinition,
             returning a generic instance of this class (ConfigurationDefinition(T)) would be too sloppy, requiring a ton more reflection than is already being used.
             Based on previous attempts to do neat tricks with reflection the goal is to minimize the usage wherever possible.
             </remarks>
    </member>
    <member name="P:Symbiote.Core.Configuration.ConfigurationDefinition.Form">
      <summary>
            A string containing a json representation of an HTML configuration form.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Configuration.ConfigurationDefinition.Schema">
      <summary>
            A string containing a json representation of the schema to populate using the form.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Configuration.ConfigurationDefinition.Model">
      <summary>
            An object representing the model to be built from the schema.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor">
      <summary>
            The default constructor.  Creates a blank ConfigurationDefinition.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationDefinition.#ctor(System.String,System.String,System.Type)">
      <summary>
            Creates a new ConfigurationDefinition with the supplied form and schema strings.
            </summary>
      <param name="form">A string containing the json representation of an HTML form.</param>
      <param name="schema">A string containing a json representation of the schema to populate using the form.</param>
      <param name="model">A type representing the model to be built from the schema.</param>
    </member>
    <member name="N:Symbiote.Core.Configuration">
      <summary>
            The Configuration namespace encapsulates the Configuration Manager and the classes and interfaces used by various application
            components to allow the configuration of application level objects.
            
            The Configuration file is generated from the json serialization of the Configuration model.  The Configuration model consists of
            a single instance of type Dictionary(Type, Dictionary(string, object)).  This instance creates a nested dictionary keyed on type
            first, then by name.  The resulting key value pair contains the Configuration object for the specified Type and named instance.
            
            There are two main types of configuration supported by this scheme; configuration for static objects like the various application
            Managers and Services, and for dynamic objects encompassed by Plugins; namely Endpoints and Connectors.  The key difference is the 
            number of instances of each; static objects will have only one instance while the Plugin objects may have any number.  Static objects 
            do not supply an instance name when using the Configuration Manager, and their configuration is saved within the model with an empty
            string.  Dynamic objects must supply an instance name.
            
            The Configuration file maintained by the Configuration Manager is capable of being rebuilt from scratch.  If missing, the Manager
            automatically adds a default, nameless instance of each registered type to the configuration model and flushes it to disk before
            loading it.  This ensures the application can start normally in the event of a deletion.
            
            The method IsConfigurable uses reflection to examine the given Type to ensure that:
                1. it implements IConfigurable
                2. it contains the static method GetConfigurationDefinition
                3. it contains the static method GetDefaultConfiguration
                
            If all three predicates are true, the Type can be registered with the Configuration Manager and instances of that type can load 
            and save configuration data.
            
            Before any Type can use the Configuration Manager, the method RegisterType() must be called and passed the Type of that class.
            This method checks IsConfigurable and if passing, fetches the ConfigurationDefinition for the Type from the static method
            GetConfigurationDefinition and stores the Type and the ConfigurationDefinition in the RegisteredTypes dictionary.
            
            The GetInstanceConfiguration(T) method is called by configurable instances to retrieve the saved configuration for the calling
            class and instance.  By default, if the configuration is not found the default configuration is retrieved from the calling class
            and returned to the caller.  
            </summary>
    </member>
    <member name="T:Symbiote.Core.Configuration.ConfigurationManager">
      <summary>
            The Configuration Manager class manages the configuration file for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Configuration.ConfigurationManager.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Configuration.ConfigurationManager.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Configuration.ConfigurationManager.instance">
      <summary>
            The Singleton instance of ConfigurationManager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Configuration.ConfigurationManager.State">
      <summary>
            The state of the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Configuration.ConfigurationManager.Configuration">
      <summary>
            The current configuration.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Configuration.ConfigurationManager.ConfigurationFileName">
      <summary>
            The filename of the configuration file.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Configuration.ConfigurationManager.RegisteredTypes">
      <summary>
            A dictionary containing all registered configuratble types and their ConfigurationDefinitions.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.#ctor(Symbiote.Core.ProgramManager)">
      <summary>
            Private constructor, only called by Instance()
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.Instance(Symbiote.Core.ProgramManager)">
      <summary>
            Instantiates and/or returns the ConfigurationManager instance.
            </summary>
      <param name="manager">The ProgramManager instance for the application.</param>
      <returns>The Singleton instance of the ConfigurationManager.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.Start">
      <summary>
            Starts the Configuration Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.Restart">
      <summary>
            Restarts the Configuration manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.Stop">
      <summary>
            Stops the Configuration manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration">
      <summary>
            Loads the configuration from the file specified in the ConfigurationFileName property.
            </summary>
      <returns>A Result containing the result of the operation and the instance of Configuration containing the loaded configuration.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.LoadConfiguration(System.String)">
      <summary>
            Reads the given file and attempts to deserialize it to an instance of Configuration.
            </summary>
      <param name="fileName">The file to read and deserialize.</param>
      <returns>A Result containing the result of the operation and the Configuration instance created from the file.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration">
      <summary>
            Saves the current configuration to the file specified in app.exe.config.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})">
      <summary>
            Saves the provided configuration to the file specified in app.exe.config.
            </summary>
      <param name="configuration">The Configuration instance to save.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.SaveConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <summary>
            Saves the given configuration to the specified file.
            </summary>
      <param name="configuration">The Configuration object to serialize and write to disk.</param>
      <param name="fileName">The file in which to save the configuration.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration">
      <summary>
            Validates the current configuration.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.ValidateConfiguration(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}})">
      <summary>
            Examines the supplied Configuration for errors and returns the result.  If returning a Warning or Invalid result code,
            includes the validation message in the Message member of the return type.
            </summary>
      <param name="configuration">The Configuration to validate.</param>
      <returns>A Result containing the result of the validation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.BuildNewConfiguration">
      <summary>
            Manually builds an instance of Configuration with default values.
            </summary>
      <returns>A Result containing the default instance of a Configuration.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigurable(System.Type)">
      <summary>
            Evaluates the provided type regarding whether it can be configured and returns the result.
            To be configurable, the type must implement IConfigurable and must have static methods GetConfigurationDefinition and 
            GetDefaultConfiguration.
            </summary>
      <param name="type">The Type to evaluate.</param>
      <returns>A Result</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.IsRegistered(System.Type)">
      <summary>
            Checks to see if the supplied Type is in the RegisteredTypes dictionary.
            </summary>
      <param name="type">The Type to check.</param>
      <returns>A Result containing the result of the operation and a boolean indicating whether the specified Type was found in the dictionary.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,System.Boolean)">
      <summary>
            Registers the supplied Type with the Configuration Manager.
            </summary>
      <remarks>When called during application startup, throwExceptionOnFailure should be set to true.</remarks>
      <param name="type">The Type to register.</param>
      <param name="throwExceptionOnFailure">If true, throws an exception on failure.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.RegisterType(System.Type,Symbiote.Core.Configuration.ConfigurationDefinition,System.Collections.Generic.Dictionary{System.Type,Symbiote.Core.Configuration.ConfigurationDefinition})">
      <summary>
            Registers the supplied Type with the Configuration Manager using the supplied ConfigurationDefiniton.
            </summary>
      <param name="type">The Type to register.</param>
      <param name="definition">The ConfigurationDefintion with which to register the Type.</param>
      <param name="registeredTypes">The Dictionary of registered types.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.String)">
      <summary>
            Determines whether the specified instance of the specified type is configured.
            </summary>
      <param name="type">The Type of the instance to check.</param>
      <param name="instanceName">The name of the instance to check.</param>
      <returns>A Result containing the result of the operation and a boolean containing the outcome of the lookup.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.IsConfigured(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <summary>
            Determines whether the specified instance of the specified type is configured.
            </summary>
      <param name="type">The Type of the instance to check.</param>
      <param name="configuration">The ApplicationConfiguration to examine.</param>
      <param name="instanceName">The name of the instance to check.</param>
      <returns>A Result containing the result of the operation and a boolean containing the outcome of the lookup.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.String)">
      <summary>
            Adds the specified configuration to the specified instance of the specified type.
            </summary>
      <param name="type">The Type of the instance to be configured.</param>
      <param name="instanceConfiguration">The Configuration instance of the configuration model of the calling class.</param>
      <param name="instanceName">The name of the instance to configure.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.AddInstanceConfiguration``1(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <summary>
            Adds the specified configuration to the specified instance of the specified type.
            </summary>
      <param name="type">The Type of the instance to be configured.</param>
      <param name="configuration">The Configuration instance of the configuration model of the calling class.</param>
      <param name="instanceConfiguration">The ApplicationConfiguration instance to which to add the new configuration.</param>
      <param name="instanceName">The name of the instance to configure.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.String)">
      <summary>
            Retrieves the configuration for the instance matching instanceName of the supplied Type.
            If the configuration can't be found, returns the default configuration for the Type.
            </summary>
      <typeparam name="T">The Type matching the Configuration model for the calling class.</typeparam>
      <param name="type">The Type of the calling class.</param>
      <param name="instanceName">The name of the instance for which to retrieve the configuration.</param>
      <returns>A Result containing the result of the operation and an instance of the Configuration model 
            for the calling class containing the retrieved configuration.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.GetInstanceConfiguration``1(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <summary>
            Retrieves the configuration for the instance matching instanceName of the supplied Type.
            If the configuration can't be found, returns the default configuration for the Type.
            </summary>
      <typeparam name="T">The Type matching the Configuration model for the calling class.</typeparam>
      <param name="type">The Type of the calling class.</param>
      <param name="configuration">The ApplicationConfiguration from which to retrieve the configuration.</param>
      <param name="instanceName">The name of the instance for which to retrieve the configuration.</param>
      <returns>A Result containing the result of the operation and an instance of the Configuration model 
            for the calling class containing the retrieved configuration.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.String)">
      <summary>
            Saves the specified Configuration model to the Configuration for the specified instance and Type.
            </summary>
      <param name="type">The Type of the calling class.</param>
      <param name="instanceConfiguration">The Configuration model to save.</param>
      <param name="instanceName">The instance of the calling class for which to save the configuration.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.UpdateInstanceConfiguration(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <summary>
            Saves the specified Configuration model to the Configuration for the specified instance and Type.
            </summary>
      <param name="type">The Type of the calling class.</param>
      <param name="instanceConfiguration">The Configuration model to save.</param>
      <param name="configuration">The ApplicationConfiguration to update.</param>
      <param name="instanceName">The instance of the calling class for which to save the configuration.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.String)">
      <summary>
            Removes the specified instance of the specified type from the configuration.
            </summary>
      <param name="type">The Type of instance to remove.</param>
      <param name="instanceName">The name of the instance to remove from the Type.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.RemoveInstanceConfiguration(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <summary>
            Removes the specified instance of the specified type from the configuration.
            </summary>
      <param name="type">The Type of instance to remove.</param>
      <param name="configuration">The ApplicationConfiguration from which to remove the configuration.</param>
      <param name="instanceName">The name of the instance to remove from the Type.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileName">
      <summary>
            Returns the fully qualified path to the configuration file incluidng file name and extension.
            </summary>
      <returns>The fully qualified path, filename and extension of the configuration file.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.GetConfigurationFileDrive">
      <summary>
            Returns the drive on which the configuration file resides
            </summary>
      <returns>A string representing the drive containing the configuration file</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.SetConfigurationFileName(System.String)">
      <summary>
            Sets or updates the configuration file location setting in app.config
            </summary>
      <param name="fileName">The fully qualified path to the configuration file.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Configuration.ConfigurationManager.MoveConfigurationFile(System.String)">
      <summary>
            Moves the configuration file to a new location and updates the setting in app.config.
            </summary>
      <param name="newFileName">The fully qualified path to the new file.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="T:Symbiote.Core.FQNResolver">
      <summary>
            Given an FQN, the AddressResolver locates and returns the corresponding Item.
            Examines the first tuple of the provided FQN and if it matches the configured product name (e.g. Symbiote),
            performs a lookup of the item using the ModelManager.  If the first tuple is something other than the product name,
            performs a lookup of the item using the PluginManager.
            </summary>
    </member>
    <member name="T:Symbiote.Core.FQNResolver.ItemSource">
      <summary>
            Indicates the source of the Item.
            </summary>
    </member>
    <member name="F:Symbiote.Core.FQNResolver.ItemSource.Unknown">
      <summary>
            The default source.
            </summary>
    </member>
    <member name="F:Symbiote.Core.FQNResolver.ItemSource.Plugin">
      <summary>
            The Item originated from a Connector Plugin.
            </summary>
    </member>
    <member name="F:Symbiote.Core.FQNResolver.ItemSource.Model">
      <summary>
            The Item originated from the application Model.
            </summary>
    </member>
    <member name="F:Symbiote.Core.FQNResolver.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="M:Symbiote.Core.FQNResolver.Resolve(System.String)">
      <summary>
            Locates the Item corresponding to the supplied FQN and returns it.
            </summary>
      <param name="lookupFQN">The Fully Qualified Name of the Item to locate.</param>
      <returns>The located item.</returns>
    </member>
    <member name="M:Symbiote.Core.FQNResolver.GetSource(System.String)">
      <summary>
            Determines the source of the Item by examining the first tuple of the FQN.
            </summary>
      <param name="lookupFQN">The Fully Qualified Name of the Item for which the source is to be determined.</param>
      <returns>The enumeration representing the source of the Item.</returns>
    </member>
    <member name="T:Symbiote.Core.ContractResolver">
      <summary>
            The ContractResolver acts as a generic Data Contract Resolver, allowing for a list of ignored properties to be passed in on construction.
            </summary>
    </member>
    <member name="T:Symbiote.Core.ContractResolver.ContractResolverType">
      <summary>
            Specifies how the array of properties passed to the constructor of the ContractResolver is to be used.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.ContractResolverType.Undefined">
      <summary>
            The default type
            </summary>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.ContractResolverType.OptIn">
      <summary>
            Resolves the data contract using only the properties in accompanying list of properties
            </summary>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.ContractResolverType.OptOut">
      <summary>
            Resolves the data contract using all properties not included in the accompanying list of properties
            </summary>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.logger">
      <summary>
            The Logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.propertyList">
      <summary>
            The list of properties to either include or exclude, depending on contractResolverType.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.contractResolverType">
      <summary>
            Enumeration representing the type of contract resolver to use; OptIn or OptOut.
            </summary>
      <remarks>
            The OptIn type includes only the properties listed in propertyList while OptOut includes all properties except those listed.
            </remarks>
    </member>
    <member name="F:Symbiote.Core.ContractResolver.includeSecondaryTypes">
      <summary>
            True if the secondary types defined in the Plugin.Connector namespace should be serialized with the result.
            </summary>
    </member>
    <member name="M:Symbiote.Core.ContractResolver.#ctor">
      <summary>
            Creates an instance of ContractResolver with an empty property list, resolver type of OptOut and with includeSecondaryTypes = false.  Serializes all unignored properties in the given class.
            </summary>
    </member>
    <member name="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},System.Boolean)">
      <summary>
            Creates an instance of ContractResolver with the supplied properties list and the supplied value for includeSecondaryTypes.
            </summary>
      <param name="propertyList">A list of properties to include or exclude from serialization.</param>
      <param name="includeSecondaryTypes">If true, includes fields from classes defined within the 'Plugin.Connector' namespace in the serialization results.</param>
    </member>
    <member name="M:Symbiote.Core.ContractResolver.#ctor(System.Collections.Generic.List{System.String},Symbiote.Core.ContractResolver.ContractResolverType,System.Boolean)">
      <summary>
            Creates an instance of ContractResolver with the supplied properties list, resolver type and includeSecondaryTypes value.
            </summary>
      <param name="propertyList">A list of properties to include or exclude from serialization.</param>
      <param name="contractResolverType">The type of contract resolver; determines whether the supplied list will be included or excluded from serialization.</param>
      <param name="includeSecondaryTypes">If true, includes fields from classes defined within the 'Plugin.Connector' namespace in the serialization results.</param>
    </member>
    <member name="M:Symbiote.Core.ContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a list of JsonProperties based on the default serialization of the class, removes any properties whose
            name matches any entry in the list of ignoredProperties, and returns the modified list.
            </summary>
      <param name="type">The Type of the serialized class.</param>
      <param name="memberSerialization">Specifies the member serialization options for the JsonSerializer.</param>
      <returns>A filtered list of JsonProperties to serialize.</returns>
    </member>
    <member name="T:Symbiote.Core.Item">
      <summary>
            A semi-generic container impementing the Composite design pattern
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.Parent">
      <summary>
            The Item's parent Item.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.Name">
      <summary>
            The name of the Item; corresponds to the final tuple of the FQN.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.FQN">
      <summary>
            The Fully Qualified Name of the item.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.Path">
      <summary>
            The path to the Item; corresponds to the FQN less the final tuple (the name).
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.SourceFQN">
      <summary>
            The fully qualified name name of the source item.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.SourceItem">
      <summary>
            The Item instance resolved from the SourceFQN.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.Guid">
      <summary>
            A Guid for the Item, generated when it is instantiated.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.Writeable">
      <summary>
            True if this item is writeable, false otherwise.  If false, write methods will throw an error when called.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.Value">
      <summary>
            The value of the composite item.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Item.Children">
      <summary>
            The collection of Items contained within this Item.
            </summary>
    </member>
    <member name="E:Symbiote.Core.Item.Changed">
      <summary>
            The Changed event; fires when the value of the item changes.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Item.EventHandler`1">
      <summary>
            The EventHandler for the Changed event.
            </summary>
      <typeparam name="ItemEventArgs">The Type of EventArgs for the EventHandler.</typeparam>
      <param name="sender">The Item that raised the event.</param>
      <param name="e">The instance of ItemEventArgs belonging to the event.</param>
    </member>
    <member name="M:Symbiote.Core.Item.#ctor">
      <summary>
            An empty constructor used for instantiating the root node of a model.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Item.#ctor(System.String,System.Boolean)">
      <summary>
            Creates an instance of an Item with the given Fully Qualified Name to be used as the root of a model.
            </summary>
      <param name="fqn">The Fully Qualified Name of the Item to create.</param>
      <param name="isRoot">True if the item is to be created as a root model item, false otherwise.</param>
    </member>
    <member name="M:Symbiote.Core.Item.#ctor(System.String,System.String)">
      <summary>
            Creates an instance of an Item with the given Fully Qualified Name and type.
            </summary>
      <param name="fqn">The Fully Qualified Name of the Item to create.</param>
      <param name="sourceFQN">The Fully Qualified Name of the source item.</param>
      <remarks>This constructor is used for deserialization.</remarks>
    </member>
    <member name="M:Symbiote.Core.Item.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Creates an instance of an Item with the given Fully Qualified Name and type.  If isRoot is true, marks the Item as the root item in a model.
            </summary>
      <param name="fqn">The Fully Qualified Name of the Item to create.</param>
      <param name="sourceFQN">The Fully Qualified Name of the source item.</param>
      <param name="isRoot">True if the item is to be created as a root model item, false otherwise.</param>
    </member>
    <member name="M:Symbiote.Core.Item.Clone">
      <summary>
            Creates and returns a clone of the Item.
            </summary>
      <remarks>We aren't using .MemberWiseClone() because of the GuID.  We need a "deep copy".</remarks>
      <returns>A clone of the Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.ToString">
      <summary>
            Returns the string representation of the object.
            </summary>
      <returns>The string representation of the object.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.SetParent(Symbiote.Core.Item)">
      <summary>
            Sets the Item's parent Item to the supplied Item.
            </summary>
      <param name="parent">The Item to set as the Item's parent.</param>
      <returns>A Result containing the result of the operation and the current Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.AddChild(Symbiote.Core.Item)">
      <summary>
            Adds the supplied item to this Item's Children collection.
            </summary>
      <param name="item">The Item to add.</param>
      <returns>A Result containing the result of the operation and the added Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.RemoveChild(Symbiote.Core.Item)">
      <summary>
            Removes the specified child Item from this Item's Children collection.
            </summary>
      <param name="item">The Item to remove.</param>
      <returns>A Result containing the result of the operation and the removed Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.HasChildren">
      <summary>
            Returns true if the Item has children, false otherwise.
            </summary>
      <returns>True if the Item has children, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.Read">
      <summary>
            Returns the value of this Item's Value property.
            </summary>
      <returns>The retrieved value.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.ReadAsync">
      <summary>
            Asynchronously returns the value of this Item's Value property.
            </summary>
      <returns>The retrieved value.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.ReadFromSource">
      <summary>
            Reads this Item's Value from its SourceItem.  If this Item has children,
            ReadFromSource() is also executed on each child.
            </summary>
      <returns>The retrieved value.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.ReadFromSourceAsync">
      <summary>
            Asynchronously reads this Item's Value from its SourceItem.  If this item has children,
            ReadFromSource() is also executed on each child.
            </summary>
      <returns>The retrieved value.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.SubscribeToSource">
      <summary>
            Adds the SourceItemChanged event handler for this Item to the SourceItem's Changed event.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.UnsubscribeFromSource">
      <summary>
            Removes the SourceItemChanged event handler for this Item from the SourceItem's Changed event.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.Write(System.Object)">
      <summary>
            Writes the provided value to this Item's Value property.
            </summary>
      <param name="value">The value to write.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.WriteAsync(System.Object)">
      <summary>
            Asynchronously writes the provided value to this Item's Value property.
            </summary>
      <param name="value">The value to write.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.WriteToSource(System.Object)">
      <summary>
            Writes the provided value to this Item's SourceItem.
            </summary>
      <param name="value">The value to write.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.WriteToSourceAsync(System.Object)">
      <summary>
            Asynchronously writes the provided value to this Item's SourceItem.
            </summary>
      <param name="value">The value to write.</param>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.ToJson">
      <summary>
            Returns the serialization of the Item using the default ContractResolver.
            </summary>
      <returns>The serialization of the Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.ToJson(Newtonsoft.Json.Serialization.DefaultContractResolver)">
      <summary>
            Returns the serialization of the Item using the supplied ContractResolver.
            </summary>
      <param name="contractResolver">The ContractResolver with which the Item is to be serialized.</param>
      <returns>The serialization of the Item.</returns>
    </member>
    <member name="M:Symbiote.Core.Item.OnChange(System.Object)">
      <summary>
            Raises the Changed event with a new instance of ItemEventArgs containing the specified value.
            </summary>
      <param name="value">The value for the raised event.</param>
    </member>
    <member name="M:Symbiote.Core.Item.SourceItemChanged(Symbiote.Core.Item,Symbiote.Core.ItemEventArgs)">
      <summary>
            Event Handler for the Changed event belonging to the SourceItem.
            </summary>
      <param name="sender">The Item that raised the event.</param>
      <param name="e">The EventArgs for the event.</param>
    </member>
    <member name="T:Symbiote.Core.ProgramManager">
      <summary>
            The ProgramManager acts as a Service Locator for the application and contains references to both 
            the Manager for each service as well as references to the key resources contained within each namespace.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ProgramManager.logger">
      <summary>
            The logger for this class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ProgramManager.instance">
      <summary>
            The Singleton instance of ProgramManager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.State">
      <summary>
            The state of the Manager.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.SafeMode">
      <summary>
            Indicates whether the program is in Safe Mode.  Safe Mode is a sort of fault tolerant mode designed
            to allow the application to run under conditions that would otherwise raise fatal errors.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.ProductName">
      <summary>
            The name of the product, retrieved from AssemblyInfo.cs.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.ProductVersion">
      <summary>
            The version of the product, retrieved from AssemblyInfo.cs.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.InstanceName">
      <summary>
            The name of the application instance.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.PlatformManager">
      <summary>
            The PlatformManager for the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.Platform">
      <summary>
            The Platform for the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.Directories">
      <summary>
            The directories used by the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.ConfigurationManager">
      <summary>
            The ConfigurationManager for the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.Configuration">
      <summary>
            The configuration for the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.ConfigurationFileName">
      <summary>
            The filename of the configuration file.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.RegisteredTypes">
      <summary>
            A dictionary containing the types and ConfigurationDefinitions for the configurable types within the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.PluginManager">
      <summary>
            The PluginManager for the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.ModelManager">
      <summary>
            The ModelManager for the application.
            </summary>
    </member>
    <member name="P:Symbiote.Core.ProgramManager.ServiceManager">
      <summary>
            The ServiceManager for the application.
            </summary>
    </member>
    <member name="M:Symbiote.Core.ProgramManager.#ctor(System.Boolean)">
      <summary>
            The default constructor.
            </summary>
      <remarks>
            If you've forgotten, you made this code dynamic so that you coud iterate over IManagers and it was 
            a mess.  Even more verbose than the way it is now, plus debugging it was a nightmare.  Don't try it again.
            </remarks>
    </member>
    <member name="M:Symbiote.Core.ProgramManager.Instance(System.Boolean)">
      <summary>
            Returns the singleton instance of the ProgramManager.  Creates an instance if null.
            </summary>
      <returns>The singleton instance of the ProgramManager</returns>
    </member>
    <member name="M:Symbiote.Core.ProgramManager.Start">
      <summary>
            Starts the Program Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.ProgramManager.Restart">
      <summary>
            Restarts the Program Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.ProgramManager.Stop">
      <summary>
            Stops the Program Manager.
            </summary>
      <returns>A Result containing the result of the operation.</returns>
    </member>
    <member name="M:Symbiote.Core.ProgramManager.StartManager(Symbiote.Core.IManager)">
      <summary>
            Starts the specified IManager instance
            </summary>
      <param name="manager">The IManager instance to start.</param>
      <returns>A Result containing the result of the operation and the specified IManager instance.</returns>
    </member>
    <member name="M:Symbiote.Core.ProgramManager.GetInstanceName">
      <summary>
            Returns the "InstanceName" setting from the app.config file, or the default value if the setting is not retreived.
            </summary>
      <returns>The name of the program instance.</returns>
    </member>
    <member name="N:Symbiote.Core">
      <summary>
            The Core namespace contains all of the code relating to the core functions of the application.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Program">
      <summary>
            The main application class.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Program.logger">
      <summary>
            The main logger for the application.
            </summary>
    </member>
    <member name="F:Symbiote.Core.Program.manager">
      <summary>
            The ProgramManager for the application.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Program.Main(System.String[])">
      <summary>
            Main entry point for the application.
            </summary>
      <remarks>
            Responsible for instantiating the platform, and determining whether to start
            the application as a Windows service or console/interactive application.
            </remarks>
      <param name="args">
            Command line arguments; the first value corresponds to the highest active 
            logging level, e.g. "trace", "debug", "info", "warn", "error" and "fatal".
            </param>
    </member>
    <member name="M:Symbiote.Core.Program.Start(System.String[])">
      <summary>
            Entry point for the application logic.
            </summary>
      <param name="args">Command line arguments, passed from Main().</param>
    </member>
    <member name="M:Symbiote.Core.Program.Stop">
      <summary>
            Exit point for the application logic.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Utility">
      <summary>
            Contains miscellaneous static methods.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Utility.Clone``1(System.Collections.Generic.IList{``0})">
      <summary>
            Returns a clone of the supplied list.
            </summary>
      <typeparam name="T">The list type to clone.</typeparam>
      <param name="listToClone">The list from which the clone should be created.</param>
      <returns>A clone of the supplied list.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.SubArray``1(``0[],System.Int32,System.Int32)">
      <summary>
            Returns a subset of the supplied array.
            </summary>
      <typeparam name="T">The type of the array.</typeparam>
      <param name="data">The array.</param>
      <param name="index">The index at which the subarray should start.</param>
      <param name="length">The length of the desired subarray; the number of elements to select.</param>
      <returns>A subset of the supplied array.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns the last N elements of the supplied IEnumerable.
            </summary>
      <typeparam name="T">The type of the IEnumerable.</typeparam>
      <param name="source">The IEnumerable.</param>
      <param name="N">The number of elements to take from the end of the collection.</param>
      <returns>An IEnumerable containing the last N elements of the supplied IEnumerable.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.GetAssemblyAttribute``1(System.Reflection.Assembly)">
      <summary>
            Returns the specified assembly attribute of the specified assembly.
            </summary>
      <typeparam name="T">The assembly attribute to return.</typeparam>
      <param name="ass">The assembly from which to retrieve the attribute.</param>
      <returns>The retrieved attribute.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.SetLoggingLevel(System.String)">
      <summary>
            Sets the logging level of the LogManager to the specified level, disabling all lower logging levels.
            </summary>
      <param name="level">The desired logging level.</param>
    </member>
    <member name="M:Symbiote.Core.Utility.DisableLoggingLevel(NLog.LogLevel)">
      <summary>
            Disables the specified logging level witin the LogManager.
            </summary>
      <param name="level">The level to disable.</param>
    </member>
    <member name="M:Symbiote.Core.Utility.PrintModel(NLog.Logger,Symbiote.Core.Item,System.Int32)">
      <summary>
            Recursively prints the application Model to the specified logger.
            </summary>
      <param name="logger">The logger to which the Model should be printed.</param>
      <param name="root">The root Item from which the print should begin.</param>
      <param name="indent">The current level of indent to apply.</param>
    </member>
    <member name="M:Symbiote.Core.Utility.WildcardToRegex(System.String)">
      <summary>
            Converts the specified wildcard pattern to a regular expression.
            </summary>
      <param name="pattern">The wildcard pattern to convert.</param>
      <returns>The regular expression resulting from the conversion.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.ShortGuid">
      <summary>
            Returns a truncated GUID.
            </summary>
      <returns>A truncated GUID.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.GetSetting(System.String)">
      <summary>
            Retrieves the setting corresponding to the specified setting from the app.exe.config file.
            </summary>
      <param name="key">The setting to retrieve.</param>
      <returns>The string value of the retrieved setting.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.GetSetting(System.String,System.String)">
      <summary>
            Retrieves the setting corresponding to the specified setting from the app.exe.config file.
            If the setting isn't found, returns the provided defaultSetting and logs a warning.
            </summary>
      <param name="key">The setting to retrieve.</param>
      <param name="defaultSetting">The default setting to return if the setting can't be retrieved.</param>
      <returns>The string value of the retrieved setting.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.UpdateSetting(System.String,System.String)">
      <summary>
            Updates the setting corresponding to the specified setting within the app.exe.config file with the specified value.
            </summary>
      <param name="key">The setting to update.</param>
      <param name="value">The value to which the setting should be set.</param>
    </member>
    <member name="M:Symbiote.Core.Utility.PrintLogo(NLog.Logger)">
      <summary>
            Prints the logo for the application.
            </summary>
      <param name="logger">The logger to which the logo should be logged.</param>
    </member>
    <member name="M:Symbiote.Core.Utility.ModifyService(System.String)">
      <summary>
            Installs or uninstalls the application as a Windows Service, depending on the provided action.
            </summary>
      <returns>True if the installation/uninstallation succeeded, false otherwise.</returns>
    </member>
    <member name="M:Symbiote.Core.Utility.ComputeHash(System.String,System.String)">
      <summary>
            Computes a cryptographic hash of the provided text using the provided salt.
            </summary>
      <param name="text">The text to hash.</param>
      <param name="salt">The salt with which to seed the hash function.</param>
      <returns>The computed hash.</returns>
    </member>
    <member name="T:Symbiote.Core.MessageType">
      <summary>
            Defines the message type for an operation message.
            </summary>
    </member>
    <member name="F:Symbiote.Core.MessageType.Any">
      <summary>
            The default type; represents any level.
            </summary>
    </member>
    <member name="F:Symbiote.Core.MessageType.Info">
      <summary>
            The message contains low level trace information.
            </summary>
    </member>
    <member name="F:Symbiote.Core.MessageType.Warning">
      <summary>
            The message represents a recoverable issue.
            </summary>
    </member>
    <member name="F:Symbiote.Core.MessageType.Error">
      <summary>
            The message represents an uncoverable error.
            </summary>
    </member>
    <member name="T:Symbiote.Core.ResultCode">
      <summary>
            Defines the return result of an operation.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ResultCode.Unknown">
      <summary>
            The default return type.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ResultCode.Success">
      <summary>
            The operation succeeded.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ResultCode.Warning">
      <summary>
            The operation encountered recoverable issues and ultimately succeeded.
            </summary>
    </member>
    <member name="F:Symbiote.Core.ResultCode.Failure">
      <summary>
            The operation encountered unrecoverable errors and did not succeed.
            </summary>
    </member>
    <member name="T:Symbiote.Core.Message">
      <summary>
            Represents messages generated by operations.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Message.Type">
      <summary>
            The type of the message.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Message.Text">
      <summary>
            The content of the message.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Message.#ctor(Symbiote.Core.MessageType,System.String)">
      <summary>
            Constructs a message of the optionally supplied type with the optionally supplied message.
            </summary>
      <param name="type">The type of the message.</param>
      <param name="text">The content of the message.</param>
    </member>
    <member name="M:Symbiote.Core.Message.ToString">
      <summary>
            Returns a formatted string representation of the message.
            </summary>
      <returns>The formatted message string.</returns>
    </member>
    <member name="T:Symbiote.Core.Result">
      <summary>
            Represents the result of an operation, including a result code and list of messages generated during the operation.
            </summary>
      <remarks>
        <para>
                The primary function of the Result is to store the result of the operation in the <see cref="P:Symbiote.Core.Result.ResultCode" />
                property.  This property is of type <see cref="P:Symbiote.Core.Result.ResultCode" />, which has members <see cref="F:Symbiote.Core.ResultCode.Success" />,
                which represents successful operations, <see cref="F:Symbiote.Core.ResultCode.Warning" />, which represents operations that succeeded
                but generated warning messages while executing, and <see cref="F:Symbiote.Core.ResultCode.Failure" />, which represents operations that failed.
            </para>
        <para>
                Operations may also generate messages as they execute.  These messages are stored in the <see cref="P:Symbiote.Core.Result.Messages" /> property as a <see cref="T:System.Collections.Generic.List`1" />
                of type <see cref="T:Symbiote.Core.Message" />.  Each message consists of an <see cref="T:Symbiote.Core.MessageType" /> representing the type of message
                (informational with <see cref="F:Symbiote.Core.MessageType.Info" />, warning with <see cref="F:Symbiote.Core.MessageType.Warning" />, and errors with
                <see cref="F:Symbiote.Core.MessageType.Error" />), and a string containing the message itself.
            </para>
        <para>
                Messages can be added to the Result with the <see cref="M:Symbiote.Core.Result.AddInfo(System.String)" />, <see cref="M:Symbiote.Core.Result.AddWarning(System.String)" /> and <see cref="M:Symbiote.Core.Result.AddError(System.String)" />
                methods.  The AddWarning() and AddError() messages automatically change the ResultCode to Warning and Failure when invoked, respectively.
            </para>
        <para>
                Several shorthand logging methods are provided, namely <see cref="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)" /> and it's overloads, and 
                <see cref="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)" />.  These methods are designed to leverage NLog, however overloads are provided
                so that most logging functionality can be used by supplying a delegate method which accepts a string parameter.
            </para>
        <para>
                The <see cref="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)" /> method is provided so that Result objects can be merged with one another.  The instance
                on which the Incorporate() method is invoked will copy all messages from the specified Result into it's list, and if the ResultCode
                of the specified Result is "less than" that of the current instance, the instance will take on the new ResultCode.  For instance, if the invoking
                instance has a ResultCode of Warning and A Result with a ResultCode of Failure is incorporated, the ResultCode of the invoking instance
                will be changed to Failure.  This functionality is provided for nested or sequential operations.
            </para>
      </remarks>
    </member>
    <member name="P:Symbiote.Core.Result.ResultCode">
      <summary>
            The result of the operation.
            </summary>
    </member>
    <member name="P:Symbiote.Core.Result.Messages">
      <summary>
            The list of messages generated during the operation.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Result.#ctor(Symbiote.Core.ResultCode)">
      <summary>
            Constructs a new instance with the optionally supplied result code.
            </summary>
      <param name="initialResultCode">The initial result code for the instance.</param>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // create a new Result with an initial ResultCode of Failure
            Result retVal = new Result(ResultCode.Failure)
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.Log(System.Action{System.String},System.String)">
      <summary>
            Logs the supplied message using the supplied logging action.
            </summary>
      <param name="action">The logging action with which to log the message.</param>
      <param name="message">The message.</param>
      <remarks>
                The accessibility for this method is set to protected as there is no use case for this beyond the 
                support of the other logging methods in this class or derived classes.
            </remarks>
    </member>
    <member name="M:Symbiote.Core.Result.AddInfo(System.String)">
      <summary>
            Adds a message of type Info to the message list.
            </summary>
      <param name="message">The message to add.</param>
      <returns>This Result.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.AddWarning(System.String)">
      <summary>
            Adds a message of type Warning to the message list and sets the ResultCode to Warning.
            </summary>
      <param name="message">The message to add.</param>
      <returns>This Result</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddWarning("This is a warning message");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.AddError(System.String)">
      <summary>
            Adds a message of type Error to the message list and sets the ResultCode to Error.
            </summary>
      <param name="message">The message to add.</param>
      <returns>This Result.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddError("This is an error message");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LogResult(NLog.Logger,System.String)">
      <summary>
                Logs the result of the operation using the specified logger instance and the optionally specified caller as the source.
            </summary>
      <remarks>
        <para>
                The default logging methods are applied to corresponding message types; Info for Info, Warn for Warning and Error for Errors.
            </para>
        <para>
                The caller parameter is automatically set to the calling method.  In some cases, such as when a result for a method
                is logged within a method different from the executing method, this will need to be explicitly specified
                to reflect the actual source of the Result.
            </para>
        <para>
                If a logger different from NLog is desired, modify the type of the logger parameter accordingly and substitute
                the appropriate methods for info, warn and error log levels (assuming they are applicable).
            </para>
      </remarks>
      <param name="logger">The logger with which to log the result.</param>
      <param name="caller">The name of calling method.</param>
      <returns>This Result.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // log the result
            // use logger.Info for basic and informational messages, logger.Warn for warnings
            // and logger.Error for errors.
            retVal.LogResult(logger);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.String)">
      <summary>
                Logs the result of the operation using the specified logging method and the optionally specified caller as the source.
            </summary>
      <remarks>
        <para>
                The specified logging method is applied to all message types (Info, Warning, and Error).
            </para>
        <para>
                The caller parameter is automatically set to the calling method.  In some cases, such as when a result for a method
                is logged within a method different from the executing method, this will need to be explicitly specified
                to reflect the actual source of the Result.
            </para>
      </remarks>
      <param name="action">The logging method with which to log the result.</param>
      <param name="caller">The name of the calling method.</param>
      <returns>This Result.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // log the result using the Debug logging level for all message types.
            retVal.LogResult(logger.Debug);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)">
      <summary>
                Logs the result of the operation using the three specified logging methods and the optionally specified caller as the source.
            </summary>
      <remarks>
        <para>
                The first, second and third specified logging methods are applied to messages of type Info, Warning and Error, respectively.
            </para>
        <para>
                The caller parameter is automatically set to the calling method.  In some cases, such as when a result for a method
                is logged within a method different from the executing method, this will need to be explicitly specified
                to reflect the actual source of the Result.
            </para>
      </remarks>
      <param name="successAction">The logging method with which to log successful messages.</param>
      <param name="warningAction">The logging method with which to log warning messages.</param>
      <param name="failureAction">The logging method with which to log messages.</param>
      <param name="caller">The name of the calling method.</param>
      <returns>This Result.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // log the result
            // use logger.Trace for basic and informational messages, logger.Debug for warnings
            // and logger.Warn for errors.
            retVal.LogResult(logger.Trace, logger.Debug, logger.Warn);
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},System.String,System.String)">
      <summary>
            Logs all messages in the message list to the specified logging method.  If specified, logs a header and footer message before and after the list, respectively.
            </summary>
      <param name="action">The logging method with which to log the messages.</param>
      <param name="header">A header message to log prior to the list of messages.</param>
      <param name="footer">A footer message to display after the list of messages.</param>
      <returns>This Result.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // add a warning
            retVal.AddWarning("This is a warning");
            
            // log the list of messages with the Info logging level
            // include a header and footer
            retVal.LogAllMessages(logger.Info, "Message list:", "End of list.");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LogAllMessages(System.Action{System.String},Symbiote.Core.MessageType,System.String,System.String)">
      <summary>
                Logs all messages in the message list with a <see cref="T:Symbiote.Core.MessageType" /> matching the specified type
                to the specified logging method.  If specified, logs a header and footer message before and after the list, respectively.
            </summary>
      <param name="action">The logging method with which to log the messages.</param>
      <param name="messageType">The MessageType of messages to log.</param>
      <param name="header">A header message to log prior to the list of messages.</param>
      <param name="footer">A footer message to display after the list of messages.</param>
      <returns>This Result.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // add a warning
            retVal.AddWarning("This is a warning");
            
            // log the list of messages with the Info logging level
            // include a header and footer
            retVal.LogAllMessages(logger.Info, "Message list:", "End of list.");
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LastInfoMessage">
      <summary>
            Returns the most recently added informational message contained within the message list.
            </summary>
      <returns>The message.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // print the last info message
            Console.WriteLine(retVal.LastInfoMessage());
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LastWarningMessage">
      <summary>
            Returns the most recently added warning message contained within the message list.
            </summary>
      <returns>The message.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add a warning message
            retVal.AddWarning("This is a warning");
            
            // print the last warning
            Console.WriteLine(retVal.LastWarningMessage());
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.LastErrorMessage">
      <summary>
            Returns the most recently added error message contained within the message list.
            </summary>
      <returns>The message.</returns>
      <example>
        <code>
            // create a new Result
            Result retVal = new Result();
            
            // add an error message
            retVal.AddError("This is an error");
            
            // print the last error
            Console.WriteLine(retVal.LastErrorMessage());
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.Incorporate(Symbiote.Core.Result)">
      <summary>
                Adds details from the specified Result to this Result, including all Messages and the 
                ResutCode, if lesser than the ResultCode of this instance.
            </summary>
      <param name="Result">The Result from which to copy the Messages.</param>
      <example>
        <code>
            // create an "outer" Result
            // the ResultCode of this instance is Success by default.
            Result outer = new Result();
            
            // ... some logic ...
            
            // create an "inner" Result
            // set this to the result of a different method
            Result inner = MyMethod();
            
            // incorporate the inner Result into the outer
            // this copies all messages and, if the inner instance's ResultCode
            // is lesser (Success &gt; Warning &gt; Failure) than the outer, copies the ResultCode as well.
            outer.Incorporate(inner);
            
            // log the result.  the combined list of messages from both inner and outer
            // are logged, and the ResultCode is equal to the lesser of the two ResultCodes.
            outer.LogResult(logger); 
            </code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result.op_Implicit(Symbiote.Core.Result)~System.Boolean">
      <summary>
            Allows for implicit casts to boolean.  Returns false if ResultCode is Failure, true otherwise.
            </summary>
      <param name="Result">The Result to convert.</param>
      <example>
        <code>
            // generate A Result
            Result result = SomeOperation();
            
            // check the result
            if (!result)
            {
                Console.WriteLine("Operation failed!");
            }
            else
                Console.WriteLine("Operation succeeded!");
            </code>
      </example>
    </member>
    <member name="T:Symbiote.Core.Result`1">
      <summary>
            Represents the result of an operation, including a result code and list of messages generated during the operation.
            </summary>
      <remarks>
        <para>
                The primary function of the Result is to store the result of the operation in the <see cref="P:Symbiote.Core.Result.ResultCode" />
                property.  This property is of type <see cref="T:Symbiote.Core.ResultCode" />, which has members <see cref="F:Symbiote.Core.ResultCode.Success" />,
                which represents successful operations, <see cref="F:Symbiote.Core.ResultCode.Warning" />, which represents operations that succeeded
                but generated warning messages while executing, and <see cref="F:Symbiote.Core.ResultCode.Failure" />, which represents operations that failed.
            </para>
        <para>
                Operations may also generate messages as they execute.  These messages are stored in the <see cref="P:Symbiote.Core.Result.Messages" /> property as a <see cref="T:System.Collections.Generic.List`1" />
                of type <see cref="T:Symbiote.Core.Message" />.  Each message consists of an <see cref="T:Symbiote.Core.MessageType" /> representing the type of message
                (informational with <see cref="F:Symbiote.Core.MessageType.Info" />, warning with <see cref="F:Symbiote.Core.MessageType.Warning" />, and errors with
                <see cref="F:Symbiote.Core.MessageType.Error" />), and a string containing the message itself.
            </para>
        <para>
                Messages can be added to the Result with the <see cref="M:Symbiote.Core.Result`1.AddInfo(System.String)" />, <see cref="M:Symbiote.Core.Result`1.AddWarning(System.String)" /> and <see cref="M:Symbiote.Core.Result`1.AddError(System.String)" />
                methods.  The AddWarning() and AddError() messages automatically change the ResultCode to Warning and Failure when invoked, respectively.
            </para>
        <para>
                Several shorthand logging methods are provided, namely <see cref="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)" /> and it's overloads, and 
                <see cref="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)" />.  These methods are designed to leverage NLog, however overloads are provided
                so that most logging functionality can be used by supplying a delegate method which accepts a string parameter.
            </para>
        <para>
                The <see cref="M:Symbiote.Core.Result`1.Incorporate(Symbiote.Core.Result)" /> method is provided so that Result objects can be merged with one another.  The instance
                on which the Incorporate() method is invoked will copy all messages from the specified Result into it's list, and if the ResultCode
                of the specified Result is "less than" that of the current instance, the instance will take on the new ResultCode.  For instance, if the invoking
                instance has a ResultCode of Warning and A Result with a ResultCode of Failure is incorporated, the ResultCode of the invoking instance
                will be changed to Failure.  This functionality is provided for nested or sequential operations.
            </para>
        <para>
                The generic version of Result, <see cref="T:Symbiote.Core.Result`1" />, accepts a single type parameter and includes an additional property corresponding
                to the specified type in <see cref="P:Symbiote.Core.Result`1.ReturnValue" />.  This functionality is provided for operations which have a return value other than void, allowing these 
                methods to return the original return value in addition to the Result.  This version also includes the <see cref="M:Symbiote.Core.Result`1.SetReturnValue(`0)" /> method, which 
                sets the value of the Result property to the specified value.  The property may also be set directly; this method, however, allows for fluent API usage.
            </para>
      </remarks>
      <typeparam name="T">The type of the object contained within the Result property.</typeparam>
    </member>
    <member name="P:Symbiote.Core.Result`1.ReturnValue">
      <summary>
            An object containing the result of the operation.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Result`1.#ctor">
      <summary>
            Constructs a default Result.
            </summary>
    </member>
    <member name="M:Symbiote.Core.Result`1.AddInfo(System.String)">
      <summary>
            Adds a message of type Info to the message list.
            </summary>
      <param name="message">The message to add.</param>
      <returns>This Result.</returns>
      <example>
        <code><![CDATA[
            // create a new Result<T>
            Result<object> retVal = new Result<object>();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.AddWarning(System.String)">
      <summary>
            Adds a message of type Warning to the message list and sets the ResultCode to Warning.
            </summary>
      <param name="message">The message to add.</param>
      <returns>This Result</returns>
      <example>
        <code><![CDATA[
            // create a new Result<T>
            Result<object> retVal = new Result<object>();
            
            // add an informational message
            retVal.AddWarning("This is a warning message");
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.AddError(System.String)">
      <summary>
            Adds a message of type Error to the message list and sets the ResultCode to Error.
            </summary>
      <param name="message">The message to add.</param>
      <returns>This Result.</returns>
      <example>
        <code><![CDATA[
            // create a new Result<T>
            Result<object> retVal = new Result<object>();
            
            // add an informational message
            retVal.AddError("This is an error message");
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.LogResult(NLog.Logger,System.String)">
      <summary>
                Logs the result of the operation using the specified logger instance and the optionally specified caller as the source.
            </summary>
      <remarks>
        <para>
                The default logging methods are applied to corresponding message types; Info for Info, Warn for Warning and Error for Errors.
            </para>
        <para>
                The caller parameter is automatically set to the calling method.  In some cases, such as when a result for a method
                is logged within a method different from the executing method, this will need to be explicitly specified
                to reflect the actual source of the Result.
            </para>
        <para>
                If a logger different from NLog is desired, modify the type of the logger parameter accordingly and substitute
                the appropriate methods for info, warn and error log levels (assuming they are applicable).
            </para>
      </remarks>
      <param name="logger">The logger with which to log the result.</param>
      <param name="caller">The name of calling method.</param>
      <returns>This Result.</returns>
      <example>
        <code><![CDATA[
            // create a new Result<T>
            Result<object> retVal = new Result<object>();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // log the result
            // use logger.Info for basic and informational messages, logger.Warn for warnings
            // and logger.Error for errors.
            retVal.LogResult(logger);
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.String)">
      <summary>
                Logs the result of the operation using the specified logging method and the optionally specified caller as the source.
            </summary>
      <remarks>
        <para>
                The specified logging method is applied to all message types (Info, Warning, and Error).
            </para>
        <para>
                The caller parameter is automatically set to the calling method.  In some cases, such as when a result for a method
                is logged within a method different from the executing method, this will need to be explicitly specified
                to reflect the actual source of the Result.
            </para>
      </remarks>
      <param name="action">The logging method with which to log the result.</param>
      <param name="caller">The name of the calling method.</param>
      <returns>This Result.</returns>
      <example>
        <code><![CDATA[
            // create a new Result<T>
            Result<object> retVal = new Result<object>();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // log the result using the Debug logging level for all message types.
            retVal.LogResult(logger.Debug);
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.LogResult(System.Action{System.String},System.Action{System.String},System.Action{System.String},System.String)">
      <summary>
                Logs the result of the operation using the three specified logging methods and the optionally specified caller as the source.
            </summary>
      <remarks>
        <para>
                The first, second and third specified logging methods are applied to messages of type Info, Warning and Error, respectively.
            </para>
        <para>
                The caller parameter is automatically set to the calling method.  In some cases, such as when a result for a method
                is logged within a method different from the executing method, this will need to be explicitly specified
                to reflect the actual source of the Result.
            </para>
      </remarks>
      <param name="successAction">The logging method with which to log successful messages.</param>
      <param name="warningAction">The logging method with which to log warning messages.</param>
      <param name="failureAction">The logging method with which to log messages.</param>
      <param name="caller">The name of the calling method.</param>
      <returns>This Result.</returns>
      <example>
        <code><![CDATA[
            // create a new Result<T>
            Result<object> retVal = new Result<object>();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // log the result
            // use logger.Trace for basic and informational messages, logger.Debug for warnings
            // and logger.Warn for errors.
            retVal.LogResult(logger.Trace, logger.Debug, logger.Warn);
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.LogAllMessages(System.Action{System.String},System.String,System.String)">
      <summary>
            Logs all messages in the message list to the specified logging method.  If specified, logs a header and footer message before and after the list, respectively.
            </summary>
      <param name="action">The logging method with which to log the messages.</param>
      <param name="header">A header message to log prior to the list of messages.</param>
      <param name="footer">A footer message to display after the list of messages.</param>
      <returns>This Result.</returns>
      <example>
        <code><![CDATA[
            // create a new Result<T>
            Result<object> retVal = new Result<object>();
            
            // add an informational message
            retVal.AddInfo("This is an informational message");
            
            // add a warning
            retVal.AddWarning("This is a warning");
            
            // log the list of messages with the Info logging level
            // include a header and footer
            retVal.LogAllMessages(logger.Info, "Message list:", "End of list.");
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.Incorporate(Symbiote.Core.Result)">
      <summary>
                Adds details from the specified Result to this Result, including all Messages and the 
                ResutCode, if lesser than the ResultCode of this instance.
            </summary>
      <param name="Result">The Result from which to copy the Messages.</param>
      <example>
        <code><![CDATA[
            // create an "outer" Result<T>
            // the ResultCode of this instance is Success by default.
            Result<object> outer = new Result<object>();
            
            // ... some logic ...
            
            // create an "inner" Result<T>
            // set this to the result of a different method
            Result<object> inner = MyMethod<object>();
            
            // incorporate the inner Result into the outer
            // this copies all messages and, if the inner instance's ResultCode
            // is lesser (Success > Warning > Failure) than the outer, copies the ResultCode as well.
            outer.Incorporate(inner);
            
            // log the result.  the combined list of messages from both inner and outer
            // are logged, and the ResultCode is equal to the lesser of the two ResultCodes.
            outer.LogResult(logger); 
            ]]></code>
      </example>
    </member>
    <member name="M:Symbiote.Core.Result`1.SetReturnValue(`0)">
      <summary>
            Sets the ReturnValue property to the specified value.
            </summary>
      <param name="returnValue">The value to which the Result property is to be set.</param>
      <returns>This Result.</returns>
      <example>
        <code><![CDATA[
            ///create a new Result
            Result<string> result = new Result<string>()
            result
              .SetReturnValue("Hello World!")
              .AddInfo("Set value.")
              .LogResult(logger.Info);
            ]]></code>
      </example>
    </member>
    <member name="F:Symbiote.Core.WindowsService.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Symbiote.Core.WindowsService.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Symbiote.Core.WindowsService.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="N:Symbiote.Core.Plugin">
      <summary />
    </member>
    <member name="N:Symbiote.Core.Plugin.Connector">
      <summary />
    </member>
    <member name="N:Symbiote.Core.Plugin.Endpoint">
      <summary />
    </member>
    <member name="N:Symbiote.Core.Service">
      <summary />
    </member>
    <member name="N:Symbiote.Core.Service.IoT.MQTT">
      <summary />
    </member>
    <member name="N:Symbiote.Core.Service.Web">
      <summary />
    </member>
    <member name="N:Symbiote.Core.Service.Web.API">
      <summary />
    </member>
    <member name="N:Symbiote.Core.Service.Web.SignalR">
      <summary />
    </member>
    <member name="N:Symbiote.Cryptography">
      <summary />
    </member>
    <member name="G:Symbiote.Core.Service">
      <summary />
    </member>
    <member name="G:Symbiote.Core">
      <summary />
    </member>
    <member name="G:Symbiote.Core.Plugin">
      <summary />
    </member>
    <member name="G:Symbiote.Core.Platform">
      <summary />
    </member>
  </members>
</doc>